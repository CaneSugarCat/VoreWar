using System;
using System.Collections.Generic;
using System.Linq;
using static LogUtilities;
using static TacticalMessageLog;

static class StoredLogTexts
{
    static StoredLogTexts()
    {
        InitializeLists();
    }

    internal class EventString
    {
        internal Race ActorRace;
        internal Race TargetRace;
        internal Func<EventLog, string> GetString;
        internal Predicate<EventLog> Conditional;
        internal int Priority;

        public EventString(Func<EventLog, string> getString, int priority = 0, Race actorRace = (Race)4000, Race targetRace = (Race)4000, Predicate<EventLog> conditional = null)
        {
            Priority = priority;
            ActorRace = actorRace;
            TargetRace = targetRace;
            GetString = getString;
            if (conditional == null)
                Conditional = (s) => true;
            else
                Conditional = conditional;
        }
    }

    internal enum MessageTypes
    {
        SwallowMessages,
        RandomDigestionMessages,
        BellyRubMessages,
        CockVoreMessages,
        AnalVoreMessages,
        UnbirthMessages,
        TailVoreMessages,
        DigestionDeathMessages,
        BreastVoreMessages,
        AbsorptionMessages,
        BreastRubMessages,
        TailRubMessages,
        BallMassageMessages,
        TransferMessages,
        KissTransferMessages,
        VoreStealMessages,
        BreastFeedMessages,
        CumFeedMessages,
        RebirthMessages,
        GreatEscapeKeep,
        GreatEscapeFlee,
    }

    static internal List<EventString> Redirect(MessageTypes type)
    {
        switch (type)
        {
            case MessageTypes.SwallowMessages:
                return SwallowMessages;
            case MessageTypes.RandomDigestionMessages:
                return RandomDigestionMessages;
            case MessageTypes.BellyRubMessages:
                return BellyRubMessages;
            case MessageTypes.CockVoreMessages:
                return CockVoreMessages;
            case MessageTypes.AnalVoreMessages:
                return AnalVoreMessages;
            case MessageTypes.UnbirthMessages:
                return UnbirthMessages;
            case MessageTypes.TailVoreMessages:
                return TailVoreMessages;
            case MessageTypes.DigestionDeathMessages:
                return DigestionDeathMessages;
            case MessageTypes.BreastVoreMessages:
                return BreastVoreMessages;
            case MessageTypes.AbsorptionMessages:
                return AbsorptionMessages;
            case MessageTypes.BreastRubMessages:
                return BreastRubMessages;
            case MessageTypes.TailRubMessages:
                return TailRubMessages;
            case MessageTypes.BallMassageMessages:
                return BallMassageMessages;
            case MessageTypes.TransferMessages:
                return TransferMessages;
            case MessageTypes.KissTransferMessages:
                return KissTransferMessages;
            case MessageTypes.VoreStealMessages:
                return VoreStealMessages;
            case MessageTypes.BreastFeedMessages:
                return BreastFeedMessages;
            case MessageTypes.CumFeedMessages:
                return CumFeedMessages;
            case MessageTypes.RebirthMessages:
                return RebirthMessages;
            case MessageTypes.GreatEscapeKeep:
                return GreatEscapeKeepMessages;
            case MessageTypes.GreatEscapeFlee:
                return GreatEscapeFleeMessages;
            default:
                return SwallowMessages;
        }
    }

    internal static List<EventString> SwallowMessages;
    internal static List<EventString> RandomDigestionMessages;
    internal static List<EventString> BellyRubMessages;
    internal static List<EventString> CockVoreMessages;
    internal static List<EventString> AnalVoreMessages;
    internal static List<EventString> UnbirthMessages;
    internal static List<EventString> TailVoreMessages;
    internal static List<EventString> DigestionDeathMessages;
    internal static List<EventString> BreastVoreMessages;
    internal static List<EventString> AbsorptionMessages;
    internal static List<EventString> BreastRubMessages;
    internal static List<EventString> TailRubMessages;
    internal static List<EventString> BallMassageMessages;
    internal static List<EventString> TransferMessages;
    internal static List<EventString> KissTransferMessages;
    internal static List<EventString> VoreStealMessages;
    internal static List<EventString> BreastFeedMessages;
    internal static List<EventString> CumFeedMessages;
    internal static List<EventString> RebirthMessages;
    internal static List<EventString> GreatEscapeKeepMessages;
    internal static List<EventString> GreatEscapeFleeMessages;

    internal static void InitializeLists()
    {
        if (SwallowMessages != null)
            return;
        bool PreyDead(EventLog s) => s.Prey.IsDead;
        bool PreyCumgested(EventLog s) => s.Prey.IsDead && InBalls(s);
        bool CanBurp(EventLog s) => Config.BurpFraction > .1f;
        bool Farts(EventLog s) => Config.FartOnAbsorb;
        bool Scat(EventLog s) => Config.Scat && Config.CleanDisposal == false && (s.preyLocation == PreyLocation.stomach || s.preyLocation == PreyLocation.stomach2);
        bool Diaper(EventLog s) => Config.CleanDisposal && (s.preyLocation == PreyLocation.stomach || s.preyLocation == PreyLocation.stomach2);
        bool Lewd(EventLog s) => Config.LewdDialog;
        bool HardVore(EventLog s) => Config.HardVoreDialog;
        bool HardVoreInStomach(EventLog s) => Config.HardVoreDialog && (s.preyLocation == PreyLocation.stomach || s.preyLocation == PreyLocation.stomach2);
        bool InStomach(EventLog s) => s.preyLocation == PreyLocation.stomach || s.preyLocation == PreyLocation.stomach2;
        bool InWomb(EventLog s) => s.preyLocation == PreyLocation.womb;
        bool InStomachOrWomb(EventLog s) => s.preyLocation == PreyLocation.stomach || s.preyLocation == PreyLocation.stomach2 || s.preyLocation == PreyLocation.womb;
        bool InBreasts(EventLog s) => s.preyLocation == PreyLocation.breasts || s.preyLocation == PreyLocation.leftBreast || s.preyLocation == PreyLocation.rightBreast;
        bool InBalls(EventLog s) => s.preyLocation == PreyLocation.balls;
        bool FirstTime(EventLog s) => s.Unit.DigestedUnits == 0 && s.Unit.Level < 10 && s.Unit.Type != UnitType.Mercenary && s.Unit.Type != UnitType.SpecialMercenary && State.GameManager.PureTactical == false;
        bool FirstTimeAbsorption(EventLog s) => s.Unit.DigestedUnits == 1 && s.Unit.Level < 10 && s.Unit.Type != UnitType.Mercenary && s.Unit.Type != UnitType.SpecialMercenary && State.GameManager.PureTactical == false;
        bool TargetFirstTime(EventLog s) => s.Target.DigestedUnits == 0 && s.Target.Level < 10 && s.Target.Type != UnitType.Mercenary && s.Target.Type != UnitType.SpecialMercenary && State.GameManager.PureTactical == false;
        bool Friendly(EventLog s) => s.Unit.Side == s.Target.Side;
        bool Endo(EventLog s) => s.Unit.HasTrait(Traits.Endosoma);
        bool HealingEndo(EventLog s) => s.Unit.HasTrait(Traits.Endosoma) && s.Unit.HasTrait(Traits.HealingBelly);
        bool FriendlyPrey(EventLog s) => s.Unit.Side == s.Prey.Side;
        bool ActorHumanoid(EventLog s) => s.Unit.Race < Race.Vagrants || s.Unit.Race >= Race.Selicia;
        bool HasGreatEscape(EventLog s) => s.Target.HasTrait(Traits.TheGreatEscape);
        bool Cursed(EventLog s) => s.Target.GetStatusEffect(StatusEffectType.WillingPrey) != null;
        bool Shrunk(EventLog s) => s.Target.GetStatusEffect(StatusEffectType.Diminished) != null;
        bool SizeDiff(EventLog s, float ratio) => State.RaceSettings.GetBodySize(s.Unit.Race) * s.Unit.GetScale(1) >= State.RaceSettings.GetBodySize(s.Target.Race) * s.Target.GetScale(1) * ratio;
        bool SizeDiffPrey(EventLog s, float ratio) => State.RaceSettings.GetBodySize(s.Unit.Race) * s.Unit.GetScale(1) >= State.RaceSettings.GetBodySize(s.Prey.Race) * s.Target.GetScale(1) * ratio;
        //bool ReqSSW(EventLog s) => SameSexWarrior(s.Unit) != "NULL";
        bool ReqRAW(EventLog s) => RandomAlliedWarrior(s.Unit) != null && RandomAlliedWarrior(s.Unit) != s.Target;
        bool ReqOSW(EventLog s) => AttractedWarrior(s.Unit) != null;
        bool ReqOSWLewd(EventLog s) => AttractedWarrior(s.Unit) != null && Lewd(s);
        bool ReqOSWStomach(EventLog s) => AttractedWarrior(s.Unit) != null && InStomach(s);
        bool ReqOSWBelly(EventLog s) => AttractedWarrior(s.Unit) != null && InStomachOrWomb(s);
        bool ReqSSWAndOSW(EventLog s) => CompetitionWarrior(s.Unit) != null && AttractedWarrior(s.Unit) != null;
        bool ReqTargetCompatible(EventLog s) => RomanticTarget(s.Unit, s.Target);
        bool ReqTargetCompatibleLewd(EventLog s) => RomanticTarget(s.Unit, s.Target) && Lewd(s);
        bool ReqTargetClothingOn(EventLog s) => s.Target.ClothingType != 0;
        bool ReqTargetClothingOff(EventLog s) => s.Target.ClothingType == 0;
        bool WeightGain(EventLog s) => Config.WeightGain;
        bool BonesDisposal(EventLog s) => Config.Bones && (s.preyLocation == PreyLocation.stomach || s.preyLocation == PreyLocation.stomach2);
        bool TargetBoobs(EventLog s) => s.Target.HasBreasts;
        bool ActorBoobs(EventLog s) => s.Unit.HasBreasts;
        bool TargetDick(EventLog s) => s.Target.HasDick;
        bool ActorDick(EventLog s) => s.Unit.HasDick;
        bool ActorTail(EventLog s) => RaceParameters.GetTraitData(s.Unit).HasTail;
        bool TargetLeader(EventLog s) => s.Target.Type == UnitType.Leader;
        bool ActorLeader(EventLog s) => s.Unit.Type == UnitType.Leader;
        bool TargetHumanoid(EventLog s) => s.Target.Race < Race.Vagrants || s.Target.Race >= Race.Selicia;
        bool CanAddressPlayer(EventLog s) => Config.FourthWallBreakType == FourthWallBreakType.On ||
                                                !TacticalUtilities.IsUnitControlledByPlayer(s.Unit) && Config.FourthWallBreakType == FourthWallBreakType.EnemyOnly ||
                                                TacticalUtilities.IsUnitControlledByPlayer(s.Unit) && Config.FourthWallBreakType == FourthWallBreakType.FriendlyOnly;
        bool Condoms(EventLog s) => Config.CondomsForCV && (s.preyLocation == PreyLocation.balls);
        bool PreyIsVeteranPred(EventLog s) => s.Target.DigestedUnits == 0 && s.Target.Level < 10 && State.GameManager.PureTactical == false;
        bool CleaveageVore(EventLog s) => ((s.preyLocation == PreyLocation.breasts) || ((s.preyLocation == PreyLocation.rightBreast || s.preyLocation == PreyLocation.leftBreast) && Config.FairyBVType == FairyBVType.Shared)) && s.Unit.Race != Race.Kangaroos; //Cleaveage vore lines by Cartography! All lines include a common theme to them (Which I guess is semi-BTF), to quote Cartography: "This document does include a sort of temporary sentient fat as a common motief, since it's what makes the most sense to me as the answer to "once cleavage vored, where does the prey go?" My idea is that, unlike most vore, cleavage vore has absorbtion technically occur instantly, with the digestion period being a time when the prey is sentient fat that can still become a seperate person again, meanwhile death is the point when escape becomes impossible, and full assimilation begins."

        SwallowMessages = new List<EventString>()
        {
            //Feral Lions
            new EventString((i) => $"<b>{i.Unit.Name}</b> pounces upon <b>{i.Target.Name}</b>, opens {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob")} wide and engulfs {GPPHis(i.Unit)} prey, gulping powerfully and using {GPPHis(i.Unit)} tongue spines to drag {GPPHim(i.Target)} inside even more swiftly.",
            actorRace: Race.FeralLions, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> pins <b>{i.Target.Name}</b> to the ground, who is immobile and helpless against the deliberate, smug assault of rank lion breath, before being slowly and indulgently swallowed down.",
            actorRace: Race.FeralLions, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> massive paw {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} swats {GPPHis(i.Unit)} morsel, <b>{i.Target.Name}</b>, to the ground, left to squirm under the leonine paw, before being picked up by lips and tongue and sent to slide down the warm, slobbery gullet.",
            conditional: s => SizeDiff(s, 3), actorRace: Race.FeralLions, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> licks up <b>{i.Target.Name}</b> off the ground with {GPPHis(i.Unit)} rough tongue, before swallowing {GPPHim(i.Target)} along with a pool of slobber.",
            conditional: s => SizeDiff(s, 5), actorRace: Race.FeralLions, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> snaps up <b>{i.Target.Name}</b> in {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob")}, tosses {GPPHim(i.Target)} in the air, and makes {GPPHim(i.Target)} disappear straight down {GPPHis(i.Unit)} gullet.",
            conditional: s => SizeDiff(s, 2), actorRace: Race.FeralLions, priority: 9),
            
            //Vagrants
            new EventString((i) => $"<b>{i.Unit.Name}</b> thrusts its tentacles in <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body, grasping {GPPHis(i.Target)} core and reeling it inside their {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob")}!",
            actorRace: Race.Vagrants, targetRace: Race.Slimes, priority: 10),
            new EventString((i) => $"Despite {GPPHis(i.Target)} struggling <b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} bulging out <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetPredDesc(i.Unit)} body!",
            actorRace: Race.Vagrants, targetRace: Race.Slimes, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> overcomes <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> resistance, engulfing the unfortunate vagrant inside their {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            actorRace: Race.Vagrants, targetRace: Race.Vagrants, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{i.Target.Name}</b> with their tentacles and drags the struggling {GetPreyDesc(i.Target)} prey into their {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob")}!",
            actorRace: Race.Vagrants, targetRace: Race.Vagrants, priority: 10),
            new EventString((i) => $"Despite its struggling <b>{i.Target.Name}</b> finds itself bulging out <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetPredDesc(i.Unit)} body!",
            actorRace: Race.Vagrants, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> dives down onto <b>{i.Target.Name}</b>, stuffing {GPPHim(i.Target)} inside!",
            actorRace: Race.Vagrants, priority: 9),
            
            //Slimes
            new EventString((i) => $"<b>{i.Unit.Name}</b> forces a part of {GPPHimself(i.Unit)} inside <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body, engulfing the other slimes core and tearing it from {GPPHis(i.Target)} form!",
            actorRace: Race.Slimes, targetRace: Race.Slimes, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> launches {GPPHimself(i.Unit)} at <b>{i.Target.Name}</b>, engulfing {GPPHim(i.Target)} almost instantly!",
            actorRace: Race.Slimes, targetRace: Race.Slimes, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> turns into a puddle and oozes under <b>{i.Target.Name}</b>, engulfing {GPPHim(i.Target)} from below!",
            actorRace: Race.Slimes, targetRace: Race.Slimes, priority: 10),
            
            //Deer generic
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out a soft moan as <b>{i.Target.Name}</b> slides into the herbivore's stomach. Despite usually eating greens, the {GetRaceDescSingl(i.Unit)} welcomes some much needed protein.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> flat teeth scrape across <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> back as the {GetRaceDescSingl(i.Unit)}'s throat engulfs {GPPHim(i.Target)}, pressing the unwilling meal down into {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out a cute bleat that doesn't match {GPPHis(i.Unit)} recent actions as the {GetRaceDescSingl(i.Unit)}'s {PreyLocStrings.ToSyn(PreyLocation.stomach)} swells to accommodate <b>{i.Target.Name}</b>.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> digs {GPPHis(i.Unit)} hooves into the dirt and grunts as {GPPHe(i.Unit)} pull{SIfSingular(i.Unit)} <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob")} and stuff{SIfSingular(i.Unit)} {GPPHim(i.Target)} into {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"After stunning <b>{i.Target.Name}</b> with a hooved kick, <b>{i.Unit.Name}</b> opens {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob")} as wide as {GPPHe(i.Unit)} can before devouring the {GetRaceDescSingl(i.Target)} like a clump of crab grass!",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"A tremendous belch announces to friend and foe alike that <b>{i.Target.Name}</b> has been fully consumed by the hooved predator, <b>{i.Unit.Name}</b>. The {GetRaceDescSingl(i.Unit)} wipes spittle from {GPPHis(i.Unit)} chin as {GPPHis(i.Unit)} dinner squirms within {GPPHis(i.Unit)} fluffy tum.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> fluffy {GetRaceDescSingl(i.Unit)} legs buckle as {GPPHe(i.Unit)} gulp{SIfSingular(i.Unit)} down <b>{i.Target.Name}</b>. The {GetRaceDescSingl(i.Target)} screams angrily as the {GetRaceDescSingl(i.Unit)}'s {PreyLocStrings.ToSyn(PreyLocation.stomach)} stretches from {GPPHis(i.Target)} entry into it.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"Feeling that {GPPHe(i.Unit)} {HasHave(i.Unit)} no other choice, <b>{i.Unit.Name}</b> drops {GPPHis(i.Unit)} weapon and uses {GPPHis(i.Unit)} mouth to dispatch <b>{i.Target.Name}</b>! After a flurry of fighting, the panting {GetRaceDescSingl(i.Unit)} is left standing alone, {GPPHis(i.Unit)} gut swollen and wobbling.",
            actorRace: Race.Deer, priority: 9),
            //Deer eats Wolf
            new EventString((i) => $"Turning the tables on {GPPHis(i.Unit)} would-be predator, <b>{i.Unit.Name}</b> shocks everyone as {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob")} engulfs <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head. After a few gulps, the {GetPreyDesc(i.Target)} prey makes a distinct bulge along the front of the {GetRaceDescSingl(i.Unit)}'s wobbling gut!",
            actorRace: Race.Deer, targetRace: Race.Wolves, priority: 9),
            //Deer Cannibalism
            new EventString((i) => $"Without warning, <b>{i.Unit.Name}</b> swallows <b>{i.Target.Name}</b> whole! The deer-on-deer predation leaves the victorious {GetRaceDescSingl(i.Unit)} moaning as {GPPHe(i.Unit)} tr{IesIfSingular(i.Unit)} to get {GPPHis(i.Unit)} meal to settle in.",
            actorRace: Race.Deer, targetRace: Race.Deer, priority: 9),
            new EventString((i) => $"In a singsong melody reminiscent of a certain holiday song, <b>{i.Unit.Name}</b> asks: \"<b>{i.Target.Name}</b>, with your veal so fine, won't you be my meal tonight?\" before swiftly devouring {GPPHis(i.Unit)} fellow {GetRaceDescSingl(i.Target)} on the spot!",
            actorRace: Race.Deer, targetRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> finally gets why {GPPHis(i.Unit)} people are preyed upon as {GPPHe(i.Unit)} force{SIfSingular(i.Unit)} <b>{i.Target.Name}</b> down {GPPHis(i.Target)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            actorRace: Race.Deer, targetRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is surpised to find that {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, despite stretching, feels quite fine as <b>{i.Target.Name}</b> is forced to curl up within {GPPHim(i.Unit)}. The {GetRaceDescSingl(i.Unit)} worries that {GPPHis(i.Unit)} favorite food might be actually venison.",
            actorRace: Race.Deer, targetRace: Race.Deer, priority: 9),
            //Deer Virgin Preds
            new EventString((i) => $"<b>{i.Unit.Name}</b> breaks {GPPHis(i.Unit)} people's traditional veganism by adding <b>{i.Target.Name}</b> to {GPPHis(i.Unit)} menu!",
            actorRace: Race.Deer, priority: 9, conditional: s => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"The poor herbivore, <b>{i.Unit.Name}</b>, gags, almost vomiting as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body slides into {GPPHis(i.Unit)} cervid guts. <b>{i.Unit.Name}</b> wobbles on {GPPHis(i.Unit)} hooves, regretting {GPPHis(i.Unit)} new diet.",
            actorRace: Race.Deer, priority: 9, conditional: s => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"Upon swallowing {GPPHis(i.Unit)} foe whole, <b>{i.Unit.Name}</b> moans in discomfort as {GPPHe(i.Unit)} feel{SIfSingular(i.Unit)} <b>{i.Target.Name}</b> begin {GPPHis(i.Target)} fight against the {GetRaceDescSingl(i.Unit)}'s virgin digestive system! With a shudder, {GPPHe(i.Unit)} hope{SIfSingular(i.Unit)} it won't feel like this every time.",
            actorRace: Race.Deer, priority: 9, conditional: s => FirstTime(s) && InStomach(s)),

            //Bunnies
            new EventString((i) => $"<b>{i.Unit.Name}</b> bounces at <b>{i.Target.Name}</b>, slamming {GPPHim(i.Target)} to the ground and {GetRandomStringFrom("eating", "devouring", "gobbling", "swallowing", "gulping", "slurping", "wolfing")} the {GetRaceDescSingl(i.Target)} down as if {GPPHe(i.Unit)} were a carrot!",
            actorRace: Race.Bunnies, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> barely realises what is going on before <b>{i.Unit.Name}</b> kicks {GPPHis(i.Target)} legs from under {GPPHim(i.Target)}, then proceeds to {GetRandomStringFrom("eat", "devour", "vore", "gobble", "swallow", "gulp", "slurp", "wolf")} the {GetPreyDesc(i.Target)} {GetRaceDescSingl(i.Target)}.",
            actorRace: Race.Bunnies, priority: 9),
            //Bun eats Slime
            new EventString((i) => $"With a squelch <b>{i.Unit.Name}</b> punches {GPPHis(i.Unit)} fist in <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b>, grabbing the {GetRaceDescSingl(i.Target)}'s core and {PreyLocStrings.GetOralVoreVPCT()} it in a hurry!",
            actorRace: Race.Bunnies, targetRace: Race.Slimes, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> bounces on <b>{i.Target.Name}</b>, stuffing the {GetRaceDescSingl(i.Target)} in {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} within moments!",
            actorRace: Race.Bunnies, targetRace: Race.Slimes, priority: 9),
            //Bnnuy Cannibalism
            new EventString((i) => $"Surprised to see a fellow {GetRaceDescSingl(i.Unit)} charging at {GPPHim(i.Target)}, <b>{i.Target.Name}</b> barely manages a token resistance before finding {GPPHimself(i.Target)} in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            actorRace: Race.Bunnies, targetRace: Race.Bunnies, priority: 10),
            new EventString((i) => $"<b>{i.Target.Name}</b> appears stunned as <b>{i.Unit.Name}</b> stuffs {GPPHis(i.Unit)} fellow {GetRaceDescSingl(i.Target)}'s arms in {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} and swallows. <b>{i.Target.Name}</b> only manages a quiet \"Why?\" before {GPPHis(i.Target)} head is engulfed too, swiftly followed by the rest.",
            actorRace: Race.Bunnies, targetRace: Race.Bunnies, priority: 10),
            
            //Cats
            new EventString((i) => $"<b>{i.Unit.Name}</b> stalks <b>{i.Target.Name}</b>, pouncing at the {GetRaceDescSingl(i.Target)} and only closing {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob")} once the {GetPreyDesc(i.Target)} prey has vanished beyond {GPPHim(i.Unit)}!",
            actorRace: Race.Cats, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> doesn't even have time to scream before {GPPHeIs(i.Target)} {GetRandomStringFrom("eaten", "devoured", "vored", "gobbled", "swallowed", "gulped", "slurped", "wolfed")} whole by <b>{i.Unit.Name}</b>.",
            actorRace: Race.Cats, priority: 9),
            //Kitty eats Slime
            new EventString((i) => $"Swatting away a glob of slime, <b>{i.Unit.Name}</b> pulls at <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> exposed core, depositing the {GetPreyDesc(i.Target)} prey's nucleus in {PreyLocStrings.GetOralVoreVPCT()}!",
            actorRace: Race.Cats, targetRace: Race.Slimes, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> pounces on <b>{i.Target.Name}</b>, lapping the {GetRaceDescSingl(i.Target)} in {GPPHis(i.Target)} {GetRandomStringFrom("groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} in no time!",
            actorRace: Race.Cats, targetRace: Race.Slimes, priority: 9),
            //Cat-on-Cat
            new EventString((i) => $"Rarely has there been such hissing and spitting as now with <b>{i.Unit.Name}</b> {PreyLocStrings.GetOralVoreVPCT()} <b>{i.Target.Name}</b>!",
            actorRace: Race.Cats, targetRace: Race.Cats, priority: 10),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> fur stands on end as {GPPHeIs(i.Target)} forced down <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("gullet", "throat", "esophagus")} and forced to curl in {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}! Well, it's warm at least.",
            actorRace: Race.Cats, targetRace: Race.Cats, priority: 10),
            
            //Alligators
            new EventString((i) => $"<b>{i.Unit.Name}</b> lumbers towards <b>{i.Target.Name}</b>, taking no heed of the {GetRaceDescSingl(i.Target)}'s attempt to ward {GPPHim(i.Unit)} off and {PreyLocStrings.GetOralVoreVPCT()} {GPPHis(i.Unit)} {GetPreyDesc(i.Target)} prey with gusto!",
            actorRace: Race.Alligators, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> struggles in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("powerful", "strong", "ironlike", "steel", "unbreakable")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} make no difference, the {GetPredDesc(i.Unit)} {GetRaceDescSingl(i.Unit)} having soon swallowed {GPPHis(i.Unit)} {GetPreyDesc(i.Target)} prey down!",
            actorRace: Race.Alligators, priority: 9),
            //Gator Cannibalism
            new EventString((i) => $"<b>{i.Unit.Name}</b> thinks nothing of making a meal out of <b>{i.Target.Name}</b>, {GPPHe(i.Target)} would have do the same to {GPPHim(i.Unit)}, after all.",
            actorRace: Race.Alligators, targetRace: Race.Alligators, priority: 10),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> ridged tail tickles nicely as it slides down <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            actorRace: Race.Alligators, targetRace: Race.Alligators, priority: 10),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> growling is fully lost beneath <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> rumble of satisfaction as {GPPHe(i.Unit)} stuff{SIfSingular(i.Unit)} the other {GetRaceDescSingl(i.Target)} in {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}!",
            actorRace: Race.Alligators, targetRace: Race.Alligators, priority: 10),
            //Gator eats Slime
            new EventString((i) => $"<b>{i.Unit.Name}</b> charges at <b>{i.Target.Name}</b>, globs of {GetRaceDescSingl(i.Target)} flying everywhere as {GPPHe(i.Unit)} bite{SIfSingular(i.Unit)} down on the slime's core and {GetRandomStringFrom("gobbles", "swallows", "gulps", "slurps", "wolfs")} it down!",
            actorRace: Race.Alligators, targetRace: Race.Slimes, priority: 10),
            new EventString((i) => $"<b>{i.Target.Name}</b> has no time to react as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("jaws fall", "jaws descend", "maw falls", "maw descends", "mouth falls", "mouth descends", "muzzle falls", "muzzle descends", "gob falls", "god descends")} on {GPPHim(i.Target)}, sending the {GetRaceDescSingl(i.Target)} down into the {GPPHe(i.Unit)} gator's {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Alligators, targetRace: Race.Slimes, priority: 10),
            
            //Wyvern
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{i.Target.Name}</b> in {GPPHis(i.Unit)} talons in a passing flight, tossing the {GetRaceDescSingl(i.Target)} into {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "drooling", "steamy", "eager")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} and down into {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Wyvern, priority: 9),
            new EventString((i) => $"Landing briefly, the {GetRandomStringFrom("starving", "hungry", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "greedy", "gluttonous", "covetous")}<b>{i.Unit.Name}</b> snarfs down <b>{i.Target.Name}</b>, the {GetRaceDescSingl(i.Target)} now feeding the {GetPredDesc(i.Unit)} predator.",
            actorRace: Race.Wyvern, priority: 9),
            //Wyvern eats Slime
            new EventString((i) => $"<b>{i.Unit.Name}</b> swoops down, {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob")} scooping up a sizeable portion of <b>{i.Target.Name}</b>, sending the {GetRaceDescSingl(i.Target)}'s core down the {GetRaceDescSingl(i.Unit)}'s throat!",
            actorRace: Race.Wyvern, targetRace: Race.Slimes, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> world goes dark as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> descends on {GPPHim(i.Target)}, {PreyLocStrings.GetOralVoreVPCT()} the slime in one gulp and locking the {GetRaceDescSingl(i.Target)} in {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Wyvern, targetRace: Race.Slimes, priority: 9),
            //Wyvern eats Skyshark
            new EventString((i) => $"The shark known as <b>{i.Target.Name}</b> jerks in surprise as {GPPHe(i.Target)} get{SIfSingular(i.Target)} intercepted mid-flight, swimming down <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("gullet", "throat", "esophagus")} as a large, {GetPreyDesc(i.Target)} bulge.",
            actorRace: Race.Wyvern, targetRace: Race.FeralSharks, priority: 9),
            new EventString((i) => $"Coming to a stop just as {GPPHe(i.Target)} {WasWere(i.Target)} about to dive, <b>{i.Target.Name}</b> finds {GPPHis(i.Target)} tail firmly held by the talons of <b>{i.Unit.Name}</b>, a set of mighty jaws soon sending the {GetRaceDescSingl(i.Target)} down into the {GetRaceDescSingl(i.Unit)}'s {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Wyvern, targetRace: Race.FeralSharks, priority: 9),
            //Wyvern Cannibalism
            new EventString((i) => $"Getting the better of {GPPHis(i.Unit)} rival, <b>{i.Unit.Name}</b> clamps {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} around <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head, soon to stuffing the beaten wyvern down into {GPPHis(i.Unit)} {GetRandomStringFrom("groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Wyvern, targetRace: Race.Wyvern, priority: 9),
            new EventString((i) => $"Getting the better of {GPPHis(i.Unit)} rival, <b>{i.Unit.Name}</b> clamps {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} around <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head, soon to stuffing the beaten wyvern down into {GPPHis(i.Unit)} {GetRandomStringFrom("groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.WyvernMatron, targetRace: Race.Wyvern, priority: 9),
            new EventString((i) => $"Somehow getting the better of {GPPHis(i.Unit)} much stronger rival, <b>{i.Unit.Name}</b> clamps {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} around <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head, soon to stuffing the beaten wyvern down into {GPPHis(i.Unit)} {GetRandomStringFrom("groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Wyvern, targetRace: Race.WyvernMatron, priority: 9),
            //Wyvern slurps snakelikes
            new EventString((i) => $"Picking up a snack on a fly by, <b>{i.Unit.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} slurps up {GPPHis(i.Unit)} {GetRaceDescSingl(i.Target)} victim like a noodle as {GPPHe(i.Unit)} fl{IesIfSingular(i.Unit)} on.",
            actorRace: Race.Wyvern, targetRace: Race.Serpents, priority: 9),
            new EventString((i) => $"Picking up a snack on a fly by, <b>{i.Unit.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} slurps up {GPPHis(i.Unit)} {GetRaceDescSingl(i.Target)} victim like a noodle as {GPPHe(i.Unit)} fl{IesIfSingular(i.Unit)} on.",
            actorRace: Race.Wyvern, targetRace: Race.Lamia, priority: 9),
            new EventString((i) => $"Picking up a snack on a fly by, <b>{i.Unit.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} slurps up {GPPHis(i.Unit)} {GetRaceDescSingl(i.Target)} victim like a noodle as {GPPHe(i.Unit)} fl{IesIfSingular(i.Unit)} on.",
            actorRace: Race.Wyvern, targetRace: Race.Vipers, priority: 9),
            new EventString((i) => $"Picking up a snack on a fly by, <b>{i.Unit.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} slurps up {GPPHis(i.Unit)} {GetRaceDescSingl(i.Target)} victim like a noodle as {GPPHe(i.Unit)} fl{IesIfSingular(i.Unit)} on.",
            actorRace: Race.Wyvern, targetRace: Race.Merfolk, priority: 9),
            new EventString((i) => $"Picking up a snack on a fly by, <b>{i.Unit.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} slurps up {GPPHis(i.Unit)} {GetRaceDescSingl(i.Target)} victim like a noodle as {GPPHe(i.Unit)} fl{IesIfSingular(i.Unit)} on.",
            actorRace: Race.Wyvern, targetRace: Race.EasternDragon, priority: 9),
            //Wyvern somehow eats Various Dragons
            new EventString((i) => $"<b>{i.Unit.Name}</b> opens extra wide before swooping down, scooping up <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetPreyDesc(i.Target)} body into {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} and banishing {GPPHim(i.Target)} into a huge, scaly {i.preyLocation.ToSyn()} bulge.",
            actorRace: Race.Wyvern, targetRace: Race.Selicia, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lands before <b>{i.Target.Name}</b>, wrapping {GPPHim(i.Target)} in {GPPHis(i.Unit)} wings and {PreyLocStrings.GetOralVoreVPCT()} {GPPHim(i.Target)} in several heavy swallows, finally being dumped into the wyvern's {GetRandomStringFrom("groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Wyvern, targetRace: Race.Selicia, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> opens extra wide before swooping down, scooping up <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetPreyDesc(i.Target)} body into {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} and banishing {GPPHim(i.Target)} into a huge, scaly {i.preyLocation.ToSyn()} bulge.",
            actorRace: Race.Wyvern, targetRace: Race.Dragon, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lands before <b>{i.Target.Name}</b>, wrapping {GPPHim(i.Target)} in {GPPHis(i.Unit)} wings and {PreyLocStrings.GetOralVoreVPCT()} {GPPHim(i.Target)} in several heavy swallows, finally being dumped into the wyvern's {GetRandomStringFrom("groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Wyvern, targetRace: Race.Dragon, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> opens extra wide before swooping down, scooping up <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetPreyDesc(i.Target)} body into {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} and banishing {GPPHim(i.Target)} into a huge, scaly {i.preyLocation.ToSyn()} bulge.",
            actorRace: Race.Wyvern, targetRace: Race.Scorch, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lands before <b>{i.Target.Name}</b>, wrapping {GPPHim(i.Target)} in {GPPHis(i.Unit)} wings and {PreyLocStrings.GetOralVoreVPCT()} {GPPHim(i.Target)} in several heavy swallows, finally being dumped into the wyvern's {GetRandomStringFrom("groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Wyvern, targetRace: Race.Scorch, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> opens extra wide before swooping down, scooping up <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetPreyDesc(i.Target)} body into {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} and banishing {GPPHim(i.Target)} into a huge, scaly {i.preyLocation.ToSyn()} bulge.",
            actorRace: Race.Wyvern, targetRace: Race.Zera, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lands before <b>{i.Target.Name}</b>, wrapping {GPPHim(i.Target)} in {GPPHis(i.Unit)} wings and {PreyLocStrings.GetOralVoreVPCT()} {GPPHim(i.Target)} in several heavy swallows, finally being dumped into the wyvern's {GetRandomStringFrom("groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Wyvern, targetRace: Race.Zera, priority: 9),
            
            //Crux
            new EventString((i) => $"Giggling quietly to {GPPHimself(i.Unit)}, <b>{i.Unit.Name}</b> runs a finger under <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> chin, before giving a whack at the back of the {GetRaceDescSingl(i.Target)}'s head to send the {GetPreyDesc(i.Target)} morsel on {GPPHis(i.Target)} way down the wildly smiling Crux's {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "greedy", "steamy", "eager", "hungry")} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            actorRace: Race.Crux, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> swiftly {GetRandomStringFrom("eats up", "devours", "vores", "gobbles up", "swallows down", "gulps down", "slurps down", "wolfs down")} <b>{i.Target.Name}</b>, giving a hefty burp before cheerily saying: \"Thank you for your contribution to science!\"",
            actorRace: Race.Crux, priority: 9, conditional: CanBurp),
            //Crux Cannibalism
            new EventString((i) => $"\"It'll be better use of your flesh to have it be part of me\", <b>{i.Unit.Name}</b> says, guiding <b>{i.Target.Name}</b> gently but firmly into {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob")}.",
            actorRace: Race.Crux, targetRace: Race.Crux, priority: 10),
            new EventString((i) => $"Stuffing <b>{i.Target.Name}</b> {GetRandomStringFrom("ass", "buns", "butt", "cheeks", "rear", "booty")}-first down {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "greedy", "steamy", "eager", "hungry")} {GetRandomStringFrom("gullet", "throat", "esophagus")}, <b>{i.Unit.Name}</b> smiles as {GPPHe(i.Unit)} look{SIfSingular(i.Unit)} at the curly ears of {GPPHis(i.Unit)} fellow crux, the last thing visible of {GPPHim(i.Target)} before {GPPHe(i.Target)} too vanish{EsIfSingular(i.Target)} from sight.",
            actorRace: Race.Crux, targetRace: Race.Crux, priority: 10),
            //Aabayx exclusive creds to Cartography!
            new EventString((i) => $"As <b>{i.Unit.Name}</b> approaches <b>{i.Target.Name}</b>, the {GetRaceDescSingl(i.Target)}, seeing no mouth or other openings, thinks {GPPHimself(i.Target)} safe. Suddenly, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> head opens up, and as <b>{i.Target.Name}</b> is rapidly swallowed down, {GPPHe(i.Target)} take{SIfSingular(i.Unit)} a moment to think on what went wrong.",
            actorRace: Race.Aabayx, priority: 9),
            new EventString((i) => $"As <b>{i.Target.Name}</b> is swallowed down by a fellow Aabayx, all present are forced to marvel at the geometric impossibility on display before them, as <b>{i.Unit.Name}</b> somehow fits <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> icosahedral head through {GPPHis(i.Unit)} own icosahedral head.",
            actorRace: Race.Aabayx, targetRace: Race.Aabayx, priority: 10),
            //Panthers
            new EventString((i) => $"<b>{i.Unit.Name}</b> parts {GPPHis(i.Unit)} lips, and shoves <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head into {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} and swallows. {GPPHe(i.Unit)} enjoy{SIfSingular(i.Unit)} the taste of hot blood splashing down {GPPHis(i.Unit)} gullet as one of {GPPHis(i.Unit)} sharp fangs scrapes <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> skin.",
            actorRace: Race.Panthers, priority: 9, conditional: s => HardVore(s) && InStomach(s)),
            new EventString((i) => $"In a stunning display of {GetRandomStringFrom("martial prowess", "strength", "physique", "skill", "athleticism", "fitness")} and {GetRandomStringFrom("hunger", "voracity", "predatory nature", "gluttony", "rapacity", "avarice")} <b>{i.Unit.Name}</b> overpowers <b>{i.Target.Name}</b> and sends {GPPHim(i.Target)} down {GPPHis(i.Unit)} sloshing {PreyLocStrings.ToSyn(i.preyLocation)}.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> begs for mercy, but <b>{i.Unit.Name}</b> feels no pity, only hunger, and before long <b>{i.Target.Name}</b> is sliding down the panther's {GetRandomStringFrom("gullet", "throat", "esophagus")} to form a tight bulge on {GPPHis(i.Unit)} frame.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"As <b>{i.Target.Name}</b> slides into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach, the victor teases {GPPHim(i.Target)}, patting {GPPHis(i.Unit)} swollen {PreyLocStrings.ToSyn(PreyLocation.stomach)}: \"Go ahead and struggle all you like. My belly is stronger than you ever were!\"",
            actorRace: Race.Panthers, priority: 9),
             new EventString((i) => $"<b>{i.Unit.Name}</b> honors {GPPHis(i.Unit)} ancestors in the only proper way - by stuffing {GPPHis(i.Unit)} foe down into {GPPHis(i.Unit)} waiting {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> thanks the spirits for this wonderful meal - <b>{i.Target.Name}</b> was delicious and filling.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> licks {GPPHis(i.Unit)} lips and pats {GPPHis(i.Unit)} swelling {PreyLocStrings.ToSyn(PreyLocation.stomach)} as <b>{i.Target.Name}</b> slides in.",
            actorRace: Race.Panthers, priority: 9),

            //Orcas
            new EventString((i) => $"<b>{i.Unit.Name}</b> dives from above, the {GetRaceDescSingl(i.Unit)} engulfing <b>{i.Target.Name}</b> in {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle")} and {GetRandomStringFrom("eating them", "devouring them", "voring them", "gobbling them down", "swallowing them", "gulping them down", "slurping them down", "wolfing them down", "consuming them")} in one smooth motion!",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> loses track of the airborne <b>{i.Unit.Name}</b>, but suddenly finds teeth wrapping around {GPPHis(i.Target)} view before being plunged into {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "dripping", "sopping", "steamy")} darkness!",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> blubbery {PreyLocStrings.ToSyn(PreyLocation.stomach)} bloats to a grander size as <b>{i.Target.Name}</b> slips into {GPPHis(i.Unit)} first stomach chamber...",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} out of {GPPHis(i.Target)} depth, as <b>{i.Unit.Name}</b> sucks {GPPHim(i.Target)} down into their own dark innards.",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} out of {GPPHis(i.Target)} depth, but very much <i>into</i> <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> depths!",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> eagerly crams <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> huge body into {GPPHis(i.Unit)} jaws, and soon enough, {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            actorRace: Race.FeralOrcas, priority: 9, conditional: (s) => SizeDiff(s, 0.75f)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> relishes getting to feast on such a large specimen.  <b>{i.Target.Name}</b> is much less excited!",
            actorRace: Race.FeralOrcas, priority: 9, conditional: (s) => SizeDiff(s, 0.75f)),

            new EventString((i) => $"<b>{i.Target.Name}</b> massive tail fin flops about all the way down as <b>{i.Unit.Name}</b> manages to ingest {GPPHim(i.Target)}!",
            targetRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> massive whale of a frame proves to be no match for <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> immense hunger, the {GetRaceDescSingl(i.Unit)} ballooning out {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            targetRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> sluggishly slithers down <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tight gullet... before finally plopping like a rock into {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            targetRace: Race.FeralOrcas, priority: 9, conditional: (s) => SizeDiff(s, 0.75f)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> greedily slurps up <b>{i.Target.Name}</b>, seeing the rival pack member as no more than food and packing them into {GPPHis(i.Unit)} blubbery {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            targetRace: Race.FeralOrcas, actorRace: Race.FeralOrcas, priority: 9),

            //Orcas Vs. Sharks
            new EventString((i) => $"<b>{i.Unit.Name}</b> always did have a taste for shark, an unfortunate fact that <b>{i.Target.Name}</b> quickly discovers for {GPPHimself(i.Target)}.",
            actorRace: Race.FeralOrcas, targetRace: Race.FeralSharks, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> swiftly snaps up <b>{i.Target.Name}</b> the {GetRaceDescSingl(i.Unit)}, showing {GPPHim(i.Target)} who is the proper apex predator of the seas!",
            actorRace: Race.FeralOrcas, targetRace: Race.FeralSharks, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> always did have a taste for shark, an unfortunate fact that <b>{i.Target.Name}</b> quickly discovers for {GPPHimself(i.Target)}.",
            actorRace: Race.FeralOrcas, targetRace: Race.Sharks, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> swiftly snaps up <b>{i.Target.Name}</b> the {GetRaceDescSingl(i.Unit)}, showing {GPPHim(i.Target)} who is the proper apex predator of the seas!",
            actorRace: Race.FeralOrcas, targetRace: Race.Sharks, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> always did have a taste for shark, an unfortunate fact that <b>{i.Target.Name}</b> quickly discovers for {GPPHimself(i.Target)}.",
            actorRace: Race.FeralOrcas, targetRace: Race.Zoey, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> swiftly snaps up <b>{i.Target.Name}</b> the {GetRaceDescSingl(i.Unit)}, showing {GPPHim(i.Target)} who is the proper apex predator of the seas!",
            actorRace: Race.FeralOrcas, targetRace: Race.Zoey, priority: 9),

            new EventString((i) => $"<b>{i.Unit.Name}</b> takes wicked pleasure in {GetRandomStringFrom("eating", "devouring", "voring", "gobbling up", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming", "ingesting", "sucking down")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> immense body, showing that the natural order holds little meaning in this land!",
            targetRace: Race.FeralOrcas, actorRace: Race.FeralSharks, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> takes wicked pleasure in {GetRandomStringFrom("eating", "devouring", "voring", "gobbling up", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming", "ingesting", "sucking down")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> immense body, showing that the natural order holds little meaning in this land!",
            targetRace: Race.FeralOrcas, actorRace: Race.Sharks, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> takes wicked pleasure in {GetRandomStringFrom("eating", "devouring", "voring", "gobbling up", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming", "ingesting", "sucking down")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> immense body, showing that the natural order holds little meaning in this land!",
            targetRace: Race.FeralOrcas, actorRace: Race.Zoey, priority: 9),
            //Orcas Vs. Dragons
            new EventString((i) => $"<b>{i.Unit.Name}</b> savors the opportunity for such an immense meal, feeling the mighty <b>{i.Target.Name}</b> stretch and bloat out their first belly chamber!",
            actorRace: Race.FeralOrcas, targetRace: Race.Dragon, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> always wanted to eat a dragon, and today {GPPHe(i.Unit)} succeeded! The once mighty <b>{i.Target.Name}</b> stretches and bloats out their first belly chamber!",
            actorRace: Race.FeralOrcas, targetRace: Race.Dragon, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> savors the opportunity for such an immense meal, feeling the mighty <b>{i.Target.Name}</b> stretch and bloat out their first belly chamber!",
            actorRace: Race.FeralOrcas, targetRace: Race.EasternDragon, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> always wanted to eat a dragon, and today {GPPHe(i.Unit)} succeeded! The once mighty <b>{i.Target.Name}</b> stretches and bloats out their first belly chamber!",
            actorRace: Race.FeralOrcas, targetRace: Race.EasternDragon, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> savors the opportunity for such an immense meal, feeling the mighty <b>{i.Target.Name}</b> stretch and bloat out their first belly chamber!",
            actorRace: Race.FeralOrcas, targetRace: Race.Selicia, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> always wanted to eat a dragon, and today {GPPHe(i.Unit)} succeeded! The once mighty <b>{i.Target.Name}</b> stretches and bloats out their first belly chamber!",
            actorRace: Race.FeralOrcas, targetRace: Race.Selicia, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> savors the opportunity for such an immense meal, feeling the mighty <b>{i.Target.Name}</b> stretch and bloat out their first belly chamber!",
            actorRace: Race.FeralOrcas, targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> always wanted to eat a dragon, and today {GPPHe(i.Unit)} succeeded! The once mighty <b>{i.Target.Name}</b> stretches and bloats out their first belly chamber!",
            actorRace: Race.FeralOrcas, targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> savors the opportunity for such an immense meal, feeling the mighty <b>{i.Target.Name}</b> stretch and bloat out their first belly chamber!",
            actorRace: Race.FeralOrcas, targetRace: Race.Cierihaka, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> always wanted to eat a dragon, and today {GPPHe(i.Unit)} succeeded! The once mighty <b>{i.Target.Name}</b> stretches and bloats out their first belly chamber!",
            actorRace: Race.FeralOrcas, targetRace: Race.Cierihaka, priority: 9),

            new EventString((i) => $"<b>{i.Unit.Name}</b> guides the bulge of <b>{i.Target.Name}</b> down {GPPHis(i.Unit)} throat with a paw... finally something more substantial for the {GetRaceDescSingl(i.Unit)} to {PreyLocStrings.DigestVerbSyn()}...",
            targetRace: Race.FeralOrcas, actorRace: Race.Dragon, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> guides the bulge of <b>{i.Target.Name}</b> down {GPPHis(i.Unit)} throat with a paw... finally something more substantial for the {GetRaceDescSingl(i.Unit)} to {PreyLocStrings.DigestVerbSyn()}...",
            targetRace: Race.FeralOrcas, actorRace: Race.EasternDragon, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> guides the bulge of <b>{i.Target.Name}</b> down {GPPHis(i.Unit)} throat with a paw... finally something more substantial for the {GetRaceDescSingl(i.Unit)} to {PreyLocStrings.DigestVerbSyn()}...",
            targetRace: Race.FeralOrcas, actorRace: Race.Selicia, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> guides the bulge of <b>{i.Target.Name}</b> down {GPPHis(i.Unit)} throat with a paw... finally something more substantial for the khatunlao to {PreyLocStrings.DigestVerbSyn()}...",
            targetRace: Race.FeralOrcas, actorRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> guides the bulge of <b>{i.Target.Name}</b> down {GPPHis(i.Unit)} throat with a paw... finally something more substantial for the steppe dragon to {PreyLocStrings.DigestVerbSyn()}...",
            targetRace: Race.FeralOrcas, actorRace: Race.Cierihaka, priority: 9),
            
            
            //Cursed Prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> is taken by surprise as <b>{i.Target.Name}</b> throws {GPPHis(i.Target)} weapon away and forces {GPPHis(i.Target)} way down {GPPHis(i.Target)} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            priority: 9, conditional: s => Cursed(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> pounces onto the nearest predator and literally jumps down {GPPHis(i.Unit)} gullet. The experience leaves <b>{i.Unit.Name}</b> with confusion, a coughing fit, and a happily wobbling {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: s => Cursed(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> has to do little more than open {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob")} as <b>{i.Target.Name}</b> eagerly slips down {GPPHis(i.Unit)} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            priority: 9, conditional: s => Cursed(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> is overcome with a sudden urge to find a tight, warm space. <b>{i.Unit.Name}</b> kindly offers to let {GPPHim(i.Target)} use {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)}. The bewitched idiot happily accepts!",
            priority: 9, conditional: Cursed),
            new EventString((i) => $"<b>{i.Target.Name}</b> shakes {GPPHis(i.Target)} head as a strange spell is cast on {GPPHim(i.Target)}. <b>{i.Unit.Name}</b> uses this opportunity to stuff the cursed warrior down into {GPPHis(i.Unit)} waiting {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: s => Cursed(s) && InStomach(s)),
            
            //Cierihaka
            new EventString((i) => $"Grasping her prey gently in her paws, <b>{i.Unit.Name}</b> sends <b>{i.Target.Name}</b> on a supposedly one way {GetRandomStringFrom("trip", "journey", "vacation")} down to her {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled", "digestive", "groaning", "gurgling", "churning", "melty", "gastric", "acidic", "caustic", "deadly", "corrosive", "deadly", "predatory", "flesh-melting")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Cierihaka, priority: 11),
            new EventString((i) => $"Playfully falling upon her hopelessly outmatched food, <b>{i.Unit.Name}</b> shoves <b>{i.Target.Name}</b> into her {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")}, <b>{i.Target.Name}</b> protesting on {GPPHis(i.Target)} way down, only to be muted by the {GetRandomStringFrom("digestive", "gurgling", "churning", "growling", "groaning", "rumbling", "hungering", "ravenous", "demanding", "gluttonous")} chorus of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "gastric", "acidic", "caustic", "deadly", "corrosive", "deadly", "predatory", "flesh-melting")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Cierihaka, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> bolts forth with stunning speed, flicking <b>{i.Target.Name}</b> up into the air before expertly catching {GPPHim(i.Target)} in her waiting {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}, letting gravity handle the rest.",
            actorRace: Race.Cierihaka, priority: 11),
            new EventString((i) => $"Giving a mocking laugh, <b>{i.Unit.Name}</b> steps forth, startling <b>{i.Target.Name}</b> before cruelly {GetRandomStringFrom("gobbling", "swallowing", "eating")} {GPPHim(i.Target)} {GetRandomStringFrom("up", "down")}. After getting {GPPHis(i.Target)} flavour, of course.",
            actorRace: Race.Cierihaka, priority: 11),
            new EventString((i) => $"Having the upper hand, <b>{i.Unit.Name}</b> seizes the opportunity and descends upon <b>{i.Target.Name}</b>, who is soon but a rounded bulge in the chunky dragoness's {GetRandomStringFrom("gullet", "throat", "esophagus")}, and then {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "gastric", "acidic", "caustic", "deadly", "corrosive", "deadly", "predatory", "flesh-melting")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Cierihaka, priority: 11),

            //Collectors
            new EventString((i) => $"Before <b>{i.Target.Name}</b> can even react, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tubular maw pierces {GPPHis(i.Unit)} surface, the {GetRaceDescSingl(i.Unit)} swiftly sucking most of the {GetRaceDescSingl(i.Target)} in the monster's {PreyLocStrings.ToSyn(PreyLocation.stomach)}, leaving only a small puddle behind.",
            actorRace: Race.Collectors, targetRace: Race.Slimes, priority: 10),
            new EventString((i) => $"As a long, clawed leg lands on <b>{i.Target.Name}</b> and slams {GPPHim(i.Target)} against the ground, the {GetRaceDescSingl(i.Target)} can only watch as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> head turns towards {GPPHim(i.Target)}, the {GetRaceDescSingl(i.Unit)}'s beak opening and the tooth lined tube within extending towards {GPPHim(i.Target)}.",
            actorRace: Race.Collectors, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> leans over <b>{i.Target.Name}</b>, the {GetRaceDescSingl(i.Unit)}'s feeding appendage clasping on the {GetRaceDescSingl(i.Target)}'s head, sucking in the {GetPreyDesc(i.Target)} prey.",
            actorRace: Race.Collectors, priority: 10),
            
            //Cake
            new EventString((i) => $"<b>{i.Target.Name}</b> saw a cake. The {GetRaceDescSingl(i.Unit)} ate the {GetRaceDescSingl(i.Target)}.",
            actorRace: Race.Cake, priority: 10),
            new EventString((i) => $"<b>{i.Target.Name}</b> had heard that cakes were delicious. Unfortunately for {GPPHim(i.Target)}, <b>{i.Unit.Name}</b> thought the same about {GetRaceDescSingl(i.Target)}s.",
            actorRace: Race.Cake, priority: 10),
            new EventString((i) => $"Never had a {GetRaceDescSingl(i.Unit)} moved as fast as when <b>{i.Unit.Name}</b> charged to engulf <b>{i.Target.Name}</b>, the {GetRaceDescSingl(i.Target)} finding out that this cake was very moist indeed.",
            actorRace: Race.Cake, priority: 10),

            //Selicia
            new EventString((i) => $"Looming over her small prey, {i.Unit.Name} leans forward and engulfs {i.Target.Name} with her {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}, {GetRandomStringFrom("swallowing down", "gulding down", "eating up")} the {GetPreyDesc(i.Target)} {GetRaceDescSingl(i.Target)}.",
            actorRace: Race.Selicia, priority: 10, conditional: (s) => SizeDiff(s, 4)),
            new EventString((i) => $"Pouncing on {i.Target.Name}, {i.Unit.Name} licks her lips at the prospect of getting a good tasty meal out of the {GetRaceDescSingl(i.Target)}, sending the {GetPreyDesc(i.Target)} down in her {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} as a great bulge.",
            actorRace: Race.Selicia, priority: 10),
            new EventString((i) => {
                if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.PreyCount > 1)
                    return $"Yawning wide, <b>{i.Unit.Name}</b> sends <b>{i.Target.Name}</b> down her {GetRandomStringFrom("gullet", "throat", "esophagus")}, the {GetRaceDescSingl(i.Target)} joining others already filling her {PreyLocStrings.ToSyn(PreyLocation.stomach)}.";
                else if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.AlivePrey > 1)
                    return $"Yawning wide, <b>{i.Unit.Name}</b> lets <b>{i.Target.Name}</b> hear the noise made by her {PreyLocStrings.ToSyn(PreyLocation.stomach)}'s current occupant, then sends the {GetRaceDescSingl(i.Target)} down to meet the source.";
                else if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.PreyCount == 0)
                    return $"Yawning wide, <b>{i.Unit.Name}</b> lets <b>{i.Target.Name}</b> hear the noise made by her empty stomach, then gets to filling it with the {GetRaceDescSingl(i.Target)}.";
                else return $"Yawning wide, <b>{i.Unit.Name}</b> lets <b>{i.Target.Name}</b> hear the noises of digestion coming from her {PreyLocStrings.ToSyn(PreyLocation.stomach)}, then sends the {GetRaceDescSingl(i.Target)} in for a closer look.";
                },
            actorRace: Race.Selicia, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> falls on <b>{i.Target.Name}</b>, {GetRandomStringFrom("gulping down", "devouring", "gobbling up")} her {GetPreyDesc(i.Target)} prey in seconds, the dragon's tail finding its way into her {GetRandomStringFrom("messy", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "creamy", "hot", "humid", "sultry", "sweltering", "snug", "cavernous", "expansive", "gaping", "yawning", "horny", "lecherous", "lustful", "steamy", "eager", "greedy", "hungry", "meat-hungry")} {GetRandomStringFrom("cooch", "cunt", "muff", "pussy", "slit", "snatch", "vagina", "vulva", "frontdoor", "honeypot", "love tunnel", "twat", "kitty", "clam", "love box", "vadge", "vagine", "downstairs", "sex", "flower", "minge", "cooter", "yoni")} as the {GetRaceDescSingl(i.Target)} bulges out her {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Selicia, priority: 10, conditional: (i) => Lewd(i) && i.Target.HasBreasts && (i.Target.HasDick == false || Config.HermsCanUB)) ,
            //Taurus
            new EventString((i) => $"\"You better get {GetRandomStringFrom("comfy", "comfortable", "cozy", "settled in")}, I have four stomachs.\" <b>{i.Unit.Name}</b> teases <b>{i.Target.Name}</b> after {GetRandomStringFrom("swallowing", "gulping", "slurping", "squeezing")} the {GetRaceDescSingl(i.Target)} down.",
            actorRace: Race.Taurus, priority: 9, conditional: InStomach),

            new EventString((i) => $"<b>{i.Unit.Name}</b> reaches for <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> core, {GetRandomStringFrom("eating", "devouring", "gobbling", "swallowing", "gulping", "slurping", "wolfing")} it along with the surrounding slime!",
            targetRace: Race.Slimes, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> viscous form and shoves {GPPHim(i.Target)} into {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}!",
            targetRace: Race.Slimes, priority: 10),
            
            new EventString((i) => $"<b>{i.Unit.Name}</b> slurps up <b>{i.Target.Name}</b> like a noodle.",
            targetRace: Race.EasternDragon, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slurps up <b>{i.Target.Name}</b> and sighs after the serpentine dragon curls up in {GPPHis(i.Unit)} {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            targetRace: Race.EasternDragon, priority: 9),

            new EventString((i) => $"<b>{i.Target.Name}</b> lets out a distressed yelp as {GPPHeIs(i.Target)} shoved headfirst into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("hungry", "hungering", "ravenous", "voracious", "gluttonous", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "demanding")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}!",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{i.Target.Name}</b> and hungrily {GetRandomStringFrom("eats", "devours", "vores", "gobbles", "swallows", "gulps", "slurps", "wolfs")} {GPPHim(i.Target)} whole!",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> casts aside {GPPHis(i.Unit)} weapon and grabs onto <b>{i.Target.Name}</b>, stuffing {GPPHim(i.Target)} into {GPPHis(i.Unit)} {GetRandomStringFrom("hungry", "hungering", "ravenous", "voracious", "gluttonous", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "demanding", "hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("gullet", "throat", "esophagus", "jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}!",
            priority: 8, conditional: (s) => s.Unit.HasWeapon && s.Unit.FixedGear == false && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> swiftly swallows <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head before lifting {GPPHim(i.Target)} and letting the gravity do the rest!",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> shoves <b>{i.Target.Name}</b> to the ground and pushes {GPPHim(i.Target)} legfirst into {GPPHis(i.Unit)} {GetRandomStringFrom("rapacious", "avaricious", "greedy", "gluttonous", "covetous", "demanding", "eager", "insatiate")} {GetRandomStringFrom("gullet", "throat", "esophagus", "jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}!",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{i.Target.Name}</b>, shoving the {GetRaceDescSingl(i.Target)} down {GPPHis(i.Target)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("gullet", "throat", "esophagus")}!",
            priority: 8),
            new EventString((i) => {
                if (State.Rand.Next(2) == 1)
                    return $"<b>{i.Target.Name}</b> struggles as <b>{i.Unit.Name}</b> begins {GetRandomStringFrom("eating", "devouring", "voring", "gobbling", "swallowing", "gulping", "slurping")} {GPPHim(i.Target)}, the {GetPredDesc(i.Unit)} predator finishing with a loud and wet <i>{GetRandomStringFrom("*Burp!*", "*Burrp!*", "*Buurp*", "*Buoorp!*", "*Urp*", "*Urrp!*", "*Uorrp!*", "*UOOORRP!*")}</i>";
                return $"<b>{i.Target.Name}</b> struggles as <b>{i.Unit.Name}</b> begins {GetRandomStringFrom("swallowing", "gulping", "slurping", "wolfing", "gobbling")} {GPPHim(i.Target)} down, the {GetPredDesc(i.Unit)} predator finishing with a loud and wet <i>{GetRandomStringFrom("*Burp!*", "*Burrp!*", "*Buurp*", "*Buoorp!*", "*Urp*", "*Urrp!*", "*Uorrp!*", "*UOOORRP!*")}</i>";
            },
            priority: 8, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Target.Name}</b> cries out as {GPPHeIs(i.Target)} swallowed, clawing desperately for freedom all the way down <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "powerful", "strong", "greedy", "hungry", "ravenous")} {GetRandomStringFrom("gullet", "throat", "esophagus")}!",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> overpowers <b>{i.Target.Name}</b> and swiftly shoves {GPPHim(i.Target)} into {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {i.preyLocation.ToSyn()}!",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {PreyLocStrings.GetOralVoreVPT()} <b>{i.Target.Name}</b>, squeezing {GPPHim(i.Target)} down into {GPPHis(i.Unit)} {GetRandomStringFrom("groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "gluttonous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            priority: 8),

            new EventString((i) => $"<b>{i.Unit.Name}</b> begins to gag as {GPPHis(i.Unit)} prey’s hips get caught in {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "greedy", "wet", "slimy", "dripping", "sopping", "needy", "steamy", "eager")} {GetRandomStringFrom("gullet", "throat", "esophagus")} but with a final gulp sends <b>{i.Target.Name}</b> down into {GPPHis(i.Unit)} {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> flirts with <b>{i.Target.Name}</b> who lowers {GPPHis(i.Target)} guard. By the time {GPPHe(i.Target)} think{SIfSingular(i.Target)} of a response, <b>{i.Unit.Name}</b> kisses {GPPHim(i.Target)} which quickly turns into a sneaky swallow, sending the betrayed meal into digestive juices. {GetRandomStringFrom("\"Ooops~\"", "\"Hehe, what a loser!\"", "\"Sorry, you tasted way too good.\"", "\"Ha! Like I'd really kiss <i>you</i>!\"", "\"SO gullible.  Enjoy digesting, nerd!\"", "\"I'd spit you out again but... Nah.\"", "\"Umm... I don't know how to spit you up again... Sorry!\"")}",
            priority: 8, conditional: Lewd),
            new EventString((i) => $"<b>{i.Target.Name}</b> begs for mercy as <b>{i.Unit.Name}</b> greedily shoves {GPPHim(i.Target)} into {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("gullet", "throat", "esophagus", "jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> panics and tries to run but can’t escape <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("fierce", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous")} hunger and soon finds {GPPHeIsAbbr(i.Target)} sliding down {GPPHis(i.Unit)} {GetRandomStringFrom("moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling")} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            priority: 8),
            new EventString((i) => $"\"You're mine!\", says <b>{i.Unit.Name}</b>, before swiftly sending <b>{i.Target.Name}</b> down {GPPHis(i.Unit)} {GetRandomStringFrom("moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling")} {GetRandomStringFrom("gullet", "throat", "esophagus")} with immense indulgence. \"Now start squirming!  You'll be nothing but {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRandomStringFrom("shit", "scat", "crap", "manure", "turds", "slop")} soon anyway.\"",
            priority: 8, conditional: s => Scat(s) && Lewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Ahh~ All tucked away.\", <b>{i.Unit.Name}</b> sighs in content, after having swallowed a defeated <b>{i.Target.Name}</b>.  The stuffed {InfoPanel.RaceSingular(i.Unit)} rubbed the squirming bulges of {GPPHis(i.Unit)} belly. \"Hope you're ready to get turned into {GetRandomStringFrom("shit", "scat", "crap", "manure", "turds", "slop")}. I'm gonna <i>love</i> {GetRandomStringFrom("taking that shit", "taking that dump", "taking that crap", "disposing of your remains", "dumping you", "crapping you out", "shitting you out", "squeezing you out")} later~\"",
            priority: 8, conditional: s => Scat(s) && Lewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> fellow warriors cheer {GPPHim(i.Unit)} on as {GPPHe(i.Unit)} {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} forces <b>{i.Target.Name}</b> down into {GPPHis(i.Unit)} {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> comrades look away as {GPPHeIs(i.Unit)} sucked down into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "gluttonous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8),
            

            //Virgin Preds
            new EventString((i) => $"<b>{i.Unit.Name}</b> closes {GPPHis(i.Unit)} eyes and charges recklessly with a scream-- but foolishly trips.  When {GPPHe(i.Unit)} open{SIfSingular(i.Unit)} {GPPHis(i.Unit)} eyes {GPPHe(i.Unit)} find{SIfSingular(i.Unit)} <b>{i.Target.Name}</b> angrily struggling from inside {GPPHis(i.Unit)} {GetRandomStringFrom("groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "gluttonous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"Despite {GPPHis(i.Unit)} inexperience, <b>{i.Unit.Name}</b> manages to wrap {GPPHis(i.Unit)} {GetRandomStringFrom("lips", "jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} around <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head, and with a difficult gulp, {GetRandomStringFrom("eats", "devours", "vores", "gobbles", "swallows", "gulps", "slurps")} {GPPHis(i.Unit)} first prey whole.",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> swallows <b>{i.Target.Name}</b> but begins gagging as {GPPHe(i.Unit)} {HasHave(i.Unit)} to press down on the top of {GPPHis(i.Unit)} stretched {PreyLocStrings.ToSyn(PreyLocation.stomach)} to keep {GPPHis(i.Unit)} first prey in.",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is surprised by how difficult it is to {GetRandomStringFrom("eat", "devour", "vore", "gobble up", "swallow", "gulp down", "slurp down", "wolf down")} <b>{i.Target.Name}</b>. {Capitalize(GPPHe(i.Unit))} thought it would be much easier.  But finally, with a last desperate swallow, {GPPHe(i.Target)} is forced down successfully.",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"As the fight turns in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> favor {GPPHe(i.Unit)} commit{SIfSingular(i.Unit)} to the move taught to {GPPHim(i.Unit)}, lifting <b>{i.Target.Name}</b> into the air while wrapping {GPPHis(i.Unit)} {GetRandomStringFrom("lips", "jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} around {GPPHis(i.Target)} head. Sure enough, gravity takes over and sends the prey down {GPPHis(i.Unit)} {GetRandomStringFrom("gullet", "throat", "esophagus")}. However, the weight hitting the bottom of {GPPHis(i.Unit)} sagging gut tips {GPPHim(i.Unit)} over, leaning the new pred across {GPPHis(i.Unit)} {GetRandomStringFrom("groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "gluttonous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"Getting <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("gullet", "throat", "jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} was easy. Swallowing {GPPHim(i.Target)} was proving much more difficult as <b>{i.Unit.Name}</b> begins to choke on the huge meal. Desperate to get {GPPHim(i.Target)} down, the virgin predator begins to use {GPPHis(i.Unit)} arms to guide {GPPHis(i.Unit)} wiggling meal down. Thankfully the effort pays off, resulting in a massive {PreyLocStrings.ToSyn(PreyLocation.stomach)} and a much exerted pred.",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"Everything happens so fast that <b>{i.Unit.Name}</b> never even got a chance to taste {GPPHis(i.Unit)} meal before it entered {GPPHis(i.Unit)} {GetRandomStringFrom("groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "gluttonous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The new pred laments the fact that {GPPHe(i.Unit)} doesn’t even remember the taste of {GPPHis(i.Unit)} first prey. <b>{i.Target.Name}</b>, for {GPPHis(i.Target)} part is also angry at the situation.",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out a muffled groan of pain as {GPPHis(i.Unit)} {GetRandomStringFrom("belly stretches", "stomach stretches", "gut stretches", "guts stretch", "midsection stretches", "tummy stretches", "depths stretch", "innards stretch", "insides stretch")} to accommodate {GPPHis(i.Unit)} first living meal. The virgin predator wraps {GPPHis(i.Unit)} arms around {GPPHis(i.Unit)} growing {PreyLocStrings.ToSyn(PreyLocation.stomach)}, trying to keep {GPPHimself(i.Unit)} from bursting at the seams. Thankfully the expansion stops as <b>{i.Target.Name}</b> balls up in the pit of {GPPHis(i.Unit)} {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, leaving a gently jiggling bulge and proud first timer.",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s)),

            //Betrayal
            new EventString((i) => $"<b>{i.Target.Name}</b> is shocked when <b>{i.Unit.Name}</b> suddenly grabs and sends {GPPHim(i.Target)} {GetRandomStringFrom("sliding", "slipping", "squeezing", "dropping")} down {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling")} {GetRandomStringFrom("gullet", "throat", "esophagus")}, landing with a splash in {GPPHis(i.Unit)} {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> receives orders to devour <b>{i.Target.Name}</b> and does so without hesitation, {GetRandomStringFrom("sending", "consigning")} {GPPHis(i.Unit)} former ally to a {GetRandomStringFrom("gurgling", "churning", "melty", "acidic", "grim", "predatory")} {GetRandomStringFrom("fate", "doom", "end", "grave", "death")}.",
            priority: 9, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> screams for help are muffled as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy")} {GetRandomStringFrom("gullet", "throat", "esophagus")} drags {GPPHis(i.Unit)} former ally down.",
            priority: 9, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"With a quick apology, <b>{i.Unit.Name}</b> swallows {GPPHis(i.Unit)} struggling comrade before {GPPHe(i.Target)} can realize what’s happening!",
            priority: 9, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> pushes <b>{i.Target.Name}</b> over, shoves {GPPHis(i.Target)} legs into {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}, lifts {GPPHis(i.Unit)} former ally up into the air and sends {GPPHis(i.Unit)} current meal to rest in {GPPHis(i.Unit)} {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is disgusted by <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> weakness and quickly {GetRandomStringFrom("swallows", "gulps", "eats", "devours", "vores")} {GPPHim(i.Target)}.",
            priority: 9, conditional: s => Friendly(s) && !Endo(s)),
            
            //Endo
            new EventString((i) => $"<b>{i.Target.Name}</b> blushes when <b>{i.Unit.Name}</b> embraces {GPPHim(i.Target)} and sends {GPPHim(i.Target)} sliding down {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy")} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> gently engulfs {GPPHis(i.Unit)} ally. For <b>{i.Target.Name}</b>, the noise of the battlefield is replaced with gentle sloshing and gurgling, as well as an all-encompassing heartbeat.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"After a moment of nervous hesitation, <b>{i.Target.Name}</b> comfortably slips into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} thoroughly savored by <b>{i.Unit.Name}</b>, {GPPHis(i.Target)} ally, before being packed away into the safety of {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> squirms and thrashes about, trying to free {GPPHimself(i.Target)} from the grasp of {GPPHis(i.Target)} vicious predator... and then {( Lewd(i) ? "moans in delight" : "giggles")} as the last of {GPPHim(i.Target)} slide{SIfSingular(i.Target)} into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}.\n<b>{i.Unit.Name}</b> appreciates the act and caresses {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> has to reassure <b>{i.Target.Name}</b> that it's safe, before the latter finally dives head first down {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy")} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),

            //Flirty
            new EventString((i) => $"As <b>{i.Unit.Name}</b> begins to scarf down <b>{i.Target.Name}</b>, {GPPHe(i.Unit)} make{SIfSingular(i.Unit)} sure that <b>{AttractedWarrior(i.Unit).Name}</b> has a good view of the show as {GPPHis(i.Unit)} prey wiggles down {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy")} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"<b>{i.Unit.Name}</b> seductively eyes <b>{AttractedWarrior(i.Unit).Name}</b> as {GPPHe(i.Unit)} {GetRandomStringFrom("deftly", "artfully", "skillfully", "dexterously", "easily", "quickly", "slowly")} swallow{SIfSingular(i.Unit)} <b>{i.Target.Name}</b>.",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> watches in awe as <b>{i.Target.Name}</b> becomes little more than a bulge on <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> enticing frame.",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"<b>{i.Unit.Name}</b> almost spits <b>{i.Target.Name}</b> up when <b>{AttractedWarrior(i.Unit).Name}</b> winks at {GPPHim(i.Unit)}, but manages to recover and force the rival warrior down into {GPPHis(i.Unit)} {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sees <b>{i.Target.Name}</b> approaching <b>{AttractedWarrior(i.Unit).Name}</b> with malicious intent!  Reacting quickly, the {GetRaceDescSingl(i.Unit)} heroically intercepts the villain and {GetRandomStringFrom("deftly", "artfully", "skillfully", "dexterously", "easily", "quickly", "slowly")} stuffs {GPPHim(i.Target)} into {GPPHis(i.Unit)} {GetRandomStringFrom("belly jail", "stomach prison", "gut jail", "midsection penitentiary", "tummy prison", "depths of holding", "innards of confinement", "acidic holding cell", "flesh prison", "gurgly death chamber")}.  The rescued ally claps excitedly for their savior.",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lovingly points at <b>{AttractedWarrior(i.Unit).Name}</b> as {GPPHe(i.Unit)} gulp{SIfSingular(i.Unit)} <b>{i.Target.Name}</b> down to let {GPPHim(AttractedWarrior(i.Unit))} know this is for {GPPHim(AttractedWarrior(i.Unit))}. However, this is mistaken as an intimidating threat.",
            priority: 8, conditional: ReqOSW),

            //Leaders as prey
            new EventString((i) => $"<b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} unguarded by {GPPHis(i.Target)} troops when <b>{i.Unit.Name}</b> grabs hold of {GPPHim(i.Target)} and gobbles {GPPHim(i.Target)} up! {GetRandomStringFrom("\"Their leader was most delicious!\"", "\"Such a tasty leader, you were!\"", "\"So much for sound leadership!\"", "\"For a leader, you sure were weak...\"", "\"Shouldn't a leader taste a <i>little</i> better than their underlings?\"", "\"Oooh~ You tasted as eqxuisitley as you looked, \'leader\'\"", "\"\'Leader\'?  More like \'Snack\'.\"", "\"Kind of an underwhelming flavor for a leader...\"")} <b>{i.Unit.Name}</b> proclaims proudly, rubbing {GPPHis(i.Unit)} {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 10, conditional: s => ActorHumanoid(s) && InStomach(s) && TargetLeader(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slams <b>{i.Target.Name}</b> to the ground with a heavy blow, conclusively ending the battle. {GetRandomStringFrom("\"I have been waiting to do this for a long time.\"", "\"Finally! Time to meet your fate, oh \'leader\'.\"", "\"That was a good fight!  Unfortunately for you, leader, you worked up my appetite...\"", "\"Well fought, leader.  I trust there are no objections if I claim my prize?\"", "\"Foolishness, leader!  Foolishness.\"", "\"How does it feel knowing that your entire country is about to watch you get eaten?\"", "\"Oops~  Looks like you made a grave mistake, oh \'leader\'.  And now you get to digest for it!\"", "\"You should be thanking me, you know.  Your country deserves a stronger ruler!  And after I eat you they'll get the chance to find one.\"", "\"Goodness, I hope the rest of your country isn't as weak as you were!\"", "\"Once the leader of a powerful nation, soon to be fat on my ass~\"")} {GPPHe(i.Unit)} whisper{SIfSingular(i.Unit)} to <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> ear before {GPPHe(i.Unit)} {GetRandomStringFrom("hungrily", "greedily", "deftly", "artfully", "skillfully", "dexterously", "easily", "quickly", "slowly")} swallows {GPPHim(i.Target)} whole!",
            priority: 10, conditional: s => ActorLeader(s) && InStomach(s) && TargetLeader(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> bellows {GPPHis(i.Unit)} triumph as {GPPHe(i.Unit)} pull{SIfSingular(i.Unit)} {GPPHis(i.Unit)} rival leader <b>{i.Target.Name}</b> down {GPPHis(i.Unit)} {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous")} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            priority: 10, conditional: s => ActorLeader(s) && InStomach(s) && TargetLeader(s)),

            //Cake prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> excitedly throws {GPPHis(i.Unit)} weapons to the ground and leaps at the huge cake, mouth open! In a frenzy, {GPPHe(i.Unit)} quickly scarfs down the whole cake. All that's left is some whip cream, which {GPPHe(i.Unit)} lick{SIfSingular(i.Unit)} up, and a very {GetRandomStringFrom("fat", "full", "stuffed")} and happy <b>{i.Unit.Name}</b>.",
            targetRace: Race.Cake, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> goes into a frenzied pigout as {GPPHe(i.Unit)} start{SIfSingular(i.Unit)} stuffing {GPPHimself(i.Unit)} with the {GetRaceDescSingl(i.Target)}!",
            targetRace: Race.Cake, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> quickly scarfs down the {GetRaceDescSingl(i.Target)} in front of {GPPHim(i.Unit)}. {Capitalize(GPPHe(i.Unit))} licks {GPPHis(i.Unit)} lips and savours the sweet taste.",
            targetRace: Race.Cake, priority: 10),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> mouth waters as {GPPHe(i.Unit)} run{SIfSingular(i.Unit)} towards the large dessert in front of {GPPHim(i.Unit)}. The {GetRaceDescSingl(i.Unit)}, unable to resist, begins grabbing chunks of the cake and stuffing them into {GPPHis(i.Unit)} mouth. After {GPPHe(i.Unit)} finish{EsIfSingular(i.Unit)}, {GPPHe(i.Unit)} fall{SIfSingular(i.Unit)} on {GPPHis(i.Unit)} back and belches loudly, happily rubbing {GPPHis(i.Unit)} {GetRandomStringFrom("fat", "big", "full", "stuffed")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            targetRace: Race.Cake, priority: 10, conditional: s => CanBurp(s) && HardVore(s)),

            //Shrunken prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs the shrunken <b>{i.Target.Name}</b> and holds {GPPHim(i.Target)} in front of {GPPHis(i.Unit)} face. <b>{i.Unit.Name}</b> gives {GPPHim(i.Target)} a lick before stuffing the tiny {GetRaceDescSingl(i.Target)} in {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} and swallowing.",
            priority: 10, conditional: Shrunk),
            new EventString((i) => $" A shrunken <b>{i.Target.Name}</b> screams in horror as the massive hand of <b>{i.Unit.Name}</b> envelops {GPPHis(i.Target)} entire body. <b>{i.Unit.Name}</b> smirks before tossing the scared {GetRaceDescSingl(i.Target)} into {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}.",
            priority: 10, conditional: s=> Shrunk(s) && ActorHumanoid(s)),
            new EventString((i) => $" A shrunken <b>{i.Target.Name}</b> tries to run away as <b>{i.Unit.Name}</b> reaches for {GPPHim(i.Target)} but wasn't fast enough and gets caught. <b>{i.Unit.Name}</b> brings {GPPHim(i.Target)} up to {GPPHis(i.Unit)} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} before tossing {GPPHim(i.Target)} {GetRaceDescSingl(i.Target)} inside.",
            priority: 10, conditional: Shrunk),
            new EventString((i) => $"<b>{i.Unit.Name}</b> looms over the now-tiny <b>{i.Target.Name}</b>. The {GetRaceDescSingl(i.Unit)} reaches down and grabs {GPPHim(i.Target)}, making fun of {GPPHis(i.Target)} new size before chucking the screaming {GetRaceDescSingl(i.Target)} into {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}.",
            priority: 10, conditional: Shrunk),
            new EventString((i) => $"<b>{i.Target.Name}</b> tries to get away from <b>{i.Unit.Name}</b> but at this tiny size, the {GetRaceDescSingl(i.Unit)} catches {GPPHim(i.Target)} easily and quickly gulps {GPPHim(i.Target)} down.",
            priority: 10, conditional: Shrunk),
            new EventString((i) => $"<b>{i.Target.Name}</b> tries to hit back at <b>{i.Unit.Name}</b>, but at this tiny size, {GPPHe(i.Target)} doesn't do any real damage. The {GetRaceDescSingl(i.Unit)} grabs {GPPHim(i.Target)} and laughs in {GPPHis(i.Target)} face before playfully tossing <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}.",
            priority: 10, conditional: Shrunk),

            //TheGreatEscape
            new EventString((i) => $"<b>{i.Unit.Name}</b> opens {GPPHis(i.Unit)} {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} wide, engulfing <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> form... But as {GPPHis(i.Unit)} prey rounds out {GPPHis(i.Unit)} gullet, there's no familiar gurgling sound of digestion.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Unit.Name}</b> swallows <b>{i.Target.Name}</b> and goes back to battle, unbothered by cries of protest from within.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"\"Let's see how slippery you really are\" - grins <b>{i.Unit.Name}</b> as he swallows <b>{i.Target.Name}</b>.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"As {GPPHe(i.Target)} slip{SIfSingular(i.Target)} into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> maw, <b>{i.Target.Name}</b> is planning something.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Unit.Name}</b> plays with <b>{i.Target.Name}</b>, keeping {GPPHis(i.Target)} face just out of {GPPHis(i.Unit)} throat and teasing {GPPHim(i.Target)}, saying that this light will be the last in {GPPHis(i.Target)} life. Angry, <b>{i.Target.Name}</b> is already plotting something...",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Unit.Name}</b> commends <b>{i.Target.Name}</b> on how smoothly {GPPHe(i.Target)} go{EsIfSingular(i.Target)} in. <b>{i.Target.Name}</b> plans to go out exactly as smoothly.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Unit.Name}</b> finds Erin unable to defend herself and gulps the Nyangel down, pausing only to lick at her most sensitive parts before sending her to her destination.",
            targetRace: Race.Erin, priority: 26, conditional: (s) => Lewd(s) && HasGreatEscape(s)),
            new EventString((i) => $"Erin lets out a scream of horror as <b>{i.Unit.Name}</b> grabs her and shoves her into their {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")}, slowly swallowing the nyangel down.",
            targetRace: Race.Erin, priority: 26, conditional: HasGreatEscape),
            new EventString((i) => $"Erin finds herself alone with <b>{i.Unit.Name}</b>, who quickly grabs the Nyangel and begins gulping her down.",
            targetRace: Race.Erin, priority: 26, conditional: HasGreatEscape),
            new EventString((i) => $"Erin, though normally terrified, makes no move to resist as <b>{i.Unit.Name}</b> begins to swallow her down.",
            targetRace: Race.Erin, priority: 26, conditional: (s) => Cursed(s) && HasGreatEscape(s)),
            new EventString((i) => $"As the {GetRaceDescSingl(i.Unit)}'s curse begins to set in to Erin's mind, the normally unwilling Nyangel makes no move to resist as <b>{i.Unit.Name}</b> begins to gulp her down, licking between her thighs easily without her normal resistance.",
            targetRace: Race.Erin, priority: 26, conditional: s => Cursed(s) && Lewd(s) && HasGreatEscape(s)),

            //Abakhanskya Swallow - Generic
            new EventString((i) => $"Tossing <b>{i.Target.Name}</b> up into the air, <b>{i.Unit.Name}</b> catches {GPPHim(i.Target)} by yawning her {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} wide open. The poor {GetRaceDescSingl(i.Target)} wails in dismay as {GPPHe(i.Target)} plummets head-first into <b>Aba's</b> {GetRandomStringFrom("gullet", "throat", "esophagus")}, bulging out her fat neck briefly before fading into being simple bloat in a building-sized {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b> screams as <b>{i.Unit.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} tucks {GPPHim(i.Target)} in her {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} and gulps them down into her waiting, {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rumbles with delight as <b>{i.Target.Name}</b> swells out her already enormous middle. It's rare for her to find such large prey in this world!",
            conditional: s => SizeDiff(s, 1), actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rumbles with delight as <b>{i.Target.Name}</b> swells out her already enormous middle.",
            conditional: s => SizeDiff(s, 2), actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> looks down at her {PreyLocStrings.ToSyn(PreyLocation.stomach)} curiously, wondering just where <b>{i.Target.Name}</b> went as {GPPHe(i.Target)} didn't appear to add any bulge to <b>Aba's</b> massive frame at all.  With a shrug, the dragoness turns back to the battle at hand.",
            conditional: s => SizeDiff(s, 5), actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b> wails for help before being {GetRandomStringFrom("deftly", "artfully", "skillfully", "dexterously", "easily", "quickly")} stuffed down <b>Aba's</b> {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"Stuffed in head first, <b>{i.Target.Name}</b>'s ass is framed nicely by <b>{i.Unit.Name}</b>'s {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} before disappearing from the outside world alltogether. Likely forever.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> swallows down <b>{i.Target.Name}</b> with a single, terrifyingly efficient <i>{GetRandomStringFrom("*Gulp!*", "*Gllp!*", "*Glup!*", "*Glrp!*", "*Guulp!*", "*Ulp!*", "*Glrk!*", "*GLRK!*", "*Glk!*")}</i>.  With technique like that, not to mention her size, this dragoness was clearly a hyper-capable predator...",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> flails about desperately, trying to get a grip on something, anything at all that might spare {GPPHim(i.Target)} {GPPHis(i.Target)} {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "acidic", "grim", "predatory")} {GetRandomStringFrom("fate", "doom", "end", "grave", "death")}.  <b>{i.Unit.Name}</b> however, uncaring to her prey's plight, {GetRandomStringFrom("simply", "casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} pushes {GPPHim(i.Target)} down into her {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "steamy", "eager")} {GetRandomStringFrom("gullet", "throat", "esophagus")} and swallows {GPPHim(i.Target)} with a loud <i>{GetRandomStringFrom("*Gulp!*", "*Gllp!*", "*Glup!*", "*Glrp!*", "*Guulp!*", "*Ulp!*", "*Glrk!*", "*GLRK!*", "*Glk!*")}</i>.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"{i.Target.Name} has {GPPHis(i.Target)} scream cut short by <b>{i.Unit.Name}</b> sealing her lips over {GPPHim(i.Target)}, locking {GPPHim(i.Target)} away possibly forever.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> toys with <b>{i.Target.Name}</b> before ultimately stuffing {GPPHim(i.Target)} down her gullet, finishing with a content sigh and a caress of her new {PreyLocStrings.ToSyn(PreyLocation.stomach)} bulge.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"Locked in <b>{i.Unit.Name}</b>'s iron grip, <b>{i.Target.Name}</b> begs for mercy.  She {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} pretends to consider it for a moment, then shrugs and opens her massive {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} wide.  <b>{i.Target.Name}</b> has their scream squelched and replaced by the loud noise of <b>Aba</b> swallowing them down.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b> is now adding extra inches to the swell of <b>{i.Unit.Name}</b>'s gut. Not <i>too</i> many inches though since {GPPHe(i.Target)}'s so much smaller than the mighty khatunlao, but hey.  It's the little things that matter!",
            conditional: s => SizeDiff(s, 4), actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b> is now adding extra inches to the swell of <b>{i.Unit.Name}</b>'s gut. ",
            conditional: s => SizeDiff(s, 2), actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b> is now adding entire <i>meters</i> of extra swell to <b>{i.Unit.Name}</b>'s gut!  She groans in bliss from being stuffed so adequately, a rare treat for a predator of her considerable size",
            conditional: s => SizeDiff(s, 1), actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b> is fearing that this may be it. This could very well be the last thing {GPPHe(i.Target)} ever sees. Locked inside of <b>{i.Unit.Name}</b>'s {PreyLocStrings.ToSyn(PreyLocation.stomach)} with the powerful acids already eating away at {GPPHim(i.Target)}...",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b>'s cries for aid can only barely be heard when going down <b>{i.Unit.Name}</b>'s throat. Then not at all when {GPPHe(i.Target)} makes that {PreyLocStrings.ToSyn(PreyLocation.stomach)} all the more round.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"The last face <b>{i.Target.Name}</b> makes before being snatched and {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} snacked on by <b>{i.Unit.Name}</b> is one of utter despair.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b>'s eyes widen as {GPPHe(i.Target)} enters <b>{i.Unit.Name}</b>'s {GetRandomStringFrom("groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The sea of chyme is already claiming {GPPHim(i.Target)}.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"Now inside of <b>{i.Unit.Name}</b>'s {GetRandomStringFrom("growling", "rumbling", "groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, <b>{i.Target.Name}</b> struggles to keep {GPPHis(i.Target)} head above the tides of {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "gastric", "acidic", "caustic", "deadly", "corrosive", "deadly", "predatory", "flesh-melting")} {GetRandomStringFrom("fate", "doom", "death")}.",
            actorRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rumbles with pleasure as <b>{i.Target.Name}</b> finds themselves bloating out her metaphorical fuel tank.",
            actorRace: Race.Abakhanskya, priority: 12),
            //Abakhanskya Swallow - Unique
            new EventString((i) => $"<b>{i.Unit.Name}</b> is elated as she swallows the girthy <b>{i.Target.Name}</b>, who thrashes and roars so much on the way down that she can still be heard through all of the Matron's thick fat. That same fat which the Matron will have her added to shortly.",
            actorRace: Race.Abakhanskya, targetRace: Race.Cierihaka, priority: 12),
            new EventString((i) => $"The odd body of the aabayx, <b>{i.Target.Name}</b>, would've given <b>{i.Unit.Name}</b> pause if not for her immense hunger.  {GPPHe(i.Target)} is swallowed without a second thought.",
            actorRace: Race.Abakhanskya, targetRace: Race.Aabayx, priority: 12),
            new EventString((i) => $"The rough hide of an alligator is a rare treat to <b>{i.Unit.Name}</b>.  <b>{i.Target.Name}</b> is eagerly swallowed by her without remorse.",
            actorRace: Race.Abakhanskya, targetRace: Race.Alligators, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> does not shy away from eating her green vegetables, as the alraune <b>{i.Target.Name}</b> soon finds out.",
            actorRace: Race.Abakhanskya, targetRace: Race.Alraune, priority: 12),
            new EventString((i) => $"Being no fussy eater, even ants are on the menu for <b>{i.Unit.Name}</b>. <b>{i.Target.Name}</b> is plucked and swallowed like a snack.",
            actorRace: Race.Abakhanskya, targetRace: Race.Ants, priority: 12),
            new EventString((i) => $"Being no fussy eater, even ants are on the menu for <b>{i.Unit.Name}</b>. <b>{i.Target.Name}</b> is plucked and swallowed like a snack.",
            actorRace: Race.Abakhanskya, targetRace: Race.FeralAnts, priority: 12),
            new EventString((i) => $"Being no fussy eater, even ants are on the menu for <b>{i.Unit.Name}</b>. <b>{i.Target.Name}</b> is plucked and swallowed like a snack.",
            actorRace: Race.Abakhanskya, targetRace: Race.WarriorAnts, priority: 12),
            new EventString((i) => $"The surging ki, the tattered gi, and the sheer killing intent provide Asura with a pleasing texture to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> all consuming jaws.",
            actorRace: Race.Abakhanskya, targetRace: Race.Asura, priority: 12),
            new EventString((i) => $"The fox-lady slides down into <b>{i.Unit.Name}</b>, who ravenously takes them in.  She slurps her chops afterwards with delight.",
            actorRace: Race.Abakhanskya, targetRace: Race.Auri, priority: 12),
            new EventString((i) => $"The cockatrice, <b>{i.Target.Name}</b>, is swallowed without much thought by <b>{i.Unit.Name}</b>. The look on her face afterwards, however, would make an onlooker figure the {GetRaceDescSingl(i.Unit)} was made of chocolate.",
            actorRace: Race.Abakhanskya, targetRace: Race.Cockatrice, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b> becomes poultry for <b>{i.Unit.Name}</b>. Tastes like chicken!",
            actorRace: Race.Abakhanskya, targetRace: Race.Avians, priority: 12),
            new EventString((i) => $"There's something <b>{i.Unit.Name}</b> didn't quite like about eating a bat... But she {GetRandomStringFrom("eats", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} <b>{i.Target.Name}</b> anyways.",
            actorRace: Race.Abakhanskya, targetRace: Race.Bats, priority: 23),
            new EventString((i) => $"There's something <b>{i.Unit.Name}</b> didn't quite like about eating a bat... But she {GetRandomStringFrom("eats", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} <b>{i.Target.Name}</b> anyways.",
            actorRace: Race.Abakhanskya, targetRace: Race.FeralBats, priority: 12),
            new EventString((i) => $"The dratopyr, <b>{i.Target.Name}</b>, is vacuumed down by <b>{i.Unit.Name}</b>, who looses a mighty belch afterwards with a laugh!",
            actorRace: Race.Abakhanskya, targetRace: Race.Dratopyr, priority: 12, conditional: CanBurp),
            new EventString((i) => $"To most, eating a bee is a great way to have a bad time.  Not to <b>{i.Unit.Name}</b>, as <b>{i.Target.Name}</b> quickly finds out.",
            actorRace: Race.Abakhanskya, targetRace: Race.Bees, priority: 12),
            new EventString((i) => $"Bunnies will always be fodder for their betters. <b>{i.Target.Name}</b> will have to accept this as they're yanked up by the ears and crammed into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> drooling maw.",
            actorRace: Race.Abakhanskya, targetRace: Race.Bunnies, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> finds the thought of cakes eating people a little silly. The delicious treat is soon put in its rightful place.",
            actorRace: Race.Abakhanskya, targetRace: Race.Cake, priority: 12),
            new EventString((i) => $"Fish! <b>{i.Unit.Name}</b> would almost remark out loud before stuffing the slurpable <b>{i.Target.Name}</b> down in one practiced motion.",
            actorRace: Race.Abakhanskya, targetRace: Race.Catfish, priority: 12),
            new EventString((i) => $"The fat, juicy and smooth body of a killer whale. It's premium meat. <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> eyes open wide in distress as <b>{i.Unit.Name}</b> snatches them out of the air and slurps them down like a particularly oversized noodle.",
            actorRace: Race.Abakhanskya, targetRace: Race.FeralOrcas, priority: 12),
            new EventString((i) => $"The fluffy body of <b>{i.Target.Name}</b> does not dissuade <b>{i.Unit.Name}</b>, who is soon slurping down the {GetRaceDescSingl(i.Target)}'s tail.",
            actorRace: Race.Abakhanskya, targetRace: Race.Cats, priority: 12),
            new EventString((i) => $"The odd body of the collector, <b>{i.Target.Name}</b>, is something <b>{i.Unit.Name}</b> doesn't like.  She forces them down into her, but ends with a thoughtful smirk. Clearly there's a lovely aftertaste.",
            actorRace: Race.Abakhanskya, targetRace: Race.Collectors, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rolls her eyes before swallowing the compy. <b>{i.Target.Name}</b> barely even qualified as a snack.",
            actorRace: Race.Abakhanskya, targetRace: Race.Compy, priority: 12),
            new EventString((i) => $"Eating a giant slug isn't something that crosses her mind as tasty. But at least it's filling! <b>{i.Unit.Name}</b> laughs after the deed is done.",
            actorRace: Race.Abakhanskya, targetRace: Race.CoralSlugs, priority: 12),
            new EventString((i) => $"Another slug, another snack. <b>{i.Unit.Name}</b> rolled her eyes and grabbed it, then ate it. These things barely squirmed. Where's the fun in that?",
            actorRace: Race.Abakhanskya, targetRace: Race.SpringSlugs, priority: 12),
            new EventString((i) => $"The spitter slug looks gross, but it's a meal. <b>{i.Unit.Name}</b> snatches it up and packs it away without comment. <b>{i.Target.Name}</b> weighs down her belly just a bit.",
            actorRace: Race.Abakhanskya, targetRace: Race.SpitterSlugs, priority: 12),
            new EventString((i) => $"The oversized body of the rock slug makes <b>{i.Unit.Name}</b> grin. Picking up the enormous thing with little difficulty, she has to dislocate her jaws to really fit this one in. <b>{i.Target.Name}</b> soon swells out the khatunlao's belly significantly.",
            actorRace: Race.Abakhanskya, targetRace: Race.RockSlugs, priority: 12),
            new EventString((i) => $"Eating metal's not a foreign concept to <b>{i.Unit.Name}</b>, as the {GetRaceDescSingl(i.Target)} <b>{i.Target.Name}</b> soon discovers. The crypter may be horrifed to know they'll be making her plating nice and shiny soon, as <b>{i.Unit.Name}</b> knocks them down into her gullet.",
            actorRace: Race.Abakhanskya, targetRace: Race.Crypters, priority: 12),
            new EventString((i) => $"The Swallower gets swallowed without much fanfare. <b>{i.Unit.Name}</b> doesn't much care for such small meals.",
            actorRace: Race.Abakhanskya, targetRace: Race.DarkSwallower, priority: 12),
            new EventString((i) => $"The deer <b>{i.Target.Name}</b> is hoisted up by the legs and covered in saliva as <b>{i.Unit.Name}</b> slurps across their body. Ahh, nothing like freshly-caught game!  Caught. And swiftly ate.",
            actorRace: Race.Abakhanskya, targetRace: Race.Deer, priority: 12),
            new EventString((i) => $"The sprite of dew is somewhat of an eyeroller to <b>{i.Unit.Name}</b>. Where's the <i>flavour?</i>  At least there's some good hydration to be had!",
            actorRace: Race.Abakhanskya, targetRace: Race.DewSprites, priority: 12),
            new EventString((i) => $"Eating a dog isn't a taboo to <b>{i.Unit.Name}</b>, <b>{i.Target.Name}</b> swiftly realises. Crammed in with eagerness, she then swallows them whole and alive.",
            actorRace: Race.Abakhanskya, targetRace: Race.Dogs, priority: 12),
            new EventString((i) => $"D.R.A.C.O. Unit #008 will soon become plate reinforcement for <b>{i.Unit.Name}</b>, who much appreciates the grand, metallic meal.",
            actorRace: Race.Abakhanskya, targetRace: Race.DRACO, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slurps down <b>{i.Target.Name}</b> with absolute joy. As the dragon roars and cries out, clawing at the ground to try and get themselves away, the khatunlao can't help but blush and smirk. Their snout is soon slipping underneath hers, their body bulging out her gut.",
            actorRace: Race.Abakhanskya, targetRace: Race.Dragon, priority: 12),
            new EventString((i) => $"Not nearly as extravagant as their namesake, the dragonfly is swallowed by <b>{i.Unit.Name}</b> almost by accident.",
            actorRace: Race.Abakhanskya, targetRace: Race.Dragonfly, priority: 12),
            new EventString((i) => $"Spider people? <b>{i.Unit.Name}</b> takes them in like any other people. <b>{i.Target.Name}</b> swiftly joins the masses within the Matron.",
            actorRace: Race.Abakhanskya, targetRace: Race.Driders, priority: 12),
            new EventString((i) => $"The one nice thing about worms is that they're easy to swallow. <b>{i.Target.Name}</b> quickly disappears into the enormous <b>{i.Unit.Name}</b>, slurped up like a giant noodle.",
            actorRace: Race.Abakhanskya, targetRace: Race.Earthworms, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> loves her noodles, <b>{i.Target.Name}</b> soon finds out. The plume of the mighty eastern's tail is the last thing to be seen of them as they're packed away into her voluminous gut with one, long, continuous slurp!",
            actorRace: Race.Abakhanskya, targetRace: Race.EasternDragon, priority: 12),
            new EventString((i) => $"The protein brought by a horse is something the muscles of <b>{i.Unit.Name}</b> won't pass on. Picking them up like a mere shopping bag, she stuffs in the flailing <b>{i.Target.Name}</b> and silences their whinnying with a swallow.",
            actorRace: Race.Abakhanskya, targetRace: Race.FeralHorses, priority: 12),
            new EventString((i) => $"The protein brought by a horse is something the muscles of <b>{i.Unit.Name}</b> won't pass on. Picking them up like a mere shopping bag, she stuffs in the flailing <b>{i.Target.Name}</b> and silences their whinnying with a swallow.",
            actorRace: Race.Abakhanskya, targetRace: Race.Equines, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b> is swallowed without much thought by <b>{i.Unit.Name}</b>.",
            actorRace: Race.Abakhanskya, targetRace: Race.Erin, priority: 12),
            new EventString((i) => $"The pathetic size of a fairy is nothing to <b>{i.Unit.Name}</b>, who snaps them down almost incredulously.",
            actorRace: Race.Abakhanskya, targetRace: Race.Fairies, priority: 12),
            new EventString((i) => $"The sliminess of the frog placed it alongside slugs in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> mind. Just like them, they'd be food, with the two ravenous swallows she treats <b>{i.Target.Name}</b> to.",
            actorRace: Race.Abakhanskya, targetRace: Race.FeralFrogs, priority: 12),
            new EventString((i) => $"The big cat will soon be a bit of fat on <b>{i.Unit.Name}</b>. <b>{i.Target.Name}</b> screeches and yelps on the way down, much to the dragoness' amusement.",
            actorRace: Race.Abakhanskya, targetRace: Race.FeralLions, priority: 12),
            new EventString((i) => $"The rough coat of a lizard makes them nice and easy to hold for <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> claws. Guided to her mouth, <b>{i.Target.Name}</b> is soon crammed in as the Matron hummed with delight.",
            actorRace: Race.Abakhanskya, targetRace: Race.FeralLizards, priority: 12),
            new EventString((i) => $"The slurpable body of a shark is one, lovely, enormous fish. <b>{i.Target.Name}</b> finds out what <b>{i.Unit.Name}</b> thinks of them as she grabs them by the tail then swallows with one, quick, slurp.",
            actorRace: Race.Abakhanskya, targetRace: Race.FeralSharks, priority: 12),
            new EventString((i) => $"The wolf would soon be in {GPPHis(i.Target)} new den, as <b>{i.Unit.Name}</b> snatches up <b>{i.Target.Name}</b> and balls them up! It's not long before she's crammed down the oversized dog with a cruel smirk.",
            actorRace: Race.Abakhanskya, targetRace: Race.FeralWolves, priority: 12),
            new EventString((i) => $"Like a classic hunter holding up slain game, <b>{i.Unit.Name}</b> has snatched up <b>{i.Target.Name}</b> by their legs. Hoisted upside down, she then lowers them into her jaws. And unable to resist, they're gone in a second.",
            actorRace: Race.Abakhanskya, targetRace: Race.Foxes, priority: 12),
            new EventString((i) => $"The fat frog <b>{i.Target.Name}</b> is slurped down in the blink of an eye by <b>{i.Unit.Name}</b>, who pats the side of her gut and belches afterwards.",
            actorRace: Race.Abakhanskya, targetRace: Race.Frogs, priority: 12, conditional: CanBurp),
            new EventString((i) => $"Grabbing the gazelle <b>{i.Target.Name}</b> by their legs, <b>{i.Unit.Name}</b> shoves them right into her open jaws with glee. Better when cooked, but who's got the time for that? She's gulps them with a grin.",
            actorRace: Race.Abakhanskya, targetRace: Race.Gazelle, priority: 12),
            new EventString((i) => $"The little goblin <b>{i.Target.Name}</b> stands no chance against <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> hunger, as they soon find out.",
            actorRace: Race.Abakhanskya, targetRace: Race.Goblins, priority: 12),
            new EventString((i) => $"The girth of a goodra is something <b>{i.Unit.Name}</b> <i>loves</i>. The slimey flavour though, less so. <b>{i.Target.Name}</b> is packed down with haste, soon to weigh down that multi-ton gut.",
            actorRace: Race.Abakhanskya, targetRace: Race.Goodra, priority: 12),
            new EventString((i) => $"Gryphons are an all-in-one cattle-sized cat-bird hybrid! This is something <b>{i.Unit.Name}</b> doesn't pass up on, <b>{i.Target.Name}</b> is horrified to find out.",
            actorRace: Race.Abakhanskya, targetRace: Race.Gryphons, priority: 12),
            new EventString((i) => $"The harpy <b>{i.Target.Name}</b> is sucked down as the air around them is vacuumed into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> jaws. She can't help but laugh afterwards!",
            actorRace: Race.Abakhanskya, targetRace: Race.Harpies, priority: 12),
            new EventString((i) => $"\"The harvester...\" the Matron chuckles, \"Will be harvested.\" She smiled a little at her own dry cheesiness as the harvester is now bulging out her gut.",
            actorRace: Race.Abakhanskya, targetRace: Race.Harvesters, priority: 12),
            new EventString((i) => $"The chunky size of a hippo is something she loves. They don't last a second once in her jaws though, and soon <b>{i.Target.Name}</b> is another bit of swell in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Abakhanskya, targetRace: Race.Hippos, priority: 12),
            new EventString((i) => $"Ah, humans. The classic. What she once was, in an age long past. The salt of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> skin is thoroughly enjoyed and <b>{i.Unit.Name}</b> almost savours them, until they vanish down into her {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Abakhanskya, targetRace: Race.Humans, priority: 12),
            new EventString((i) => $"The exotic spice of an imp is a lovely seasoning to a larger feast. <b>{i.Unit.Name}</b> snatches up a vulnerable <b>{i.Target.Name}</b> and horks them down without remorse.",
            actorRace: Race.Abakhanskya, targetRace: Race.Imps, priority: 12),
            new EventString((i) => $"To <b>{i.Unit.Name}</b>, a roo is just another thing to hunt. Soon, <b>{i.Target.Name}</b> has been relocated from outside to inside, as the black flesh of <b>{i.Unit.Name}</b> shifts and churns her newest meal.",
            actorRace: Race.Abakhanskya, targetRace: Race.Kangaroos, priority: 12),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> tiny size does not impress <b>{i.Unit.Name}</b>. In a second, he's gone, vanished into the meat-smelting cauldron of the khatunlao.",
            actorRace: Race.Abakhanskya, targetRace: Race.Ki, priority: 12),
            new EventString((i) => $"Kobolds were little lizards that <b>{i.Unit.Name}</b> couldn't help but laugh at. And they made a lovely side to their dragon overlords! <b>{i.Target.Name}</b> is snatched and swallowed, their tiny size vanishing into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> expanse.",
            actorRace: Race.Abakhanskya, targetRace: Race.Kobolds, priority: 12),
            new EventString((i) => $"The meat of a komodo brings a little flash to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> eye. A rare catch! Clenching her hand around <b>{i.Target.Name}</b>, she tosses them into her jaws like game. And of course, she catches. And swallows. Her belly inches and swells outward.",
            actorRace: Race.Abakhanskya, targetRace: Race.Komodos, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> plays with her lamia food, swallowing from the tail first. As <b>{i.Target.Name}</b> desperately squirms and tries to get away, she continued gulping. Until their screaming mouth is overtaken and sealed over by <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b>.",
            actorRace: Race.Abakhanskya, targetRace: Race.Lamia, priority: 12),
            new EventString((i) => $"The two-legged lizardfolk is a lovely little meal. Smacked up into the air, <b>{i.Unit.Name}</b> catches <b>{i.Target.Name}</b> in her jaws expertly, making them ripple her gut awesomely on arrival.",
            actorRace: Race.Abakhanskya, targetRace: Race.Lizards, priority: 12),
            new EventString((i) => $"Curling the mantis into a ball, <b>{i.Unit.Name}</b> swallows <b>{i.Target.Name}</b> without much thought. She does appreciates the extra material to reinforce her hide with though.",
            actorRace: Race.Abakhanskya, targetRace: Race.Mantis, priority: 12),
            new EventString((i) => $"Ah, long tailed races. It never gets old. <b>{i.Unit.Name}</b> loved hearing them scream. The merfolk <b>{i.Target.Name}</b> is soon doing just that as the khatunlao starts slurping them down tail-first, then sealing away that wailing gob behind her closed maw. A swallow puts the meal away, likely forever.",
            actorRace: Race.Abakhanskya, targetRace: Race.Merfolk, priority: 12),
            new EventString((i) => $"The hide of a monitor is a lovely texture to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tongue. <b>{i.Target.Name}</b> squeaks out as she squeezes them in her grasp, before stuffing them in and swallowing! Smacking her chops after, it's clear she loved the meal.",
            actorRace: Race.Abakhanskya, targetRace: Race.Monitors, priority: 12),
            new EventString((i) => $"Panthers, ah. Big cats on twos than fours. Snatching <b>{i.Target.Name}</b>, <b>{i.Unit.Name}</b> works them down mercilessly, finishing with a hiccup.",
            actorRace: Race.Abakhanskya, targetRace: Race.Panthers, priority: 12),
            new EventString((i) => $"The puca, <b>{i.Target.Name}</b>, is snatched up by their ears. Shaken around by <b>{i.Unit.Name}</b>, she smirks a grin as they yell out. They're soon silenced by being put within the cruel dragoness.",
            actorRace: Race.Abakhanskya, targetRace: Race.Puca, priority: 12),
            new EventString((i) => $"Raptors were indiscernible from compy's to <b>{i.Unit.Name}</b>. <b>{i.Target.Name}</b> will die like one inside the dragoness all the same, with just one gulp and the digestion to come.",
            actorRace: Race.Abakhanskya, targetRace: Race.Raptor, priority: 12),
            new EventString((i) => $"The overgrown salamander, <b>{i.Target.Name}</b>, joins their reptilian kin in being swallowed by their synthetic better, <b>{i.Unit.Name}</b>.",
            actorRace: Race.Abakhanskya, targetRace: Race.Salamanders, priority: 12),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> casting does not save her from ending up as chow for <b>{i.Unit.Name}</b>. The lady chuckles after comically belching up her prey's staff.",
            actorRace: Race.Abakhanskya, targetRace: Race.Salix, priority: 12),
            new EventString((i) => $"The schiwardez <b>{i.Target.Name}</b> is picked up, examined a little by <b>{i.Unit.Name}</b>, then carefully swallowed. Their odd taste is noted for the future.",
            actorRace: Race.Abakhanskya, targetRace: Race.Schiwardez, priority: 12),
            new EventString((i) => $"The lovely meal <b>{i.Target.Name}</b> represented is soon reaped, as <b>{i.Unit.Name}</b> snatches the wyvern by his neck and stuffs him in head first, enjoying all the lovely thrashes he gives on the way down.",
            actorRace: Race.Abakhanskya, targetRace: Race.Scorch, priority: 12),
            new EventString((i) => $"The body of a scylla is an odd one, but a pleasure to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tongue nevertheless. <b>{i.Target.Name}</b> disappears down into the massive lady.",
            actorRace: Race.Abakhanskya, targetRace: Race.Scylla, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b> almost doesn't seem to fight back against <b>{i.Unit.Name}</b>. Stunned by the enormous lady's pheromones, perhaps?  With a shrug, the khatunlao grabs her latest catch by the tail.  <b>{i.Unit.Name}</b> is worked down so quickly and easily, owing to her smooth and slender body.",
            actorRace: Race.Abakhanskya, targetRace: Race.Selicia, priority: 12),
            new EventString((i) => $"The sergal carries some notable difference to its fluffy contemporaries in foxes and wolves in taste. <b>{i.Unit.Name}</b> tries to determine what this difference is by eating yet another exotic meal, this time being <b>{i.Target.Name}</b>, but is still unable to really discern.  Oh well, more research is required.",
            actorRace: Race.Abakhanskya, targetRace: Race.Sergal, priority: 12),
            new EventString((i) => $"The snake <b>{i.Target.Name}</b> soon regrets being practically all tail, an <b>{i.Unit.Name}</b> favourite. Slurping them up like spaghetti, their hissing head is clamped shut by claws and then pushed in behind her lips.",
            actorRace: Race.Abakhanskya, targetRace: Race.Serpents, priority: 12),
            new EventString((i) => $"The two-legged shark isn't as lovely as its feral, airborn counterpart. But it's a treat all the same to <b>{i.Unit.Name}</b>! Letting her prey thrash, <b>{i.Target.Name}</b> is destined to become fat on <b>{i.Unit.Name}</b>'s body and fuel for her purposes.",
            actorRace: Race.Abakhanskya, targetRace: Race.Sharks, priority: 12),
            new EventString((i) => $"The gooey body of <b>{i.Target.Name}</b> would've made a younger <b>{i.Unit.Name}</b> cringe. She gets it over with quickly, reaping an enjoyment from the cry of the sapient slime as they're packed away, but the taste still makes her cringe a bit.",
            actorRace: Race.Abakhanskya, targetRace: Race.Slimes, priority: 12),
            new EventString((i) => $"\"So,\" <b>{i.Unit.Name}</b> curled a grin, \"Time to suck down the succubus.\" <b>{i.Target.Name}</b> is horrified despite the khatunlao's casual cheesiness, who, true to her word, sucks them down with an indulgent grin.",
            actorRace: Race.Abakhanskya, targetRace: Race.Succubi, priority: 12),
            new EventString((i) => $"Big and beefy, the taurus <b>{i.Target.Name}</b> may curse their race for looking so appetising to someone so large and predatory as <b>{i.Unit.Name}</b>. Packing them in with a big grin, she slurped her lips for flavour. There had better be seconds!",
            actorRace: Race.Abakhanskya, targetRace: Race.Taurus, priority: 12),
            new EventString((i) => $"A grand bit of poultry, the terrorbird's flavour makes its exotic flavour known to <b>{i.Unit.Name}</b> as she packs in the bird of prey whole and alive. Tastes like chicken! Almost.",
            actorRace: Race.Abakhanskya, targetRace: Race.Terrorbird, priority: 12),
            new EventString((i) => $"The fighting spirit of a tiger is lovely to <b>{i.Unit.Name}</b>. She snatches up <b>{i.Target.Name}</b> and immediately locks them away in her gut, loving the almost instant struggles they put up within. They won't last.",
            actorRace: Race.Abakhanskya, targetRace: Race.Tigers, priority: 12),
            new EventString((i) => $"It's important to eat your greens. And it's even easier when they try to assail you. <b>{i.Unit.Name}</b> snatches up the silly plant <b>{i.Target.Name}</b> and devours it without fuss.",
            actorRace: Race.Abakhanskya, targetRace: Race.TwistedVines, priority: 12),
            new EventString((i) => $"The vagrant <b>{i.Target.Name}</b> is sucked down without problem by <b>{i.Unit.Name}</b>, its crutch of paralysis not meaning a thing to the superior lady of steel.",
            actorRace: Race.Abakhanskya, targetRace: Race.Vagrants, priority: 12),
            new EventString((i) => $"The vargul, a great and fearsome warrior race in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> eyes. It made them all the more alluring a meal. The strength they packed soon makes itself known as <b>{i.Target.Name}</b> screams, shouts and punches against the gut walls around them soon enough, giving her predator a long smirk and a sigh of pleasure.",
            actorRace: Race.Abakhanskya, targetRace: Race.Vargul, priority: 12),
            new EventString((i) => $"The vipers... A lovely mix of serpent and lamia, with a tasty alien twist. Claiming them from their tail first, <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> life or death desperation on display gives <b>{i.Unit.Name}</b> a laugh. Which soon turns to a final gulp, as she knocks her head back and lets gravity send them plunging to her {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Abakhanskya, targetRace: Race.Vipers, priority: 12),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> gluttonous spree is put to an end as he is snatched up by someone he could never stomach. <b>{i.Unit.Name}</b> smirks as she works in her chubby xenospinosaur meal. A lovely, fluffy mix of scale and feather!",
            actorRace: Race.Abakhanskya, targetRace: Race.Vision, priority: 12),
            new EventString((i) => $"The voilin <b>{i.Target.Name}</b> is an odd, but interesting meal to <b>{i.Unit.Name}</b>. She almost slows down, examining what this thing even was, before knocking it back and letting it tumble to her guts like anything else.",
            actorRace: Race.Abakhanskya, targetRace: Race.Voilin, priority: 12),
            new EventString((i) => $"Vacuuming the air around it, <b>{i.Unit.Name}</b> swallowed the whisp without issue. Save for a case of the hiccups.",
            actorRace: Race.Abakhanskya, targetRace: Race.Whisp, priority: 12),
            new EventString((i) => $"\"The wolf...\" <b>{i.Target.Name}</b> sweated as <b>{i.Unit.Name}</b> spoke in a booming voice, the big lady however was barely holding in some laughter, \"Shall be <i>wolfed</i> down!\" And true to her word, by the end of the next moment, her gut bulges with wolfmeat howling for aid, pleading for salvation from both her horrible humor and scouring acids.",
            actorRace: Race.Abakhanskya, targetRace: Race.Wolves, priority: 12),
            new EventString((i) => $"The size of a wyvern is impressive to <b>{i.Unit.Name}</b>... Were she still human. Grabbing the winged lizard by the throat, she then shoves it down her gullet. <b>{i.Target.Name}</b> thrashes and flaps, giving her a devil's grin, before she sighs with pleasure as her belly wobbles with struggle.",
            actorRace: Race.Abakhanskya, targetRace: Race.Wyvern, priority: 12),
            new EventString((i) => $"The size of a wyvern is impressive to <b>{i.Unit.Name}</b>... Were she still human. Grabbing the winged lizard by the throat, she then shoves it down her gullet. <b>{i.Target.Name}</b> thrashes and flaps, giving her a devil's grin, before she sighs with pleasure as her belly wobbles with struggle.",
            actorRace: Race.Abakhanskya, targetRace: Race.WyvernMatron, priority: 12),
            new EventString((i) => $"The multi-tailed fox did little to disassociate its flavour with that of its single-tailed brethren. <b>{i.Target.Name}</b> was engulfed all the same, <b>{i.Unit.Name}</b> giving a pleased belch after the fact and having to pick some fur from her teeth.",
            actorRace: Race.Abakhanskya, targetRace: Race.Youko, priority: 12, conditional: CanBurp),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> voracity meets its limit as <b>{i.Unit.Name}</b> stonewalls his efforts. Grabbing him by the throat, she then stuffs him in face first, enjoying his frantic and fruitless attempts to avoid being eaten alive. He's soon pushing out against the fat of her gut.",
            actorRace: Race.Abakhanskya, targetRace: Race.Zera, priority: 12),
            new EventString((i) => $"Abakhanskya scoffs at Zoey's attempts to fight her. The shark is grabbed by the legs and lowered down into her jaws. She laments on not being able to see much of that face thanks to the hair, but the sounds of prey trying to bargain and scream for help is enough to please the Matron, if not the flavour.",
            actorRace: Race.Abakhanskya, targetRace: Race.Zoey, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> swiftly snatches and devours <b>{i.Target.Name}</b> whole. \"So much for all your training I hear so much about!\" <b>{i.Unit.Name}</b> bellows, smirking smugly as the battle-hardened mercenary futilely attempts to break free from her steel-gut.",
            actorRace: Race.Abakhanskya, targetRace: Race.RwuMercenaries, priority: 9),
            //Aba swallow Flirts
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> can't help but watch <b>{i.Unit.Name}</b> pack in <b>{i.Target.Name}</b>, watching the enormous dragoness reduce a whole {GetRaceDescSingl(i.Target)} to simple bloat in her {PreyLocStrings.ToSyn(PreyLocation.stomach)}. Her grin grows a little wider as her gaze settles on her onlooker, who feels somewhat unsettled now.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> blushes as <b>{i.Target.Name}</b> is {GetRandomStringFrom("eaten", "devoured", "vored", "gobbled up", "swallowed", "gulped down", "slurped down", "wolfed down", "consumed", "ingested")}. The sight of Abakhanskya glutting down a whole {GetRaceDescSingl(i.Target)} like they were nothing makes their knees feel weak.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"Some of <b>{AttractedWarrior(i.Unit).Name}'s</b> composure is lost, their focus stolen away by <b>{i.Unit.Name}</b> {GetRandomStringFrom("eating", "devouring", "voring", "gobbling up", "swallowing", "gulping down", "slurped down", "wolfing down", "consuming", "ingesting")} <b>{i.Target.Name}</b> like a simple snack.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"After <b>{i.Unit.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "lazily", "leisurely", "languidly", "easily", "apathetically", "idly", "languorously", "effortlessly")} {GetRandomStringFrom("ate", "devoured", "vored", "gobbled up", "swallowed", "gulped down", "slurped down", "wolfed down", "consumed", "ingested")} <b>{i.Target.Name}</b> as if the {GetRaceDescSingl(i.Target)} were a quick ration, <b>{AttractedWarrior(i.Unit).Name}</b> tries to compliment her eating skills.  The dragoness smirks back playfully... Or was it dangerously?",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sighs and regains comfort after dropping <b>{i.Target.Name}</b> down her gullet. <b>{AttractedWarrior(i.Unit).Name}</b> stares at how casually the dragoness enjoys her food on an active battlefield.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> has a great view of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> ass getting locked away behind <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> jaws.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"A disgusting belch erupts from <b>{i.Unit.Name}</b> after {GetRandomStringFrom("eating", "devouring", "voring", "gobbling up", "swallowing", "gulping down", "slurped down", "wolfing down", "consuming", "ingesting")} <b>{i.Target.Name}</b>.  <b>{AttractedWarrior(i.Unit).Name}'s</b> eyes can't leave the dragoness's beautiful form.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => CanBurp(s) && ReqOSWStomach(s)),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> says they'd love to grope at that wobbling {PreyLocStrings.ToSyn(PreyLocation.stomach)} <b>{i.Unit.Name}</b> has. The dragoness naught but beckons them over with a gesture of her mighty talon.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> gaze falls on a stunned <b>{AttractedWarrior(i.Unit).Name}</b>, who is in awkward awe at the sight of the dragoness {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "lazily", "leisurely", "languidly", "easily", "apathetically", "idly", "languorously", "effortlessly")} feasting on <b>{i.Target.Name}</b>.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> scream can be heard getting cut off by a trite swallow.  <b>{AttractedWarrior(i.Unit).Name}</b> feels weird seeing the sight of <b>{i.Unit.Name}</b> locking them away.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> disappears <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> gullet. <b>{AttractedWarrior(i.Unit).Name}</b> absentmindedly steps closer, wanting to really look at all that flesh squirm – until they remember they're on a battlefield.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"The casual gluttony of <b>{i.Unit.Name}</b> makes <b>{AttractedWarrior(i.Unit).Name}</b> squirm in place. They almost wish they were <b>{i.Target.Name}</b>. Almost. ",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} a helpless <b>{i.Target.Name}</b> with a wet gulp. <b>{AttractedWarrior(i.Unit).Name}</b> mutters something about wishing to be in <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> position.  Abakhanskya's ears flick and she smirks over at them and they awkwardly stutter, blush and hush.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => ReqOSWStomach(s)),
            //Aba Swallows Experinced Warriors    
            new EventString((i) => $"The prey-padded frame of <b>{i.Target.Name}</b> is too juicy for <b>{i.Unit.Name}</b> to pass up on. They are worked down her gullet without a second thought.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => PreyIsVeteranPred(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> smacks her chops before stuffing in <b>{i.Target.Name}</b>, after which she looses a rolling belch of appreciation. All of the prey that disappeared into <b>{i.Target.Name}</b> in the past definitely enhanced {GPPHis(i.Target)} flavor~",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => PreyIsVeteranPred(s) && CanBurp(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> screams out in horror as {GPPHis(i.Target)} nightmare is realised: They finally become someone <i>else's</i> food! <b>{i.Unit.Name}</b> smirks and shuts them away with a wet gulp.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => PreyIsVeteranPred(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> couldn't elude <b>{i.Unit.Name}</b> forever. The greedy dragoness snags her seasoned meal and pushes {GPPHim(i.Target)} into her maw, {GPPHis(i.Target)} screams harmonize with her hums of delight, the she swallows.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => PreyIsVeteranPred(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> finally cries out for help, admitting they're outmatched. It's too late though. <b>{i.Unit.Name}</b> seals them down with a swallow.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => PreyIsVeteranPred(s)),
            //Aba Vs. Leaders
            new EventString((i) => $"<b>{i.Unit.Name}</b> feels a joy, knowing that <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> will be joining the rest of their military might inside the dragoness' {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> squirms and screams for help from their soldiers as <b>{i.Unit.Name}</b> engulfs them whole, disappearing down her {GetRandomStringFrom("slick", "wet", "slimy", "drooling", "warm", "hot", "humid", "snug", "hungry", "meat-hungry", "slippery")} {GetRandomStringFrom("esophagus", "throat", "gullet", "maw")}.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"The charisma and leadership of <b>{i.Target.Name}</b> is nothing next to the hunger of the <b>{i.Unit.Name}</b>. <i>*GULP!*</i>",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> chuckles as the screams of another leader finds their way into her {GetRandomStringFrom("groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. How many is that now? Ten? <i>Twenty?</i>",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> tries surrendering to save their own skin. They soon realise the Matron is not taking prisoners today, but she is looking for some high-class dining.  After the squirming leader slides past her lips, <b>{i.Unit.Name}</b> slurps her tongue across them to savor the taste.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"The soldiers of <b>{i.Target.Name}</b> will be horrified to know that their commander has become <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> latest snack.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"The soldiers of <b>{i.Target.Name}</b> will be horrified to know that their commander has become <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> latest snack.  And likely her next bowel movement.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => TargetLeader(s) && TargetHumanoid(s) && Scat(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> tries to bargain, strike a deal, anything to save {GPPHis(i.Target)} high-class self from ending up as dragon chow.  But <b>{i.Unit.Name}</b> does not listen.  {GPPHe(i.Target)} is {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "lazily", "leisurely", "languidly", "easily", "apathetically", "idly", "languorously", "effortlessly", "unceremoniously")} eaten alive like a snack, disappearing down her {GetRandomStringFrom("slick", "wet", "slimy", "drooling", "warm", "hot", "humid", "snug", "hungry", "meat-hungry", "slippery")} {GetRandomStringFrom("esophagus", "throat", "gullet", "maw")}and likely never to be seen again.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> tries to bargain, strike a deal, anything to save {GPPHis(i.Target)} high-class self from ending up as dragon chow.  But <b>{i.Unit.Name}</b> does not listen.  {GPPHe(i.Target)} is {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "lazily", "leisurely", "languidly", "easily", "apathetically", "idly", "languorously", "effortlessly", "unceremoniously")} eaten alive like a snack, disappearing down her {GetRandomStringFrom("slick", "wet", "slimy", "drooling", "warm", "hot", "humid", "snug", "hungry", "meat-hungry", "slippery")} {GetRandomStringFrom("esophagus", "throat", "gullet", "maw")}and likely never to be seen again.  Well... So long as a {PreyLocStrings.ScatAdjSyn()} pile of khatunlao {PreyLocStrings.ScatSyn()} doesn't count, anyway.",
            actorRace: Race.Abakhanskya, priority: 12, conditional: s => TargetLeader(s) && TargetHumanoid(s) && Scat(s)),
            
            

            //Feit Pred
            new EventString((i) => $"<b>{i.Unit.Name}</b> chomps down and swallows <b>{i.Target.Name}</b> in one smooth gulp, the raptor growling eagerly for more as her prey slips into her {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Feit, priority: 12),
            new EventString((i) => $"[Feit] {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} <b>{i.Target.Name}</b> with a long sucking sound, squeezing them down her {GetRandomStringFrom("slick", "wet", "slimy", "drooling", "warm", "hot", "humid", "snug", "hungry", "meat-hungry", "slippery")} {GetRandomStringFrom("gullet", "throat", "esophagus", "gob")} as a {GetRandomStringFrom("quivering", "quavering", "shifting", "trembling", "wobbling", "wiggling", "wriggling", "squirming", "thrashing", "curvaceous", "lumpy", "hefty")} bulge in her long, feathery neck.",
            actorRace: Race.Feit, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b> is ambushed by the large {GetRaceDescSingl(i.Unit)} and is unable to do much to resist being engulfed whole by <b>{i.Unit.Name}</b>'s {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slippery", "slimy", "dripping", "drooling", "steamy", "eager")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance", "teeth", "tongue")} squeezing them into her {GetRandomStringFrom("groaning", "starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "acid-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} with haste!",
            actorRace: Race.Feit, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}'s</b> dark blue {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} pulls in <b>{i.Target.Name}</b>, her long tongue helping wrangle them down her {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slippery", "slimy", "eager")} throat!",
            actorRace: Race.Feit, priority: 12),
            new EventString((i) => $"<b>{i.Target.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "lazily", "leisurely", "languidly", "easily", "apathetically", "idly", "languorously", "effortlessly")} {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down on", "slurps up", "slurps down", "munches down", "consumes")} <b>{i.Unit.Name}</b>, swallowing them in a single effortless bite!",
            conditional: s => SizeDiff(s, 2), actorRace: Race.Feit, priority: 12),
            new EventString((i) => {
                if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.PreyCount > 3)
                    return $"<b>{i.Unit.Name}</b> curls her tongue around the screaming <b>{i.Target.Name}</b> and gulps them down, joining the multiple others already trapped in her {PreyLocStrings.BellyStuffedAdjSyn()}, {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!";
                else if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.AlivePrey > 3)
                    return $"<b>{i.Unit.Name}</b> curls her tongue around the screaming <b>{i.Target.Name}</b> and opens her {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "drooling", "steamy", "hungry")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} wide, which allows the screams from her {PreyLocStrings.ToSyn(PreyLocation.stomach)}'s multiple current occupants to echo up her throat.  After enjoying the grim harmony for a moment, she chomps down <b>{i.Target.Name}</b> and sends him to join the other unlucky prey already trapped in her {PreyLocStrings.BellyStuffedAdjSyn()}, {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!";
                else if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.PreyCount > 1)
                    return $"<b>{i.Unit.Name}</b> curls her tongue around the screaming <b>{i.Target.Name}</b> and gulps them down, joining the other unlucky prey already trapped in her {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!";
                else if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.AlivePrey > 1)
                    return $"<b>{i.Unit.Name}</b> curls her tongue around the screaming <b>{i.Target.Name}</b> and opens her {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "drooling", "steamy", "hungry")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} wide, which allows the screams from her {PreyLocStrings.ToSyn(PreyLocation.stomach)}'s current occupant to rumble up her throat.  After enjoying the grim harmony for a moment, she chomps down <b>{i.Target.Name}</b> and sends him to join the other unlucky prey already trapped in her {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!";
                else if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.PreyCount == 0)
                    return $"<b>{i.Unit.Name}</b> curls her tongue around the screaming <b>{i.Target.Name}</b> and opens her {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "drooling", "steamy", "hungry")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} wide, letting {GPPHim(i.Target)} hear the {GetRandomStringFrom("groaning", "grumbling", "growling", "rumbling", "bubbling", "boiling", "churning", "sloshing")} coming from her {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "empty", "uninhabited", "deadly", "predatory", "life-ending", "fatal", "powerful", "sweltering")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, before chomping down and sending them to meet their {PreyLocStrings.AcidicDeadlySyn()} {GetRandomStringFrom("fate", "doom", "end", "grave", "death")}.";
                else return $"<b>{i.Unit.Name}</b> curls her tongue around the screaming <b>{i.Target.Name}</b> and opens her {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "drooling", "steamy", "hungry")} {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} wide, letting {GPPHim(i.Target)} hear the {GetRandomStringFrom("groaning", "grumbling", "growling", "rumbling", "bubbling", "boiling", "churning", "sloshing")} of her {PreyLocStrings.ToSyn(PreyLocation.stomach)} working to diligently to {PreyLocStrings.DigestVerbSyn()} the doomed prey within, then sends the {GetRaceDescSingl(i.Target)} in for a closer look.";
                },
            actorRace: Race.Feit, priority: 10),
            new EventString((i) => {
                if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.PreyCount > 1)
                    return $"<b>{i.Unit.Name}</b> ravenously pushes her {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "drooling", "steamy", "hungry")} {GetRandomStringFrom("jaws", "maw", "muzzle")} down over poor <b>{i.Target.Name}</b>, sending {GPPHim(i.Target)} squelching down her feathered neck and into her already {PreyLocStrings.BellyStuffedAdjSyn()}, {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!";
                else if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.PreyCount == 0)
                    return $"<b>{i.Unit.Name}</b> ravenously pushes her {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "drooling", "steamy", "hungry")} {GetRandomStringFrom("jaws", "maw", "muzzle")} down over poor <b>{i.Target.Name}</b>, sending {GPPHim(i.Target)} squelching down her feathered neck and into her {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "empty", "uninhabited", "deadly", "predatory", "life-ending", "fatal", "powerful", "sweltering")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!";
                else return $"<b>{i.Unit.Name}</b> ravenously pushes her {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "drooling", "steamy", "hungry")} {GetRandomStringFrom("jaws", "maw", "muzzle")} down over poor <b>{i.Target.Name}</b>, sending {GPPHim(i.Target)} squelching down her feathered neck and into her {GetRandomStringFrom("starving", "hungry", "hungering", "ravenous", "voracious", "peckish", "munchy", "famished", "rapacious", "avaricious", "greedy", "gluttonous", "covetous", "deadly", "predatory", "life-ending", "fatal", "powerful", "sweltering")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!";
                },
            actorRace: Race.Feit, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but to tell <b>{i.Target.Name}</b> she'll enjoy {GetRandomStringFrom("expelling them", "evicting them", "squeezing them out", "pushing them out", "disposing of them", "crapping them out", "dumping them", "shitting them out")} later, once she's grown nice and big from stealing their size and nutrients.",
            actorRace: Race.Feit, priority: 12, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> resists the urge to snicker as she {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} the dragon <b>{i.Target.Name}</b>, the immense beast pleasantly swelling her body on their way into her {PreyLocStrings.AcidicDeadlySyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Feit, targetRace: Race.Dragon, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> resists the urge to snicker as she {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} the dragon <b>{i.Target.Name}</b>, the immense beast pleasantly swelling her body on their way into her {PreyLocStrings.AcidicDeadlySyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Feit, targetRace: Race.EasternDragon, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> resists the urge to snicker as she {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} the dragon <b>{i.Target.Name}</b>, the immense beast pleasantly swelling her body on their way into her {PreyLocStrings.AcidicDeadlySyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Feit, targetRace: Race.Selicia, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> resists the urge to snicker as she {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} the dragon <b>{i.Target.Name}</b>, the immense beast pleasantly swelling her body on their way into her {PreyLocStrings.AcidicDeadlySyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Feit, targetRace: Race.Abakhanskya, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> resists the urge to snicker as she {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} the dragon <b>{i.Target.Name}</b>, the immense beast pleasantly swelling her body on their way into her {PreyLocStrings.AcidicDeadlySyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Feit, targetRace: Race.Cierihaka, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> resists the urge to snicker as she {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} the wyvern <b>{i.Target.Name}</b>, the immense beast pleasantly swelling her body on their way into her {PreyLocStrings.AcidicDeadlySyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Feit, targetRace: Race.Wyvern, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> resists the urge to snicker as she {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} the wyvern <b>{i.Target.Name}</b>, the immense beast pleasantly swelling her body on their way into her {PreyLocStrings.AcidicDeadlySyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Feit, targetRace: Race.WyvernMatron, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> resists the urge to snicker as she {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} the wyvern <b>{i.Target.Name}</b>, the immense beast pleasantly swelling her body on their way into her {PreyLocStrings.AcidicDeadlySyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Feit, targetRace: Race.Scorch, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b> resists the urge to snicker as she {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} the wyvern <b>{i.Target.Name}</b>, the immense beast pleasantly swelling her body on their way into her {PreyLocStrings.AcidicDeadlySyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Feit, targetRace: Race.Zera, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s tongue curls around the tail of <b>{i.Target.Name}</b>, {GetRandomStringFrom("eating", "devouring", "voring", "gobbling down", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming")} the heavy beast with {GetRandomStringFrom("gusto", "fervor", "enthusiasm", "a ravenous hunger", "surprising speed", "a flourish of skill")}!",
            actorRace: Race.Feit, targetRace: Race.EasternDragon, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s tongue curls around the tail of <b>{i.Target.Name}</b>, {GetRandomStringFrom("eating", "devouring", "voring", "gobbling down", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming")} the heavy beast with {GetRandomStringFrom("gusto", "fervor", "enthusiasm", "a ravenous hunger", "surprising speed", "a flourish of skill")}!",
            actorRace: Race.Feit, targetRace: Race.FeralOrcas, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s tongue curls around the tail of <b>{i.Target.Name}</b>, {GetRandomStringFrom("eating", "devouring", "voring", "gobbling down", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming")} the heavy beast with {GetRandomStringFrom("gusto", "fervor", "enthusiasm", "a ravenous hunger", "surprising speed", "a flourish of skill")}!",
            actorRace: Race.Feit, targetRace: Race.FeralSharks, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s tongue curls around the tail of <b>{i.Target.Name}</b>, {GetRandomStringFrom("eating", "devouring", "voring", "gobbling down", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming")} the heavy beast with {GetRandomStringFrom("gusto", "fervor", "enthusiasm", "a ravenous hunger", "surprising speed", "a flourish of skill")}!",
            actorRace: Race.Feit, targetRace: Race.Gryphons, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s tongue curls around the tail of <b>{i.Target.Name}</b>, {GetRandomStringFrom("eating", "devouring", "voring", "gobbling down", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming")} the heavy beast with {GetRandomStringFrom("gusto", "fervor", "enthusiasm", "a ravenous hunger", "surprising speed", "a flourish of skill")}!",
            actorRace: Race.Feit, targetRace: Race.FeralLions, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s tongue curls around the tail of <b>{i.Target.Name}</b>, {GetRandomStringFrom("eating", "devouring", "voring", "gobbling down", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming")} the heavy beast with {GetRandomStringFrom("gusto", "fervor", "enthusiasm", "a ravenous hunger", "surprising speed", "a flourish of skill")}!",
            actorRace: Race.Feit, targetRace: Race.Wyvern, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s tongue curls around the tail of <b>{i.Target.Name}</b>, {GetRandomStringFrom("eating", "devouring", "voring", "gobbling down", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming")} the heavy beast with {GetRandomStringFrom("gusto", "fervor", "enthusiasm", "a ravenous hunger", "surprising speed", "a flourish of skill")}!",
            actorRace: Race.Feit, targetRace: Race.WyvernMatron, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s tongue curls around the tail of <b>{i.Target.Name}</b>, {GetRandomStringFrom("eating", "devouring", "voring", "gobbling down", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming")} the heavy beast with {GetRandomStringFrom("gusto", "fervor", "enthusiasm", "a ravenous hunger", "surprising speed", "a flourish of skill")}!",
            actorRace: Race.Feit, targetRace: Race.Scorch, priority: 12),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s tongue curls around the tail of <b>{i.Target.Name}</b>, {GetRandomStringFrom("eating", "devouring", "voring", "gobbling down", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming")} the heavy beast with {GetRandomStringFrom("gusto", "fervor", "enthusiasm", "a ravenous hunger", "surprising speed", "a flourish of skill")}!",
            actorRace: Race.Feit, targetRace: Race.Zera, priority: 12), 
            //Feit Prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "slurps up", "slurps down", "munches down", "consumes")} the elusive {GetRaceDescSingl(i.Target)} <b>{i.Target.Name}</b>, who is in utter dibelief at this turn of events!",
            targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> screeches as {GPPHe(i.Target)} tumbles into the {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "drooling", "steamy", "hungry")} {GetRandomStringFrom("jaws", "maw", "muzzle")} of <b>{i.Unit.Name}</b>, slipping down {GPPHis(i.Unit)} {GetRandomStringFrom("gullet", "throat", "esophagus", "gob")} and {GetRandomStringFrom("landing in", "curling up inside", "splashing into", "falling tail-first into", "rolling into")} {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}'s</b> spree is {GetRandomStringFrom("in jeopardy", "in trouble", "at risk")} as <b>{i.Unit.Name}> {GetRandomStringFrom("eats up", "devours", "swallows down", "swallows up", "gobbles up", "gobbles down", "gulps down", "wolfs down", "chomps down", "schlurps up", "slurps down", "munches down", "consumes")} the {GetRaceDescSingl(i.Target)}, trapping {GPPHim(i.Target)} in {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> chomps down and swallows <b>{i.Target.Name}</b> easily, the {GetRaceDescSingl(i.Target)} clearly out of her league in this dragon fight!  She {GetRandomStringFrom("sinks down", "slides down", "slips down", "slithers down", "pours down")} into the {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "steamy", "hungry")} pit of the scaled {PreyLocStrings.ToSyn(PreyLocation.stomach)}...",
            actorRace: Race.Dragon, targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> chomps down and swallows <b>{i.Target.Name}</b> easily, the {GetRaceDescSingl(i.Target)} clearly out of her league in this dragon fight!  She {GetRandomStringFrom("sinks down", "slides down", "slips down", "slithers down", "pours down")} into the {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "steamy", "hungry")} pit of the scaled {PreyLocStrings.ToSyn(PreyLocation.stomach)}...",
            actorRace: Race.EasternDragon, targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> chomps down and swallows <b>{i.Target.Name}</b> easily, the {GetRaceDescSingl(i.Target)} clearly out of her league in this dragon fight!  She {GetRandomStringFrom("sinks down", "slides down", "slips down", "slithers down", "pours down")} into the {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "steamy", "hungry")} pit of the scaled {PreyLocStrings.ToSyn(PreyLocation.stomach)}...",
            actorRace: Race.Selicia, targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> chomps down and swallows <b>{i.Target.Name}</b> easily, the {GetRaceDescSingl(i.Target)} clearly out of her league in this dragon fight!  She {GetRandomStringFrom("sinks down", "slides down", "slips down", "slithers down", "pours down")} into the {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "steamy", "hungry")} pit of the scaled {PreyLocStrings.ToSyn(PreyLocation.stomach)}...",
            actorRace: Race.Abakhanskya, targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> chomps down and swallows <b>{i.Target.Name}</b> easily, the {GetRaceDescSingl(i.Target)} clearly out of her league in this dragon fight!  She {GetRandomStringFrom("sinks down", "slides down", "slips down", "slithers down", "pours down")} into the {GetRandomStringFrom("hot", "humid", "moist", "slick", "wet", "slimy", "steamy", "hungry")} pit of the scaled {PreyLocStrings.ToSyn(PreyLocation.stomach)}...",
            actorRace: Race.Cierihaka, targetRace: Race.Feit, priority: 11),
            //RwuMercenary Swallow
            new EventString((i) => $"\"I <i>AM</i> getting a pay bonus for eating them, right?\" <b>{i.Unit.Name}</b> asks after sending <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            actorRace: Race.RwuMercenaries, priority: 11),
            new EventString((i) => $"\"In training they said to just go for the kill but, orders are orders.\" <b>{i.Unit.Name}</b> says as {GPPHe(i.Unit)} grabs <b>{i.Target.Name}</b> and sends {GPPHim(i.Target)} into {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            actorRace: Race.RwuMercenaries, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs and {GetRandomStringFrom("eats", "devours", "swallows", "gulps down", "wolfs down", "vores")} <b>{i.Target.Name}</b> then radios in, \"<b>{i.Unit.Name}</b> reporting, target successfully {GetRandomStringFrom("eaten", "swallowed", "vored", "captured")}!\"",
            actorRace: Race.RwuMercenaries, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs and {GetRandomStringFrom("eats", "devours", "swallows", "gulps down", "wolfs down", "vores")} their rival mercenary, <b>{i.Target.Name}</b>. \"Ha, I got you now {GetGenderString(i.Target, "sister", "brother", "comrade")}! Guess we know who the better soldier is now!\" <b>{i.Unit.Name}</b> says triumphantly.",
            actorRace: Race.RwuMercenaries, targetRace: Race.RwuMercenaries, priority: 11),
        };

        RandomDigestionMessages = new List<EventString>()
        {
            //Slime Pred
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> struggles can be clearly seen inside <b>{i.Unit.Name}</b>’ transparent {i.preyLocation.ToSyn()}.",
            actorRace: Race.Slimes, priority: 10),
            new EventString((i) => $"<b>{i.Target.Name}</b> is suspended inside <b>{i.Unit.Name}</b>, barely able to move.",
            actorRace: Race.Slimes, priority: 10),
            //Slime Prey
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} is fizzing with the angry slime.",
            targetRace: Race.Slimes, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} is emitting bubbling noises.",
            targetRace: Race.Slimes, priority: 9),
            new EventString((i) => $"\"You know,\" <b>{i.Unit.Name}</b> says to {GetRandomStringFrom($"<b>{i.Target.Name}</b>", $"{GPPHis(i.Target)} {PreyLocStrings.ToBreastSynPlural()}")} \"given your amorphous nature, being fat on my {PreyLocStrings.ToBreastSynPlural()} is probably the most solid you've ever been.\"",
            targetRace: Race.Slimes, priority: 9, conditional: s => CleaveageVore(s)),
            //Aabayx exclusive creds to Cartography!
            new EventString((i) => $"The unique viral digestion of the Aabayx is taking a toll on <b>{i.Target.Name}</b>, as viruses increasingly infecting more of {GPPHis(i.Target)} body.",
            actorRace: Race.Aabayx, priority: 9),
            new EventString((i) => $"The chemical signals used by <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach are tricking the viral matrix that forms <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body to willingly dissasemble.",
            actorRace: Race.Aabayx, targetRace: Race.Aabayx, priority: 10),
            //Vagrant Pred
            new EventString((i) => $"<b>{i.Target.Name}</b> struggles within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> semi-translucent {i.preyLocation.ToSyn()}.",
            actorRace: Race.Vagrants, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} wiggles and wobbles with <b>{i.Target.Name}</b> struggling inside.",
            actorRace: Race.Vagrants, priority: 9),

            //Anyrace Scat
            new EventString((i) => $"<b>{i.Target.Name}</b> struggles inside <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}, trying {GPPHis(i.Unit)} {GetRandomStringFrom("best", "hardest", "damndest")} to avoid becoming fresh {PreyLocStrings.ScatSyn()}.",
            priority: 8, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> daydreams of taking a nice, big {GetRandomStringFrom("shit", "crap", "dump")}. {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} gurgles ominously with prey that still has a long way to go before that happens.",
            priority: 8, conditional: Scat),

            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} gurgles louder, slathering <b>{i.Target.Name}</b> in digestive juices.",
            priority: 8, conditional: HardVoreInStomach),

            new EventString((i) => $"<b>{i.Unit.Name}</b> moans, and massages {GPPHis(i.Unit)} full {i.preyLocation.ToSyn()}.",
            priority: 8),

            //Deer Pred
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out an adorable bleat as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> efforts massage the doe's innards, {GPPHe(i.Unit)} blush{EsIfSingular(i.Unit)} with embarrassment and place{SIfSingular(i.Unit)} a hand against {GPPHis(i.Unit)} furry {PreyLocStrings.ToSyn(PreyLocation.stomach)} to try and settle {GPPHis(i.Unit)} meal down. But {GPPHe(i.Unit)} secretly hopes {GPPHe(i.Target)} keep{SIfSingular(i.Target)} going.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"After a powerful kick that sends <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> swollen {PreyLocStrings.ToSyn(PreyLocation.stomach)} wobbling, the deer tries to console {GPPHis(i.Unit)} unwilling meal. {GPPHe(i.Unit)} tell{SIfSingular(i.Unit)} <b>{i.Target.Name}</b> how brave {GPPHe(i.Target)} {IsAre(i.Target)} for enduring digestion, but ask{SIfSingular(i.Unit)} {GPPHis(i.Unit)} dinner for some sympathy since {GPPHe(i.Unit)} normally eat{SIfSingular(i.Unit)} only veggies! Rudely, the faun's belly prisoner keeps thrashing about!",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> fluffy {PreyLocStrings.ToSyn(PreyLocation.stomach)} wobbles and jiggles as {GPPHis(i.Unit)} meal fights to escape. While {GPPHe(i.Unit)} put{SIfSingular(i.Unit)} on airs that keeping {GPPHis(i.Unit)} meal down is unappealing, {GPPHe(i.Unit)} secretly can't wait to stuff another hapless fool down {GPPHis(i.Unit)} {GetRandomStringFrom("gullet", "throat", "esophagus", "gob")}!",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> burps and causes <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> flavor to linger on {GPPHis(i.Unit)} tongue once more. The cervid predator licks {GPPHis(i.Unit)} lips, wishing {GPPHe(i.Unit)} could eat {GPPHis(i.Unit)} still-living meal a second time!",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> asks <b>{i.Target.Name}</b> if there's anything {GPPHe(i.Unit)} can do to make {GPPHis(i.Target)} stay in {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} any more comfortable. {GPPHe(i.Target)} angrily tell{SIfSingular(i.Unit)} {GPPHim(i.Unit)} to let them go, which {GPPHe(i.Unit)} den{IesIfSingular(i.Unit)} with a heartfelt apology.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> really wishes {GPPHe(i.Unit)} were a meat-eater as <b>{i.Target.Name}</b> continues thrashing about within {GPPHim(i.Unit)}. The satyr's fur covered {PreyLocStrings.ToSyn(PreyLocation.stomach)} sways side-to-side as {GPPHe(i.Unit)} just wish{EsIfSingular(i.Unit)} the task of {GetRandomStringFrom("digesting", "gurgling", "churning", "melting")} {GPPHim(i.Target)} would end sooner rather than later.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"No matter how much {GPPHe(i.Unit)} train{SIfSingular(i.Unit)} in stretching {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, <b>{i.Unit.Name}</b> just can't get used to the feeling of a living meal. As a faun, {GPPHe(i.Unit)} would much rather have a {GetRandomStringFrom("belly", "stomach", "gut", "midsection", "tummy", "fuel tank")} full of leaves and acorns than a {GetRaceDescSingl(i.Target)}.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> cloven hooves sink into the mud as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> weight settles in {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The cervid struggles to move through the muck as {GPPHis(i.Unit)} meal fights within {GPPHim(i.Unit)}.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("belly lets", "stomach lets", "gut lets", "guts let", "midsection lets", "tummy lets", "depths let", "innards let", "insides let", "abdomen lets")} out an angry gurgle of indigestion as the herbivore's digestive system tries to break down the {GetRaceDescSingl(i.Target)} warrior. The faun reaches down patting the top of {GPPHis(i.Unit)} engorged {GetRandomStringFrom("belly", "stomach", "gut", "midsection", "tummy", "flesh prison", "fuel tank")} while apologizing both to {GPPHis(i.Unit)} poor {GetRandomStringFrom("belly", "stomach", "gut", "midsection", "tummy")} and the meal it's trying to {GetRandomStringFrom("digest", "gurgle", "churn", "dissolve", "liquify", "melt", "absorb", "break down")}.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"Digesting meat, especially still living meat, proves difficult for <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> overworked {PreyLocStrings.ToSyn(PreyLocation.stomach)}. Thankfully, {GPPHe(i.Unit)} got a digestive aid from the village herbalist before leaving. Gulping down the aid, {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} settles somewhat.",
            actorRace: Race.Deer, priority: 9),

            //Deer attracted warrior with friendly prey attempt?
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> asks <b>{i.Unit.Name}</b> if {GPPHe(i.Unit)} know{SIfSingular(i.Unit)} where <b>{i.Target.Name}</b> has gone. As {GPPHis(i.Unit)} {GetRandomStringFrom("groaning", "growling", "rumbling", "voracious", "gluttonous", "prey-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} wobbles with purpose, the guilty faun acts like {GPPHe(i.Unit)} {HasHave(i.Unit)} no idea.",
            actorRace: Race.Deer, priority: 8, conditional: s => ReqOSWStomach(s) && Friendly(s)),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> demands that <b>{i.Unit.Name}</b> let <b>{i.Target.Name}</b> out of {GPPHis(i.Unit)} {GetRandomStringFrom("groaning", "growling", "rumbling", "voracious", "gluttonous", "prey-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The {GetRaceDescSingl(i.Unit)} plays stupid, saying {GPPHe(i.Unit)} just ate a bunch of acorns. Blushing, {GPPHe(i.Unit)} then says if {GPPHe(i.Target)} want{SIfSingular(i.Unit)} to check, {GPPHeIsAbbr(i.Target)} always welcome to feel {GPPHim(i.Unit)} up.",
            actorRace: Race.Deer, priority: 8, conditional: s => ReqOSWStomach(s) && Friendly(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> knows that with <b>{i.Target.Name}</b> out of the way, <b>{AttractedWarrior(i.Unit).Name}</b> will rut with {GPPHim(i.Unit)} sooner or later.",
            actorRace: Race.Deer, priority: 8, conditional: s => ReqOSWStomach(s) && Friendly(s)),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> watches as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} bulges and wobbles after having {GetRandomStringFrom("eaten", "devoured", "vored", "gobbled", "swallowed", "gulped", "slurped", "wolfed")} <b>{i.Target.Name}</b>. {Capitalize(GPPHe(i.Unit))} ask{SIfSingular(i.Unit)} why {GPPHe(i.Unit)} ate their comrade and {GPPHe(i.Unit)} say{SIfSingular(i.Unit)} that {GPPHeIsAbbr(i.Unit)} doing {GPPHis(i.Unit)} part to make sure the deer population stays in check.",
            actorRace: Race.Deer, targetRace: Race.Deer, priority: 8, conditional:s => ReqOSWStomach(s) && Friendly(s)),

			//Deer prey
            new EventString((i) => $"<b>{i.Target.Name}</b> bleats pitifully as the {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "acidic", "grim", "predatory")} fluids within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} soak into {GPPHis(i.Target)} fur.",
            targetRace: Race.Deer, priority: 9),
            new EventString((i) => $"The knowledge that being eaten is the natural state of things for a {GetRaceDescSingl(i.Target)} comforts <b>{i.Target.Name}</b> very little as <b>{i.Unit.Name}</b> arrogantly pats {GPPHis(i.Unit)} {GetRandomStringFrom("groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "gluttonous", "acid-filled")} {GetRaceDescSingl(i.Unit)}-filled {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            targetRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRaceDescSingl(i.Target)} legs are forcefully pressed against {GPPHis(i.Target)} chest as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach muscles keep {GPPHim(i.Target)} pinned.",
            targetRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> feels an immense satisfaction at putting <b>{i.Target.Name}</b> in {GPPHis(i.Target)} rightful place. That place being {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            targetRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> always loved venison, and with <b>{i.Target.Name}</b> trapped in {GPPHis(i.Unit)} {GetRandomStringFrom("groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "gluttonous", "acid-filled", "hot", "humid", "slick", "sloppy", "wet", "slimy", "sopping", "steamy", "eager", "rapacious", "avaricious", "greedy", "covetous", "demanding", "eager", "insatiate")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, {GPPHeIs(i.Unit)} absolutely stuffed with it!",
            targetRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> struggles hard against <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "gluttonous", "melty", "acidic", "caustic", "hot", "humid", "moist", "slick", "sloppy", "wet", "slimy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The outline of cloven hooves press can be seen as {GPPHe(i.Target)} fight{SIfSingular(i.Target)} to get free!",
            targetRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is doing {GPPHis(i.Unit)} part in keeping the deer population down as <b>{i.Target.Name}</b> struggles to make it to another rutting season.",
            targetRace: Race.Deer, priority: 9),

            new EventString((i) => $"<b>{i.Target.Name}</b> explains that this isn’t how it’s supposed to work. <b>{i.Unit.Name}</b> stretches and purrs.",
            actorRace: Race.Cats, targetRace: Race.Dogs, priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> scratches the stomach walls. <b>{i.Unit.Name}</b> begins thumping {GPPHis(i.Unit)} leg.",
            actorRace: Race.Dogs, targetRace: Race.Cats, priority: 8),

            new EventString((i) => $"<b>{i.Unit.Name}</b> cries aloud as {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} angrily rumble{PluralForPart(i.preyLocation)} as it {GetRandomStringFrom("digests", "gurgles", "churns", "dissolves", "liquifies", "melts", "breaks down")} its first large meal.",
            priority: 8, conditional: FirstTime),

            //Panther pred 
            new EventString((i) => $"<b>{i.Unit.Name}</b> doesn’t even seem to notice <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> desperate struggles, only acknowledging the fight transpiring within {GPPHim(i.Unit)} with a short burp as {GPPHis(i.Unit)} meal jostles {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} side-to-side.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> pats {GPPHis(i.Unit)} distended {PreyLocStrings.ToSyn(PreyLocation.stomach)} gently and softly speaks, \"Though you will soon die, worry not. Our spirits will become as one soon enough.\"",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"A fierce attempt to escape the sweltering {PreyLocStrings.ToSyn(PreyLocation.stomach)} {GetRandomStringFrom("digesting", "gurgling", "churning", "dissolving", "liquifying", "melting")} {GPPHim(i.Target)} almost succeeds as <b>{i.Target.Name}</b> gets an arm up into the mouth. {Capitalize(GPPHis(i.Target))} hope is dashed however as <b>{i.Unit.Name}</b> clamps {GPPHis(i.Unit)} sharp fangs together, biting {GPPHis(i.Target)} hand and sending it reeling back into {GPPHis(i.Unit)} {GetRandomStringFrom("gullet", "throat", "esophagus")}.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"\"There is no escape from me,\" <b>{i.Unit.Name}</b> says, digging a clawed paw into {GPPHis(i.Unit)} massive abdomen. \"Your struggling only delays the inevitable... Come now, resign yourself.\"",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"\"Fighting a warrior like me was your first blunder,\" <b>{i.Unit.Name}</b> taunts {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} as it pulsates with fading life. \"Your second was entering my {GetRandomStringFrom("belly", "stomach", "gut", "midsection", "depths", "innards", "insides")}! But worry not, it won't be something you repeat!\"",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"\"Struggle less,\" <b>{i.Unit.Name}</b> chides {GPPHis(i.Unit)} prey as {GPPHe(i.Target)} attempt{SIfSingular(i.Target)} to break free. \"I don't want you hurting yourself! A clean digestion will make for better bone trophies!\"",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> purrs in satisfaction as <b>{i.Target.Name}</b> sloshes about within {GPPHim(i.Unit)}.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> chants a silent prayer to {GPPHis(i.Unit)} ancestors to keep {GPPHis(i.Unit)} rebellious meal within {GPPHim(i.Unit)} until {GPPHis(i.Unit)} {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "gluttonous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} can silence {GPPHim(i.Target)} for good.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> mewls pitifully as the superior cat's {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "gluttonous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} works {GPPHim(i.Target)} over, sloshing {GPPHim(i.Target)} back and forth. <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> muscled {PreyLocStrings.ToSyn(PreyLocation.stomach)} barely even shifts as the weak cat person stews within.",
            actorRace: Race.Panthers, targetRace: Race.Cats, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is forced to clench {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} tightly as <b>{i.Target.Name}</b> roars and thrashes about within {GPPHim(i.Unit)}. Vicious looking bulges jut out from {GPPHis(i.Unit)} gut as the tiger warrior within attempts to claw {GPPHimself(i.Unit)} out.",
            actorRace: Race.Panthers, targetRace: Race.Tigers, priority: 9),

            //Panther as prey to cat
            new EventString((i) => $"<b>{i.Target.Name}</b> roars, struggling inside <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "gluttonous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, not willing to submit to the inferior creature. <b>{i.Unit.Name}</b> mockingly repeats the roar, enjoying {GPPHis(i.Unit)} arrogant prey's struggles.",
            actorRace: Race.Cats, targetRace: Race.Panthers, priority: 9),
            
            //Cierihaka
            new EventString((i) => $"The huge steppe dragon looses a belch, little air being left for <b>{i.Target.Name}</b> within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 11, actorRace: Race.Cierihaka, conditional: InStomach),
            new EventString((i) => $"{GetRandomStringFrom("Casually", "Nonchalantly", "Lackadaisically", "Lazily", "Leisurely", "Languidly", "Passively", "Apathetically", "Idly", "Languorously", "Teasingly")} running a paw over her fed {PreyLocStrings.ToSyn(PreyLocation.stomach)}, <b>{i.Unit.Name}</b> hums as <b>{i.Target.Name}</b> {GetRandomStringFrom("digests", "gurgles away", "churns away", "dissolves", "liquifies", "melts away", "breaks down")}.",
            priority: 11, actorRace: Race.Cierihaka, conditional: InStomach),
            new EventString((i) => $"Her {GetRandomStringFrom("jaws", "maw", "mouth", "muzzle", "gob", "oral entrance")} {GetRandomStringFrom("drooling", "slobbering", "salivating", "dripping")} wildly, <b>{i.Unit.Name}</b> can't wait to {GetRandomStringFrom("eat", "devour", "gobble up", "swallow", "gulp down", "slurp up", "wolf down")} more like <b>{i.Target.Name}</b>!",
            priority: 11, actorRace: Race.Cierihaka, conditional: InStomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> moans in delight, feeling <b>{i.Target.Name}</b> {GetRandomStringFrom("digesting away", "gurgling away", "churning away", "dissolving away", "liquifying", "melting away", "breaking down")} within her {i.preyLocation.ToSyn()}, knowing it won't be long until {GPPHe(i.Target)}'d be but another layer on her frame.",
            priority: 11, actorRace: Race.Cierihaka),
            new EventString((i) => $"The {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "acidic", "caustic", "grim", "flesh-eating")} fluids closing in, <b>{i.Target.Name}</b> has to accept that {GPPHis(i.Target)} time will come to an end within {GetRandomStringFrom("a rapacious", "an avaricious", "a greedy", "a gluttonous", "a covetous", "a demanding", "an eager", "an insatiate", "an ever-hungry")} <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "steamy", "eager", "groaning", "gurgling", "churning", "melty", "acidic", "caustic", "predatory", "flesh-melting")} {i.preyLocation.ToSyn()}.",
            priority: 11, actorRace: Race.Cierihaka),

            //Orcas
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomachs are proving more than a match for <b>{i.Target.Name}</b>.",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> blubbery {PreyLocStrings.ToSyn(PreyLocation.stomach)} begins to shake less and less as <b>{i.Target.Name}</b> begins to {PreyLocStrings.DigestVerbSyn()}.",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> yelps as they begin to slip into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> third and final stomach, where return will be next to impossible!",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> snorts through {GPPHis(i.Unit)} blowhole, imagining the {PreyLocStrings.ScatAdjSyn()} mess <b>{i.Target.Name}</b> will make once {GPPHis(i.Unit)} gut is done with them...",
            actorRace: Race.FeralOrcas, priority: 9),

            new EventString((i) => $"<b>{i.Target.Name}</b> wriggles defiantly yet weakly inside <b>{i.Unit.Name}</b>'s {i.preyLocation.ToSyn()}, the {GetRaceDescSingl(i.Target)} unable to get {GPPHis(i.Target)} slick body out as one final rumbling rolls through <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> depths!",
            targetRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> never imagined <i>{GPPHe(i.Target)}</i> would be the one melting into blubber, but here {GPPHe(i.Target)} was, sizzling in the pit of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}!",
            targetRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} happily gurgles as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> thrashing begins to die down, the {GetRaceDescSingl(i.Unit)} fully ready to take such a massive beast as nutriment!",
            targetRace: Race.FeralOrcas, priority: 9),

            //Feit
            new EventString((i) => $"<b>{i.Unit.Name}'s</b> size-stealing {PreyLocStrings.ToSyn(PreyLocation.stomach)} readies to snuff out <b>{i.Target.Name}</b>, {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "gwoorgling", "bubbling")} intensifying ominously.",
            priority: 11, actorRace: Race.Feit),
            new EventString((i) => $"<b>{i.Target.Name}</b> presses {GPPHis(i.Target)} face out from within <b>{i.Unit.Name}'s</b> large {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.  The {GetRaceDescSingl(i.Unit)} watches her prey's plight with {GetRandomStringFrom("casual", "lazy", "mild")} {GetRandomStringFrom("interest", "disinterest", "intrigue", "fascination", "boredom", "apathy")}, before a loud churn sees {GPPHim(i.Target)} slowly sinking back inward and disappearing... {GPPHe(i.Target)} likely won't be seen again.",
            priority: 11, actorRace: Race.Feit),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out a long chrrrr of pleasure while on her way to eclipsing the trees in height, feeling her contracting gut about to conquer one more morsel.",
            priority: 11, actorRace: Race.Feit, conditional: s => SizeDiff(s, 2f)),
            new EventString((i) => $"The {GetRaceDescSingl(i.Unit)} would gently squeeze her arms around her {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, licking her chops as she feels the life force fading from the trapped <b>{i.Target.Name}</b>",
            priority: 11, actorRace: Race.Feit),
            new EventString((i) => $"<b>{i.Unit.Name}'s</b> bowels eagerly growl for <b>{i.Target.Name}</b>... ready to {GetRandomStringFrom("reduce them to", "churn them into", "melt them into", "make them into")} {GetRaceDescSingl(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}!",
            priority: 11, actorRace: Race.Feit, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> the {GetRaceDescSingl(i.Unit)} barely even registers as <b>{i.Target.Name}</b> nears {GPPHis(i.Target)} demise within her cavernous {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 11, actorRace: Race.Feit, conditional: s => SizeDiff(s, 2f)),
            new EventString((i) => $"The dark green gut of the {GetRaceDescSingl(i.Unit)} shifts and quakes, holding its prey tightly within as digestion rumbles steadily along.",
            priority: 11, actorRace: Race.Feit),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sighs, patting her stomach during a lull in the action as her {PreyLocStrings.AcidicDeadlySyn()} acids works on <b>{i.Target.Name}'s</b> defenses.",
            priority: 11, actorRace: Race.Feit),
            new EventString((i) => $"Annoyed by <b>{i.Target.Name}'s</b> struggling, <b>{i.Unit.Name}</b> clenches her stomach muscles hard, shutting {GPPHim(i.Target)} up for the moment. \"Quiet, you! I'm busy hunting for another course...\"",
            priority: 11, actorRace: Race.Feit),
            new EventString((i) => $"<i>*Gwrrrmmnggh*</i>  The {GetRaceDescSingl(i.Unit)}'s {GetRandomStringFrom("rapacious", "avaricious", "greedy", "gluttonous", "covetous", "demanding", "eager", "insatiate", "ever-hungry", "hungry", "hungering", "ravenous")} stomach groans for more, despite the meat already filling it.",
            priority: 11, actorRace: Race.Feit),
            new EventString((i) => $"<b>{i.Unit.Name}'s</b> eyes go wide as she feels <b>{i.Target.Name}</b> slide back up her neck as a wriggling bulge... but just as her cheeks swell she gulps the {GetRaceDescSingl(i.Target)} back down... The {GetRaceDescSingl(i.Unit)} thought she had a better hold on her stomach than this!",
            priority: 11, actorRace: Race.Feit),
            new EventString((i) => $"<b>{i.Unit.Name}</b> squishes <b>{i.Target.Name}</b> between her powerful thighs, sticking her tongue out playfully. \"Not even bigguns like you are safe from my meal times!\"",
            priority: 11, actorRace: Race.Feit, conditional: s => SizeDiff(s, 0.75f)),
            new EventString((i) => {
                if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.PreyCount > 3)
                    return $"\"Always glad to have big ones like yourself join the party in my {PreyLocStrings.ToSyn(PreyLocation.stomach)}.\" <b>{i.Unit.Name}</b> says while squeezing the bulge of <b>{i.Target.Name}</b>. \"Say hi to you friends for me!  When you get to my intestines, that is~\"";
                else if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.AlivePrey > 3)
                    return $"\"Always glad to have big ones like yourself join the party in my {PreyLocStrings.ToSyn(PreyLocation.stomach)}.\" <b>{i.Unit.Name}</b> says while squeezing the bulge of <b>{i.Target.Name}</b>. \"Say hi to you friends for me!\"";
                else return$"<b>{i.Unit.Name}</b> squishes <b>{i.Target.Name}</b> between her powerful thighs, sticking her tongue out playfully. \"Not even bigguns like you are safe from my meal times!\"";
                },
            priority: 11, actorRace: Race.Feit, conditional: s => SizeDiff(s, 0.75f)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> bemoans the empty feeling in the nooks and crannies of her gut.  Being this big made it so much harder to find satisfying meals. <b>{i.Target.Name}</b> takes little comfort in her continued hunger.",
            priority: 11, actorRace: Race.Feit, conditional: s => SizeDiff(s, 2f)),
            new EventString((i) => $"\"I'd try and console you but... Well, there's nothing glorious about being just one more turd in the <i>hill</i> of raptor {PreyLocStrings.ScatSyn()} I'm gonna turn you and your friends into.\" <b>{i.Unit.Name}</b> taunts the poor <b>{i.Target.Name}</b>.",
            priority: 11, actorRace: Race.Feit, conditional: Scat),
            new EventString((i) => {
                if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.PreyCount > 3)
                    return $"<b>{i.Unit.Name}</b> holds all this prey like its nothing, licking her lips menacingly as she peruses any other potential meals nearby.";
                else return$"Annoyed by <b>{i.Target.Name}'s</b> struggling, <b>{i.Unit.Name}</b> clenches her stomach muscles hard, shutting {GPPHim(i.Target)} up for the moment. \"Quiet, you! I'm busy hunting for another course...\"";
                },
            priority: 11, actorRace: Race.Feit),
            new EventString((i) => {
                if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.PreyCount > 3)
                    return $"<b>{i.Unit.Name}</b> growls in delight, her stuffed belly rocking, shifting and churning as so many people tumble and sizzle in her gastric grip.";
                else return$"<i>*Gwrrrmmnggh*</i>  The {GetRaceDescSingl(i.Unit)}'s {GetRandomStringFrom("rapacious", "avaricious", "greedy", "gluttonous", "covetous", "demanding", "eager", "insatiate", "ever-hungry", "hungry", "hungering", "ravenous")} stomach groans for more, despite the meat already filling it.";
                },
            priority: 11, actorRace: Race.Feit),
            new EventString((i) => {
                if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.PreyCount > 3)
                    return $"<b>{i.Unit.Name}</b> daydreams of taking a nice relieving {GetRandomStringFrom("shit", "crap", "dump")} later, as some prey writhe and slop around in her stomach. <i>Surely all this meat could help me with that!</i> The raptor thinks as she continues {PreyLocStrings.DigestingVerbSyn()} them.";
                else if (TacticalUtilities.GetPredatorComponentOfUnit(i.Unit)?.AlivePrey > 3)
                    return $"<b>{i.Unit.Name}</b> daydreams of taking a nice relieving {GetRandomStringFrom("shit", "crap", "dump")} later, as <b>{i.Target.Name}</b> and friends writhe and slop around in her stomach. <i>Surely these guys could help me with that!</i> The raptor thinks as she continues {PreyLocStrings.DigestingVerbSyn()} them.";
                else return$"<b>{i.Unit.Name}</b> daydreams of taking a nice relieving {GetRandomStringFrom("shit", "crap", "dump")} later, as <b>{i.Target.Name}</b> writhes and slops around in her stomach. <i>Surely {GPPHe(i.Target)} could help me with that!</i> The raptor thinks as she continues {PreyLocStrings.DigestingVerbSyn()} {GPPHim(i.Target)}.";
                },
            priority: 11, actorRace: Race.Feit, conditional: Scat),

            //Feit Vs. Dragons/Wyverns
            new EventString((i) => $"<b>{i.Unit.Name}</b> growls in delight, feeling the mighty dragon <b>{i.Target.Name}</b> succumbing to her entrails as if they were no more than a snack... she was much too big for them to handle now!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Dragon, conditional: s => SizeDiff(s, 2)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> growls in delight, feeling the mighty eastern dragon <b>{i.Target.Name}</b> succumbing to her entrails as if they were no more than a snack... she was much too big for them to handle now!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.EasternDragon, conditional: s => SizeDiff(s, 2)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> growls in delight, feeling the mighty dragoness <b>{i.Target.Name}</b> succumbing to her entrails as if they were no more than a snack... she was much too big for them to handle now!\nThough really... Is anyone surprised?",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Selicia, conditional: s => SizeDiff(s, 2)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> growls in delight, feeling the mighty khatunlao <b>{i.Target.Name}</b> succumbing to her entrails as if they were no more than a snack... she was much too big for them to handle now!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Abakhanskya, conditional: s => SizeDiff(s, 2)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> growls in delight, feeling the mighty steppe dragon <b>{i.Target.Name}</b> succumbing to her entrails as if they were no more than a snack... she was much too big for them to handle now!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Cierihaka, conditional: s => SizeDiff(s, 2)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> growls in delight, feeling the mighty wyvern <b>{i.Target.Name}</b> succumbing to her entrails as if they were no more than a snack... she was much too big for them to handle now!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Wyvern, conditional: s => SizeDiff(s, 2)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> growls in delight, feeling the mighty wyvern matron <b>{i.Target.Name}</b> succumbing to her entrails as if they were no more than a snack... she was much too big for them to handle now!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.WyvernMatron, conditional: s => SizeDiff(s, 2)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> growls in delight, feeling the mighty wyvern <b>{i.Target.Name}</b> succumbing to her entrails as if they were no more than a snack... she was much too big for them to handle now!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Scorch, conditional: s => SizeDiff(s, 2)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> growls in delight, feeling the mighty wyvern <b>{i.Target.Name}</b> succumbing to her entrails as if they were no more than a snack... she was much too big for them to handle now!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Zera, conditional: s => SizeDiff(s, 2)),
            new EventString((i) => $"\"Even dragons shall fall to my hunger, wyrm!\" <b>{i.Unit.Name}</b> claims, <b>{i.Target.Name}</b> still not finished trying to escape the clutches of the blue {GetRaceDescSingl(i.Unit)} innards!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Dragon),
            new EventString((i) => $"\"Even dragons shall fall to my hunger, wyrm!\" <b>{i.Unit.Name}</b> claims, <b>{i.Target.Name}</b> still not finished trying to escape the clutches of the blue {GetRaceDescSingl(i.Unit)} innards!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.EasternDragon),
            new EventString((i) => $"\"Even dragons shall fall to my hunger, Selicia!\" <b>{i.Unit.Name}</b> claims, <b>{i.Target.Name}</b> still not finished trying to escape the clutches of the blue {GetRaceDescSingl(i.Unit)} innards! \"That was a little easy though...\"",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Selicia),
            new EventString((i) => $"\"Even khatunlao shall fall to my hunger, Abakhanskya!\" <b>{i.Unit.Name}</b> claims, <b>{i.Target.Name}</b> still not finished trying to escape the clutches of the blue {GetRaceDescSingl(i.Unit)} innards! \"Easily the biggest girl I've eaten... Am I getting too big?\"",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Abakhanskya),
            new EventString((i) => $"\"Even steppe dragons shall fall to my hunger, Cierihaka!\" <b>{i.Unit.Name}</b> claims, <b>{i.Target.Name}</b> still not finished trying to escape the clutches of the blue {GetRaceDescSingl(i.Unit)} innards!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Cierihaka),
            new EventString((i) => $"\"Even wyverns shall fall to my hunger, wyrm!\" <b>{i.Unit.Name}</b> claims, <b>{i.Target.Name}</b> still not finished trying to escape the clutches of the blue {GetRaceDescSingl(i.Unit)} innards!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Wyvern),
            new EventString((i) => $"\"Even wyverns shall fall to my hunger, wyrm!\" <b>{i.Unit.Name}</b> claims, <b>{i.Target.Name}</b> still not finished trying to escape the clutches of the blue {GetRaceDescSingl(i.Unit)} innards!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.WyvernMatron),
            new EventString((i) => $"\"Even wyverns shall fall to my hunger, Scorch!\" <b>{i.Unit.Name}</b> claims, <b>{i.Target.Name}</b> still not finished trying to escape the clutches of the blue {GetRaceDescSingl(i.Unit)} innards!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Scorch),
            new EventString((i) => $"\"Even wyverns shall fall to my hunger, Zera!\" <b>{i.Unit.Name}</b> claims, <b>{i.Target.Name}</b> still not finished trying to escape the clutches of the blue {GetRaceDescSingl(i.Unit)} innards!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Zera),
            new EventString((i) => $"\"Even dragons shall fall to my hunger, wyrm!\" <b>{i.Unit.Name}</b> claims, <b>{i.Target.Name}</b> still not finished trying to escape the clutches of the blue {GetRaceDescSingl(i.Unit)} innards!",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Dragon),
            new EventString((i) => $"\"That struggling of yours isn't impressing anyone! Or at least not me...\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b> as the huge beast writhes in her taut belly.",
            priority: 11, actorRace: Race.Feit, targetRace: Race.EasternDragon),
            new EventString((i) => $"\"That struggling of yours isn't impressing anyone! Or at least not me...\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b> as the huge beast writhes in her taut belly.",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Selicia),
            new EventString((i) => $"\"That struggling of yours isn't impressing anyone! Or at least not me...\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b> as the huge beast writhes in her taut belly.",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Abakhanskya),
            new EventString((i) => $"\"That struggling of yours isn't impressing anyone! Or at least not me...\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b> as the huge beast writhes in her taut belly.",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Cierihaka),
            new EventString((i) => $"\"That struggling of yours isn't impressing anyone! Or at least not me...\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b> as the huge beast writhes in her taut belly.",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Wyvern),
            new EventString((i) => $"\"That struggling of yours isn't impressing anyone! Or at least not me...\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b> as the huge beast writhes in her taut belly.",
            priority: 11, actorRace: Race.Feit, targetRace: Race.WyvernMatron),
            new EventString((i) => $"\"That struggling of yours isn't impressing anyone! Or at least not me...\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b> as the huge beast writhes in her taut belly.",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Scorch),
            new EventString((i) => $"\"That struggling of yours isn't impressing anyone! Or at least not me...\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b> as the huge beast writhes in her taut belly.",
            priority: 11, actorRace: Race.Feit, targetRace: Race.Zera),

            //Feit Prey
            new EventString((i) => $"<b>{i.Target.Name}</b> scratches and flaps and roars her complaints with <b>{i.Unit.Name}</b>, jostling {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}!",
            priority: 11, targetRace: Race.Feit),
            new EventString((i) => $"<b>{i.Target.Name}</b> plots her revenge, {GetRandomStringFrom("steaming", "seething", "dancing", "furiously", "fiercly")} mad even as her body steams in the raptor-dissolving acids of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 11, targetRace: Race.Feit),
            new EventString((i) => $"<b>{i.Target.Name}</b> puts up an immense fight in the {i.preyLocation.ToSyn()} of <b>{i.Unit.Name}</b>",
            priority: 11, targetRace: Race.Feit),
            new EventString((i) => $"<b>{i.Target.Name}</b> curses everything as she feels herself coming apart inside <b>{i.Unit.Name}</b>, the {PreyLocStrings.AcidicDeadlySyn()} acids taking their toll...",
            priority: 11, targetRace: Race.Feit),
            new EventString((i) => $"<b>{i.Target.Name}</b> can only think of her ruined vore streak as she begins to fade inside <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 11, targetRace: Race.Feit),
            new EventString((i) => $"<b>{i.Target.Name}</b> swears loudly from within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}. This can't be where her streak ends!",
            priority: 11, targetRace: Race.Feit),

            new EventString((i) => $"<b>{i.Unit.Name}</b> licks {GPPHis(i.Unit)} chops, the {GetRaceDescSingl(i.Unit)} so far no issue for the wyrm to contain in {GPPHis(i.Unit)} powerful {i.preyLocation.ToSyn()}.",
            priority: 11, targetRace: Race.Feit, actorRace: Race.Dragon),
            new EventString((i) => $"It seems a dragon was just too much to chew for <b>{i.Target.Name}</b>, as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} begins to melt and squish her still squirming body into {i.preyLocation.ToFluid()}.",
            priority: 11, targetRace: Race.Feit, actorRace: Race.Dragon),
            new EventString((i) => $"<b>{i.Unit.Name}</b> licks {GPPHis(i.Unit)} chops, the {GetRaceDescSingl(i.Unit)} so far no issue for the wyrm to contain in {GPPHis(i.Unit)} powerful {i.preyLocation.ToSyn()}.",
            priority: 11, targetRace: Race.Feit, actorRace: Race.EasternDragon),
            new EventString((i) => $"It seems an eastern dragon was just too much to chew for <b>{i.Target.Name}</b>, as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} begins to melt and squish her still squirming body into {i.preyLocation.ToFluid()}.",
            priority: 11, targetRace: Race.Feit, actorRace: Race.EasternDragon),
            new EventString((i) => $"<b>{i.Unit.Name}</b> licks {GPPHis(i.Unit)} chops, the {GetRaceDescSingl(i.Unit)} so far no issue for the wyrm to contain in {GPPHis(i.Unit)} powerful {i.preyLocation.ToSyn()}.",
            priority: 11, targetRace: Race.Feit, actorRace: Race.Selicia),
            new EventString((i) => $"It seems a salamander dragon was just too much to chew for <b>{i.Target.Name}</b>, as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} begins to melt and squish her still squirming body into {i.preyLocation.ToFluid()}.",
            priority: 11, targetRace: Race.Feit, actorRace: Race.Selicia),
            new EventString((i) => $"<b>{i.Unit.Name}</b> licks {GPPHis(i.Unit)} chops, the {GetRaceDescSingl(i.Unit)} so far no issue for the wyrm to contain in {GPPHis(i.Unit)} powerful {i.preyLocation.ToSyn()}.",
            priority: 11, targetRace: Race.Feit, actorRace: Race.Abakhanskya),
            new EventString((i) => $"It seems a mighty khatunlao were just too much to chew for <b>{i.Target.Name}</b>, as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} begins to melt and squish her still squirming body into {i.preyLocation.ToFluid()}.",
            priority: 11, targetRace: Race.Feit, actorRace: Race.Abakhanskya),
            new EventString((i) => $"<b>{i.Unit.Name}</b> licks {GPPHis(i.Unit)} chops, the {GetRaceDescSingl(i.Unit)} so far no issue for the wyrm to contain in {GPPHis(i.Unit)} powerful {i.preyLocation.ToSyn()}.",
            priority: 11, targetRace: Race.Feit, actorRace: Race.Cierihaka),
            new EventString((i) => $"It seems a steppe dragon was just too much to chew for <b>{i.Target.Name}</b>, as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} begins to melt and squish her still squirming body into {i.preyLocation.ToFluid()}.",
            priority: 11, targetRace: Race.Feit, actorRace: Race.Cierihaka),

            //Virgin Preds
            new EventString((i) => $"<b>{i.Target.Name}</b> is utterly humiliated by being {GetRandomStringFrom("eaten", "devoured", "vored", "gobbled up", "swallowed", "gulped", "slurped down", "wolfed down", "consumed")} by {GetRandomStringFrom("a virgin", "a first-time", "a newbie", "a greenhorn", "an inexperienced", "a rookie")} predator.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Unit.Name}</b> gets wrapped up in the experience of {GPPHis(i.Unit)} first prey, swinging {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} back and forth as {GPPHe(i.Unit)} quiver{SIfSingular(i.Unit)} in excitement.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Unit.Name}</b> turns green and almost throws up as <b>{i.Target.Name}</b> moves around in {GPPHis(i.Unit)} virgin {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: (s) => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> proudly sticks out {GPPHis(i.Unit)} full {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "stuffed", "gluttonous")} {i.preyLocation.ToSyn()} to show off {GPPHis(i.Unit)} first prey to all of {GPPHis(i.Unit)} friends.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Target.Name}</b> thrashes around inside <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous")} {i.preyLocation.ToSyn()}, causing the {GetRandomStringFrom("virgin", "first-time", "newbie", "greenhorn", "inexperienced", "rookie")} predator to lose balance and tumble over.  Cursing loudly, the {GetRandomStringFrom("virgin", "first-time", "newbie", "greenhorn", "inexperienced pred")} stands up embarassed.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Unit.Name}</b> inadvertently lets out a satisfied moan as {GPPHe(i.Unit)} experience{SIfSingular(i.Unit)} {GPPHis(i.Unit)} first truly full {i.preyLocation.ToSyn()}.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Target.Name}</b> struggles valiantly to resist {GPPHis(i.Target)} {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "acidic", "caustic", "grim", "predatory", "flesh-melting")} {GetRandomStringFrom("fate", "doom", "end", "grave", "death")}, but <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("virgin", "first-time", "newbie", "greenhorn", "inexperienced", "rookie")} {i.preyLocation.ToSyn()} is surprisingly resilient.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("begs", "pleads with", "humbly asks")} {GPPHis(i.Unit)} first prey to settle down, but <b>{i.Target.Name}</b> keeps struggling defiantly.  The {GetRaceDescSingl(i.Unit)} {GetRandomStringFrom("groans", "moans", "whines", "whimpers", "wails", "cries", "withers")} {GetRandomStringFrom("meekly", "weakly", "quietly", "breathlessly", "miserably")} under the renewed onslaught.",
            priority: 9, conditional: (s) => FirstTime(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> demands to be let out of the {GetRandomStringFrom("virgin", "first-time pred", "newbie", "greenhorn", "inexperienced pred")}'s {i.preyLocation.ToSyn()}.  <b>{i.Unit.Name}</b> explains that even if {GPPHe(i.Unit)} wanted to do that, {GPPHe(i.Unit)} doesn't know how.",
            priority: 9, conditional: (s) => FirstTime(s) && ActorHumanoid(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> looks down at {GPPHis(i.Unit)} {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous")} {i.preyLocation.ToSyn()} with disbelief and wonder, watching as <b>{i.Target.Name}</b> moves around within {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hesitantly looks down at {GPPHis(i.Unit)} engorged {i.preyLocation.ToSyn()} and with trepidation rests a hand on it, feeling <b>{i.Target.Name}</b> shifting within.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Unit.Name}</b> doesn't really know what to do after {GPPHis(i.Unit)} first feeding. {GPPHe(i.Unit)} speak{SIfSingular(i.Unit)} softly to {GPPHis(i.Unit)} {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "stuffed", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "greedy")} {i.preyLocation.ToSyn()} asking if <b>{i.Target.Name}</b> is still alive. <b>{i.Target.Name}</b> screams loudly from within the {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "acidic", "caustic", "grim", "predatory", "flesh-melting")} {GetRandomStringFrom("prison", "holding cell", "jail", "gaol", "deathtap")}, scaring the poor {GetRandomStringFrom("virgin", "first-time", "newbie", "greenhorn")} predator.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tries to catch {GPPHis(i.Unit)} breath as <b>{i.Target.Name}</b> fights against the {GetRandomStringFrom("virgin", "first-time", "newbie", "greenhorn", "inexperienced", "rookie")} predator's acids.",
            priority: 9, conditional: (s) => FirstTime(s) && HardVore(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> threatens to devour <b>{i.Unit.Name}</b> once {GPPHe(i.Target)} gets out.  The thought terrifies the {GetRandomStringFrom("virgin", "first-time", "newbie", "greenhorn", "inexperienced", "rookie")} predator so {GPPHe(i.Unit)} firmly hold{SIfSingular(i.Unit)} {GPPHis(i.Unit)} {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "voracious", "shifting", "gluttonous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} to keep {GPPHis(i.Unit)} agitated prey down.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Unit.Name}</b> presses a hand into {GPPHis(i.Unit)} extended {PreyLocStrings.ToSyn(PreyLocation.stomach)} and is surprised by just how soft it is.",
            priority: 9, conditional: (s) => FirstTime(s) && InStomachOrWomb(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hopes that finishing off <b>{i.Target.Name}</b> will make {GPPHis(i.Unit)} mentor proud.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"The {GetRandomStringFrom("virgin", "first-time", "newbie", "greenhorn", "inexperienced", "rookie")} <b>{i.Unit.Name}</b> wonders if {GPPHe(i.Unit)}'ll be beautiful like the older warriors after {GetRandomStringFrom("digesting", "gurgling", "churning", "dissolving", "liquifying", "melting", "breaking down")} {GPPHis(i.Unit)} first prey.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Unit.Name}</b> and <b>{i.Target.Name}</b> both start to panic as neither are sure what to do.",
            priority: 9, conditional: FirstTime),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out a belch as {GPPHis(i.Unit)} {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "hungry")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} sways back and forth. Resting a hand on {GPPHis(i.Unit)} upset {PreyLocStrings.ToSyn(PreyLocation.stomach)} as {GPPHe(i.Unit)} {GetRandomStringFrom("digests", "gurgles", "churns", "dissolves", "liquifies", "melts", "breaks down")} {GPPHis(i.Unit)} first meal, the {GetRandomStringFrom("virgin", "first-time", "newbie", "greenhorn", "inexperienced", "rookie")} pred moans, \"Ugh, I'm starting to think this was a bad idea. I feel like I'm going to pop.\"",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s)),
            new EventString((i) => $"\"I'm sorry, is that uncomfortable?\" <b>{i.Unit.Name}</b> asks {GPPHis(i.Unit)} first prey as {GPPHe(i.Unit)} attempt{SIfSingular(i.Unit)} to rearrange {GPPHis(i.Unit)} meal to a more accommodating position. \"Please be patient, this is my first time!\"",
            priority: 9, conditional: s => FirstTime(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"O-oh! So this is what being a predator feels like!\" <b>{i.Unit.Name}</b> declares as a smile crosses {GPPHis(i.Unit)} lips and {GPPHis(i.Unit)} hands sensually caress {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "wiggling", "wobbling", "wriggling", "shifting")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, \"Yeah, I could get used to this!\"",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Egh!  Why are you so <i>heavy!</i>\" <b>{i.Unit.Name}</b> asks {GPPHis(i.Unit)} meal as {GPPHis(i.Unit)} {GetRandomStringFrom("virgin", "uninitiated", "newbie", "greenhorn", "inexperienced", "rookie")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} tries its best to {GetRandomStringFrom("digest", "gurgle", "churn", "dissolve", "liquify", "melt", "break down")} its first prey. \"Come <i>on!</i> I'm getting stretch marks from how much you're making my {GetRandomStringFrom("belly", "stomach", "gut", "tummy", "tum")} sag!\"",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Ugh, I hope this gets easier,\" <b>{i.Unit.Name}</b> complains as {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "wiggling", "wobbling", "wriggling", "shifting", "trembling")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} bounces high before sinking down low into a deep sag as {GPPHis(i.Unit)} first prey fights for {GPPHis(i.Target)} life.",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Please be gentle with me,\" <b>{i.Unit.Name}</b> shyly mumbles to {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "wiggling", "wobbling", "wriggling", "shifting", "trembling")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} as the form of {GPPHis(i.Unit)} prey sloshes around beneath the skin, \"It's my first time.\"",
            priority: 9, conditional: s => FirstTime(s) && InStomach(s) && ActorHumanoid(s)),

            //Cursed Prey
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} barely moves as <b>{i.Target.Name}</b> happily relaxes in {GPPHis(i.Target)} new {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slimy", "slippery", "sopping", "steamy", "digestive", "groaning", "gurgling", "churning", "melty", "acidic", "caustic", "flesh-melting")} home.",
            priority: 9, conditional: s => Cursed(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> desperately thanks {GPPHis(i.Target)} consumer for {GetRandomStringFrom("eating", "devouring", "voring", "gobbling down", "swallowing", "gulping down", "slurping up", "wolfing down", "consuming")} one as unworthy as {GPPHimself(i.Target)}. <b>{i.Unit.Name}</b> gives a confused pat to the top of {GPPHis(i.Unit)} grateful {i.preyLocation.ToSyn()} in response.",
            priority: 9, conditional: Cursed),
            new EventString((i) => $"<b>{i.Target.Name}</b> lovingly massages <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} from the inside, giving the predator a unique experience as {GPPHis(i.Unit)} meal cares for {GPPHis(i.Unit)} guts.",
            priority: 9, conditional: s => Cursed(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> hopes that {GPPHeIsAbbr(i.Unit)} tasty enough. <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach gives a reassuring gurgle and flow of acids in response.",
            priority: 9, conditional: s => Cursed(s) && InStomach(s)),
            new EventString((i) => $"\"Oh gods! Yes! <i><b>{GetRandomStringFrom("digest", "gurgle", "churn", "dissolve", "liquify", "melt", "break")}</b></i> me!\" <b>{i.Target.Name}</b> screams out as {GPPHe(i.Target)} furiously play{SIfSingular(i.Target)} with {GPPHimself(i.Unit)} as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach walls pulsate around {GPPHim(i.Target)} and {GetRandomStringFrom("digestive", "acidic", "caustic", "flesh-melting")} juices cover {GPPHis(i.Unit)} melting flesh. \"I'm just food now! Agh, this is so hot!\"",
            priority: 9, conditional: s => Cursed(s) && InStomach(s) && Lewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> rubs {GPPHis(i.Target)} chest and ass, slathering the {GetRandomStringFrom("digestive", "acidic", "caustic", "flesh-melting")} juices across {GPPHis(i.Target)} entire body, the sting exciting {GPPHim(i.Target)} to no end as the curse holds sway over {GPPHis(i.Target)} broken mind. {Capitalize(GPPHis(i.Target))} self-defeating actions ease the process of digestion for <b>{i.Unit.Name}</b> who gratefully pats the sides of {GPPHis(i.Unit)} sagging {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: s => Cursed(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> screams out in ecstasy as the stomach wall around {GPPHim(i.Target)} convulses, pressing {GPPHim(i.Target)} into the {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "acidic", "caustic", "grim", "predatory", "flesh-melting")} acids within. \"Please, don't digest me!” the prey screams out, making <b>{i.Unit.Name}</b> wonder if the curse had worn off but {GPPHe(i.Target)} continue{SIfSingular(i.Target)}, alleviating the worry, \"Keep me as your gut slut, Gods I never want to leave your {PreyLocStrings.ToSyn(PreyLocation.stomach)}!\"",
            priority: 9, conditional: s => Cursed(s) && InStomach(s) && ActorHumanoid(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> pants heavily as {GPPHe(i.Unit)} tr{IesIfSingular(i.Target)} to elicit an orgasm but the motion of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)}, while exciting {GPPHim(i.Target)} even further prevents {GPPHim(i.Target)} from getting a good grip. The excited prey attempts to grab onto the {GetRandomStringFrom("moist", "slick", "sloppy", "wet", "slippery", "slimy", "dripping", "sopping", "drooling", "steamy")} stomach lining, but keeps losing {GPPHis(i.Target)} grip and sloshing around in {GetRandomStringFrom("digestive", "acidic", "caustic", "flesh-melting")} juices.",
            priority: 9, conditional: s => Cursed(s) && InStomach(s) && Lewd(s)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> blissfully sloshes back and forth in the {PreyLocStrings.ToSyn(PreyLocation.stomach)} currently {GetRandomStringFrom("digesting", "gurgling", "churning", "dissolving", "liquifying", "melting")} {GPPHim(i.Target)} alive, {Capitalize(GPPHe(i.Target))} begin{SIfSingular(i.Target)} to rub {GPPHis(i.Target)} own belly, contemplating those that {GPPHe(i.Target)} {HasHave(i.Target)} also eaten. Their screams always made digestion seem terrifying, but now that {GPPHeIsAbbr(i.Target)} making a bulge on <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> frame, the experience is better than anything {GPPHe(i.Target)} could have imagined.",
            priority: 9, conditional: s => Cursed(s) && InStomach(s)),


            new EventString((i) => $"<b>{i.Unit.Name}</b> lifts up {GPPHis(i.Unit)} {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "voracious", "shifting", "gluttonous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, swinging it side to side, making the trapped prey <b>{i.Target.Name}</b> dizzy.",
            priority: 8, conditional: InStomachOrWomb),
            new EventString((i) => $"<b>{i.Target.Name}</b> almost gets back up but <b>{i.Unit.Name}</b> grabs {GPPHis(i.Target)} face as {GPPHe(i.Target)} reach{EsIfSingular(i.Target)} the mouth and push{EsIfSingular(i.Unit)} {GPPHim(i.Target)} right back down into {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "starving", "hungry", "hungering", "ravenous", "voracious", "famished", "gluttonous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: InStomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> punches {GPPHis(i.Unit)} {GetRandomStringFrom("gurgling", "churning", "groaning", "growling", "rumbling", "voracious", "shifting", "gluttonous", "trembling")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} to stop {GPPHis(i.Unit)} meal's incessant squirming.",
            priority: 8, conditional: InStomachOrWomb),
            new EventString((i) => $"<b>{i.Unit.Name}</b> asks <b>{i.Target.Name}</b> to move a little bit as {GPPHeIsAbbr(i.Target)} giving {GPPHim(i.Unit)} indigestion.  The indignant prey offers {GetRandomStringFrom("a stiff kick", "a solid punch", "a powerful thrash")} instead.",
            priority: 8, conditional: InStomach),
            new EventString((i) => $"With a violent tummy wobble, <b>{i.Unit.Name}</b> loses {GPPHis(i.Unit)} balance for a moment.",
            priority: 8, conditional: InStomachOrWomb),
            new EventString((i) => $"<b>{i.Unit.Name}</b> pokes {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and asks if <b>{i.Target.Name}</b> is still alive.",
            priority: 8, conditional: InStomachOrWomb),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> face appears through <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} for a moment but vanishes as <b>{i.Unit.Name}</b> shifts {GPPHis(i.Unit)} weight.",
            priority: 8, conditional: InStomachOrWomb),
            new EventString((i) => $"<b>{i.Unit.Name}</b> wonders if {GPPHe(i.Unit)}, too, will end up in a {PreyLocStrings.ToSyn(PreyLocation.stomach)} one day and tries to soothe {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: InStomachOrWomb),
            new EventString((i) => $"<b>{i.Target.Name}</b> manages to get an arm back up the {GetRandomStringFrom("gullet", "throat", "esophagus")} but <b>{i.Unit.Name}</b> suddenly swallows hard, forcing {GPPHim(i.Target)} back down curled into a ball at the bottom of {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: InStomach),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} bounces furiously as <b>{i.Target.Name}</b> tickles {GPPHim(i.Unit)} from within, bringing a smile to {GPPHis(i.Unit)} face.",
            priority: 8, conditional: InStomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> uses both hands to squeeze {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} tracing out <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> form through {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling")} stomach walls.",
            priority: 8, conditional: InStomach),
            new EventString((i) => $"<b>{i.Target.Name}</b> sees an ominous bulge press inwards as <b>{i.Unit.Name}</b> pushes a hand firmly against {GPPHis(i.Unit)} wobbling {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: InStomach),

            new EventString((i) => $"<b>{i.Target.Name}</b> relishes in the safety of being inside <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slippery", "slimy", "dripping", "steamy", "eager")} {GetRandomStringFrom("gut", "midsection", "tummy", "tum", "depths", "innards", "insides")}.",
            priority: 11, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lifts up {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, swinging it side to side, which makes the willing prey <b>{i.Target.Name}</b> dizzy.",
            priority: 11, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> pokes {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} and asks if <b>{i.Target.Name}</b> is still alive.  The preyish {GetRaceDescSingl(i.Target)} calls out an affirmative.",
            priority: 11, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> rubs {GPPHis(i.Target)} chest and ass, slathering the juices across {GPPHis(i.Target)} entire body, the feeling exciting {GPPHim(i.Target)} to no end as the curse holds sway over {GPPHis(i.Target)} broken mind. {Capitalize(GPPHis(i.Target))} would-be self-defeating actions worry <b>{i.Unit.Name}</b>, who is grateful only that {GPPHis(i.Unit)} comrade is stuck in <i>{GPPHis(i.Unit)}</i> {i.preyLocation.ToSyn()}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s) && Cursed(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> screams out in ecstasy as the walls around {GPPHim(i.Target)} convulse, pressing {GPPHim(i.Target)} into the fluids within. \"Please, don't digest me!\" {GPPHim(i.Target)} screams out, making <b>{i.Unit.Name}</b> wonder if the curse has finally worn off but {GPPHe(i.Target)} continue{SIfSingular(i.Target)}, much to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> dismay, \"Keep me as your gut slut, Gods I never want to leave your {PreyLocStrings.ToSyn(PreyLocation.stomach)}!\"",
            priority: 12, conditional: s => Friendly(s) && Endo(s) && Cursed(s) && InStomach(s) && ActorHumanoid(s) && Lewd(s)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> blissfully sloshes back and forth in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}. {Capitalize(GPPHe(i.Target))} begin{SIfSingular(i.Target)} to rub {GPPHis(i.Target)} own belly, contemplating those that {GPPHe(i.Target)} {HasHave(i.Target)} also eaten. Their screams always made being trapped in there seem terrifying, but now that {GPPHeIsAbbr(i.Target)} making a bulge on <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> frame, the experience is better than anything {GPPHe(i.Target)} could have imagined.",
            priority: 12, conditional: s => Friendly(s) && Endo(s) && Cursed(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> thanks <b>{i.Unit.Name}</b> for patching {GPPHim(i.Target)} up.",
            priority: 11, conditional: s => Friendly(s) && HealingEndo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> enjoys the added weight of carrying <b>{i.Target.Name}</b> around in {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            priority: 11, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> playfully slaps {GPPHis(i.Unit)} full {i.preyLocation.ToSyn()}, teasing {GPPHis(i.Unit)} compatriot.",
            priority: 11, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hears <b>{i.Target.Name}</b> moan softly while {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} works on {GPPHim(i.Target)}.",
            priority: 11, conditional: s => Friendly(s) && HealingEndo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hates the feeling of <b>{i.Target.Name}</b> inside {GPPHim(i.Unit)}, but keeps {GPPHim(i.Target)} inside for {GPPHim(i.Target)} own good.",
            priority: 11, conditional: s => Friendly(s) && HealingEndo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> demands that <b>{i.Unit.Name}</b> heal {GPPHim(i.Target)} quickly.",
            priority: 11, conditional: s => Friendly(s) && HealingEndo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lovingly wraps {GPPHis(i.Unit)} arms around {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, gently squeezing <b>{i.Target.Name}</b> as {GPPHe(i.Unit)} heal{SIfSingular(i.Unit)} {GPPHim(i.Target)}.",
            priority: 11, conditional: s => Friendly(s) && HealingEndo(s) && InStomachOrWomb(s)),
            new EventString((i) => $"\"O-Oh my!\" <b>{i.Unit.Name}</b> exclaims as {GPPHis(i.Unit)} sagging {PreyLocStrings.ToSyn(PreyLocation.stomach)} begins to sway back and forth with muffled lust-filled moans as <b>{i.Target.Name}</b> pleasures {GPPHimself(i.Target)}. \"You're a naughty one, aren't you!\"",
            priority: 11, conditional: s => Friendly(s) && Endo(s) && InStomach(s) && Lewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"You know,\" <b>{i.Unit.Name}</b> idly muses while stroking {GPPHis(i.Unit)} jiggling {PreyLocStrings.ToSyn(PreyLocation.stomach)}, \"It's hard to feel lonely when you've got someone so close by. I'm gonna keep you in there for a <i>looong</i> time~\"",
            priority: 11, conditional: s => Friendly(s) && Endo(s) && InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"With a heavy breath and a hoisting of {GPPHis(i.Unit)} overstuffed {PreyLocStrings.ToSyn(PreyLocation.stomach)}, <b>{i.Unit.Name}</b> stands, ready to continue fighting, \"Rest assured, eating you wasn't what I wanted. But keeping you safe is my responsibility.\"",
            priority: 11, conditional: s => Friendly(s) && Endo(s) && InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> barely struggles and begins crying after being betrayed by <b>{i.Unit.Name}</b>.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> accusations of betrayal are masked by <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling")} {i.preyLocation.ToSyn()}!",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> screams for someone to help {GPPHim(i.Target)} but {GPPHis(i.Target)} screams are indistinguishable from those of a {GetRandomStringFrom("digesting", "gurgling", "churning", "dissolving", "liquifying", "melting")} enemy.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> feels for {GPPHis(i.Unit)} {GetRandomStringFrom("digesting", "gurgling", "churning", "dissolving", "liquifying", "melting")} ally through {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling")} {i.preyLocation.ToSyn()} walls, but can't tell the difference between {GPPHim(i.Target)} and {GPPHis(i.Unit)} enemies.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> demands to know why<b>{i.Unit.Name}</b> ate {GPPHim(i.Target)}.  The {GetRaceDescSingl(i.Unit)} laughs as and reminds {GPPHis(i.Unit)} former ally that a meal's a meal.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't stand to look at {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "eager", "insatiate", "ever-hungry")} {i.preyLocation.ToSyn()} as it finishes off {GPPHis(i.Unit)} former comrade.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
           
            //Bodyparts - Thigh fat - Tail fat - thickening {GPPHis(i.Unit)} tentacles - drooping down {GPPHis(i.Unit)} midsection - any else?
            new EventString((i) => $"<b>{i.Unit.Name}</b> realizes what {GPPHe(i.Unit)} {HasHave(i.Unit)} done and tries to expel {GPPHis(i.Unit)} ally... But it's too late, <b>{i.Target.Name}</b> is already thigh fat.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"Pushing {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} with the hilt of {GPPHis(i.Unit)} weapon, <b>{i.Unit.Name}</b> accuses <b>{i.Target.Name}</b> of being too weak.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> understands and submits {GPPHimself(i.Target)} to becoming nutrients for {GPPHis(i.Target)} {GetRandomStringFrom("rapacious", "avaricious", "greedy", "gluttonous", "covetous", "demanding", "eager", "insatiate", "ever-hungry", "hungry", "hungering", "ravenous")} ally.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> assures <b>{i.Target.Name}</b> that {GPPHe(i.Target)} shall better serve the empire as {GPPHis(i.Unit)} meal than as a warrior.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> laughs at the joke but begins to panic as <b>{i.Unit.Name}</b> doesn't laugh and acids begin to pour in.",
            priority: 8, conditional: (s) => Friendly(s) && HardVore(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hides {GPPHis(i.Unit)} traitorous {i.preyLocation.ToSyn()} from {GPPHis(i.Unit)} allies as <b>{i.Target.Name}</b> screams for help.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> wonders where <b>{i.Target.Name}</b> went and starts to look for {GPPHim(i.Target)}, forgetting that {GPPHeIsAbbr(i.Target)} swinging just in front of {GPPHim(i.Unit)} inside {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: Friendly),
            new EventString((i) => $"<b>{i.Unit.Name}</b> wonders what {GPPHe(i.Unit)}'ll tell <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> family as {GPPHe(i.Target)} still struggle{SIfSingular(i.Target)} inside {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> cruelly laughs, resting a hand on {GPPHis(i.Unit)} engorged {i.preyLocation.ToSyn()}. {GPPHe(i.Unit)} had been waiting for this moment for a long time.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> shivers in delight as <b>{i.Target.Name}</b> struggles. {GPPHe(i.Unit)} never knew treason tasted so good.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> laughs. With <b>{i.Target.Name}</b> finally out of the way, everything will become much easier for {GPPHim(i.Unit)}.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tries {GPPHis(i.Unit)} best to get <b>{i.Target.Name}</b> out from {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, but can't manage it.",
            priority: 8, conditional: s => Friendly(s) && !Endo(s)),


            new EventString((i) => $"<b>{i.Target.Name}</b> kicks <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} angrily, demanding to be set free.",
            priority: 8),
            new EventString((i) => $"Not to be defeated so easily, <b>{i.Target.Name}</b> struggles with all {GPPHis(i.Target)} might.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} quiver{PluralForPart(i.preyLocation)} and shake{PluralForPart(i.preyLocation)}, as <b>{i.Target.Name}</b> tries to make {GPPHim(i.Unit)} {i.preyLocation.ToVerb()} {GPPHim(i.Target)} out.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> shuffles inside <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 8),
            new EventString((i) => $"Angry protests of <b>{i.Target.Name}</b> can be heard from within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling")} {i.preyLocation.ToSyn()}.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> squirms and cries for help within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling")} {i.preyLocation.ToSyn()}.",
            priority: 8),
            //"They" for balls/breasts - "It" for belly/womb, also rumble/rumbles
            //new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} rumble{PluralForPart(i.preyLocation)} as it greets fresh prey, eager for more.",
            //priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} loudly {GetRandomStringFrom("slosh", "gurgle", "churn", "groan", "growl", "rumble", "wail")}{PluralForPart(i.preyLocation)}, getting started on {GetRandomStringFrom("digesting", "gurgling", "churning", "dissolving", "liquifying", "melting", "breaking down")} <b>{i.Target.Name}</b>.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> groans quietly when {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} lets out a mild gurgle of indigestion, with <b>{i.Target.Name}</b> yet to settle in.",
            priority: 8, conditional: InStomach),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} wobble{PluralForPart(i.preyLocation)} vigorously as <b>{i.Target.Name}</b> is trying to escape.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> starts feeling dizzy inside <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> struggles are weakening somewhat as {GPPHe(i.Target)} starts to succumb to the {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "acidic", "caustic", "grim", "predatory", "flesh-melting")} fluids.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> might not see the light of day again if <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} continues to be left in charge of {GPPHis(i.Target)} fate.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} contract{PluralForPart(i.preyLocation)} around <b>{i.Target.Name}</b>, steadily {GetRandomStringFrom("digesting", "gurgling", "churning", "dissolving", "liquifying", "melting", "breaking down")} {GPPHis(i.Unit)} meal.",
            priority: 8),
            new EventString((i) => $"All this {GetRandomStringFrom("digesting", "gurgling", "churning")} is making <b>{i.Unit.Name}</b> thirsty. {Capitalize(GPPHe(i.Unit))} hope{SIfSingular(i.Unit)} there will be water nearby after the battle.",
            priority: 8, conditional: InStomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> belches out a harsh <i>{GetRandomStringFrom("*Burp!*", "*Burrp!*", "*Buurp*", "*Buoorp!*", "*Urp*", "*Urrp!*", "*Uorrp!*", "*UOOORRP!*")}</i>, {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling")} {i.preyLocation.ToSyn()} tightening around <b>{i.Target.Name}</b>.",
            priority: 8, conditional: (s) => InStomach(s) && CanBurp(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> is really starting to feel the pressure from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling")} {i.preyLocation.ToSyn()}, the {i.preyLocation.ToSyn()} lewdly {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "shifting", "trembling", "wobbling")} over the { GetRaceDescSingl(i.Target)}.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling")} {i.preyLocation.ToSyn()} wobble{PluralForPart(i.preyLocation)} as <b>{i.Target.Name}</b> still tries to get out.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> enjoys the added weight of <b>{i.Target.Name}</b> in {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling")} {i.preyLocation.ToSyn()}.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling")} {i.preyLocation.ToSyn()} contract{PluralForPart(i.preyLocation)} around <b>{i.Target.Name}</b>, trying to squish {GPPHim(i.Target)}.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slaps {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "full")} {i.preyLocation.ToSyn()}, taunting the prey inside.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling")} {i.preyLocation.ToSyn()} let{PluralForPart(i.preyLocation)} out a satisfied gurgle as it works on {GetRandomStringFrom("digesting", "gurgling", "churning", "dissolving", "liquifying", "melting", "breaking down")} it's hard won prey.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> moans softly while {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {i.preyLocation.ToSyn()} rumble{PluralForPart(i.preyLocation)} ominously.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> knees buckle for a moment as <b>{i.Target.Name}</b> struggles within {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: InStomach),
            new EventString((i) => $"<b>{i.Target.Name}</b> says {GPPHe(i.Target)} {HasHave(i.Target)} a {GetRandomStringFrom("child", "daughter", "son", "family", "wife", "husband", "partner", "significant other")} back home and begs to be let out. <b>{i.Unit.Name}</b> apologizes and rubs {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {i.preyLocation.ToSyn()}.",
            priority: 8, conditional: HardVore),
            new EventString((i) => $"<b>{i.Target.Name}</b> struggles inside <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {i.preyLocation.ToSyn()}.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tells <b>{i.Target.Name}</b> that {GPPHe(i.Unit)} didn't want this to happen.  From within {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, <b>{i.Target.Name}</b> is not consoled.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> holds out hope, knowing that {GPPHis(i.Target)} fellow warriors will save {GPPHim(i.Target)} from {GPPHis(i.Target)} {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "acidic", "caustic", "grim", "predatory", "flesh-melting")} {GetRandomStringFrom("fate", "doom", "end", "grave", "death")} soon.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> offers <b>{i.Unit.Name}</b> a bribe. <b>{i.Unit.Name}</b> considers it for a moment but politely declines.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> offers <b>{i.Unit.Name}</b> some sexual favors in exchange for being released from {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. <b>{i.Unit.Name}</b> considers it for a moment but politely declines.",
            priority: 8, conditional: (s) => Lewd(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> offers <b>{i.Unit.Name}</b> the best sex of {GPPHis(i.Unit)} life in exchange for being released from {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. <b>{i.Unit.Name}</b> considers it for a moment but politely declines.",
            priority: 8, conditional: (s) => Lewd(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> offers <b>{i.Unit.Name}</b> some {GetRandomStringFrom("hot", "awesome", "slick", "sloppy", "steamy", "eager")} sex in exchange for being released from {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. <b>{i.Unit.Name}</b> considers it for a moment but politely declines.",
            priority: 8, conditional: (s) => Lewd(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> offers to make <b>{i.Unit.Name}</b> {GetRandomStringFrom("cum", "orgasm", "climax", "nut")} as many times as {GPPHe(i.Unit)} wants in exchange for being released from {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. <b>{i.Unit.Name}</b> considers it for a moment but politely declines.",
            priority: 8, conditional: (s) => Lewd(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> asks <b>{i.Target.Name}</b> if {GPPHeIsAbbr(i.Unit)} eaten {GPPHim(i.Target)} before. <b>{i.Target.Name}</b> says {GPPHe(i.Unit)} do{EsIfSingular(i.Unit)}n't think so.",
            priority: 8, conditional: (s) => s.Target.HasTrait(Traits.Eternal)),
            new EventString((i) => $"<b>{i.Target.Name}</b> promises that {GPPHe(i.Target)} will eat <b>{i.Unit.Name}</b> once {GPPHe(i.Target)} escapes. <b>{i.Unit.Name}</b> laughs and pats {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} doubtfully.",
            priority: 8, conditional: InStomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> winces in pain as <b>{i.Target.Name}</b> tries to claw {GPPHis(i.Target)} way out.  Seeking {GetRandomStringFrom("reprisal", "revenge", "recompense")}, {GPPHe(i.Unit)} locates {GPPHis(i.Unit)} prey's head within {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and pushes them under the {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "acidic", "caustic", "predatory", "flesh-melting")} tides.",
            priority: 8, conditional: InStomach),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> vain struggles serve only to excite {GPPHis(i.Target)} predator. <b>{i.Unit.Name}</b> rumbles with delight at the sensation.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> thanks <b>{i.Target.Name}</b> for being {GPPHis(i.Unit)} meal, willing or no.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rubs {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {i.preyLocation.ToSyn()} in an attempt to alleviate the indigestion from <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> fighting.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> screams are covered by a loud gurgle from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {i.preyLocation.ToSyn()}.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> presses into {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, locates <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> genitals through the walls, and squeezes playfully, boasting that it all belongs to {GPPHim(i.Unit)} now.",
            priority: 8, conditional: (s) => Lewd(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hopes <b>{i.Target.Name}</b> will go to all the right places.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hates the feeling of <b>{i.Target.Name}</b> inside {GPPHim(i.Unit)}, but keeps {GPPHim(i.Target)} down anyway.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> says this was all part of {GPPHis(i.Target)} plan; <b>{i.Unit.Name}</b> is confused by this.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> demands that <b>{i.Target.Name}</b> {GetRandomStringFrom("digest", "gurgle", "churn", "dissolve", "liquify", "melt", "break down")} quickly.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> begs <b>{i.Unit.Name}</b> to just end it but only receives a cruel laugh from the {GetRaceDescSingl(i.Unit)} in response.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> moans as <b>{i.Target.Name}</b> inadvertently massages {GPPHim(i.Unit)} with {GPPHis(i.Target)} struggles.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tells <b>{i.Target.Name}</b> to be thankful as {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} {IsAre(i.Unit)} far more gentle than {GPPHis(i.Unit)} friends.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> kicks at the walls of the {i.preyLocation.ToSyn()} confining {GPPHim(i.Target)}, sending ripples of pleasure across <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> struggling only serves to give <b>{i.Unit.Name}</b> a bit of indigestion.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lovingly wraps {GPPHis(i.Unit)} arms around {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {i.preyLocation.ToSyn()}, gently squeezing <b>{i.Target.Name}</b> as {GPPHe(i.Target)} {GetRandomStringFrom("digests away", "gurgles down", "churns away", "dissolves", "liquifies", "melts away", "breaks down")}.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> angrily punches {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> struggling persists.",
            priority: 8, conditional: InStomach),

            new EventString((i) => $"<b>{i.Unit.Name}</b> scratches the top of {GPPHis(i.Unit)} engorged {PreyLocStrings.ToSyn(PreyLocation.stomach)}, licking {GPPHis(i.Unit)} lips while looking at <b>{AttractedWarrior(i.Unit).Name}</b>.",
            priority: 8, conditional: ReqOSWStomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> imagines pressing {GPPHimself(i.Unit)} against <b>{AttractedWarrior(i.Unit).Name}</b> as <b>{i.Target.Name}</b> struggles between them.",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"<b>{i.Unit.Name}</b> blushes when <b>{AttractedWarrior(i.Unit).Name}</b> stares at {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: ReqOSWStomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> wonders if {GPPHe(i.Unit)} should ask <b>{AttractedWarrior(i.Unit).Name}</b> to come play with {GPPHis(i.Unit)} new assets after the battle.",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hopes that <b>{i.Target.Name}</b> will go to all the right places so that <b>{AttractedWarrior(i.Unit).Name}</b> will finally notice {GPPHim(i.Unit)}!",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"<b>{i.Unit.Name}</b> smirks when {GPPHis(i.Unit)} catch{EsIfSingular(i.Unit)} <b>{AttractedWarrior(i.Unit).Name}</b> glancing at {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: ReqOSWBelly),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tries to get {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} to settle down so that <b>{AttractedWarrior(i.Unit).Name}</b> doesn't notice.",
            priority: 8, conditional: ReqOSWBelly),
            new EventString((i) => $"<b>{i.Unit.Name}</b> waves at <b>{AttractedWarrior(i.Unit).Name}</b> while thrusting {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} out, hoping <b>{GPPHis(AttractedWarrior(i.Unit))}</b> recognize how virile {GPPHeIs(i.Unit)}.",
            priority: 8, conditional: (s) => ReqOSWBelly(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> asks <b>{AttractedWarrior(i.Unit).Name}</b> to rub {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} so {GPPHe(i.Unit)} won't get indigestion.",
            priority: 8, conditional: ReqOSWStomach),
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> insides are rearranged by {GPPHis(i.Unit)} most recent meal {GPPHe(i.Unit)} can't help but think about thrashing about with <b>{AttractedWarrior(i.Unit).Name}</b>.",
            priority: 8, conditional: ReqOSWLewd),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rests {GPPHis(i.Unit)} elbows on {GPPHis(i.Unit)} packed {PreyLocStrings.ToSyn(PreyLocation.stomach)} and admires <b>{AttractedWarrior(i.Unit).Name}</b>.",
            priority: 8, conditional: ReqOSWBelly),
            new EventString((i) => $"<b>{i.Unit.Name}</b> looks down at {GPPHis(i.Unit)} packed {PreyLocStrings.ToSyn(PreyLocation.stomach)} and wishes that <b>{AttractedWarrior(i.Unit).Name}</b> would fill {GPPHim(i.Unit)} in <i>other</i> ways. <b><i>Fun</i></b> ways...",
            priority: 8, conditional: s => ReqOSWBelly(s) && s.Unit.GetGender() == Gender.Female && Lewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sees <b>{CompetitionWarrior(i.Unit).Name}</b> flirting with <b>{AttractedWarrior(i.Unit).Name}</b> and thinks about cramming {GPPHim(CompetitionWarrior(i.Unit))} in {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} alongside <b>{i.Target.Name}</b>.",
            priority: 8, conditional: ReqSSWAndOSW),
            new EventString((i) => $"<b>{i.Unit.Name}</b> strikes a suggestive pose with {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} swaying to get <b>{AttractedWarrior(i.Unit).Name}</b>'s attention.",
            priority: 8, conditional: ReqOSWBelly),
            new EventString((i) => $"<b>{i.Unit.Name}</b> wants nothing more than to ravage <b>{AttractedWarrior(i.Unit).Name}</b> like {GPPHis(i.Unit)} acids are ravaging <b>{i.Target.Name}</b>!",
            priority: 8, conditional: s =>ReqOSWLewd(s) && HardVore(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> thinks about using {GPPHis(i.Unit)} newfound weight to pin <b>{AttractedWarrior(i.Unit).Name}</b> to the ground and have {GPPHis(i.Unit)} way with {GPPHim(AttractedWarrior(i.Unit))}, but decides against it.",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"<b>{i.Unit.Name}</b> wishes {GPPHeWas(i.Unit)} as close to <b>{AttractedWarrior(i.Unit).Name}</b> as {GPPHeWas(i.Unit)} with the prey in {GPPHis(i.Unit)} <b>{i.Target.Name}</b>-stuffed guts. But with less digesting and death.",
            priority: 8, conditional: s => ReqOSWLewd(s) && HardVore(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slaps {GPPHis(i.Unit)} tummy and says with confidence \"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> not the only thing I can fit in me!\" <b>{AttractedWarrior(i.Unit).Name}</b> blushes and looks away.",
            priority: 8, conditional: s => ReqOSWBelly(s) && Lewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> looks at {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling")}, {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and hopes that <b>{AttractedWarrior(i.Unit).Name}</b> doesn't think {GPPHe(i.Unit)} look{SIfSingular(i.Unit)} fat.",
            priority: 8, conditional: ReqOSWBelly),
            new EventString((i) => $"Watching <b>{AttractedWarrior(i.Unit).Name}</b>, <b>{i.Unit.Name}</b> gives a longing sigh and asks {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} for love advice. <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> mouth is too full of acids to give a proper answer, so <b>{i.Target.Name}</b> pouts instead.",
            priority: 8, conditional: ReqOSWStomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> begs <b>{i.Target.Name}</b> to hurry and {GetRandomStringFrom("digest", "gurgle", "churn", "dissolve", "liquify", "melt", "break down")} so {GPPHis(i.Unit)} new assets can impress <b>{AttractedWarrior(i.Unit).Name}</b>.",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"Even though <b>{i.Target.Name}</b> fills {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, <b>{i.Unit.Name}</b> still feels empty without <b>{AttractedWarrior(i.Unit).Name}</b>'s attentions.",
            priority: 8, conditional: ReqOSWBelly),
            new EventString((i) => $"<b>{i.Unit.Name}</b> feels queasy as {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} {GetRandomStringFrom("moans", "groans", "gurgles", "bubbles", "roars", "rumbles", "churns")} angrily; {GPPHe(i.Unit)} hate{SIfSingular(i.Unit)} the feeling of a live meal, but gladly does it to protect <b>{AttractedWarrior(i.Unit).Name}</b>.",
            priority: 8, conditional: ReqOSWStomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sees <b>{CompetitionWarrior(i.Unit).Name}</b> proudly displaying {GPPHis(CompetitionWarrior(i.Unit))} body to <b>{AttractedWarrior(i.Unit).Name}</b>. <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} starts to thrash wildly as <b>{i.Target.Name}</b> tries to escape the rage-induced digestion.",
            priority: 8, conditional: s => ReqSSWAndOSW(s) && ReqOSWBelly(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hates the taste of {GetRaceDescSingl(i.Target)} but knows they always melt into all the places <b>{AttractedWarrior(i.Unit).Name}</b> likes so {GPPHe(i.Unit)} pat{SIfSingular(i.Unit)} {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} with content.",
            priority: 8, conditional: ReqOSWStomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> heard that <b>{AttractedWarrior(i.Unit).Name}</b> likes big {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage")}. So, {GPPHe(i.Unit)} start{SIfSingular(i.Unit)} pushing her {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} upward, hoping that it will encourage the fat to go to her {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage")}.",
            priority: 8, conditional: (s) => ReqOSWBelly(s) && s.Unit.HasBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is extremely jealous of <b>{AttractedWarrior(i.Unit).Name}</b>'s stunning body and hopes <b>{i.Target.Name}</b> will make {GPPHis(i.Unit)} {(i.Unit.HasBreasts ? "breasts" : "muscles")} bigger.",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"As {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} lets out an intimidating {GetRandomStringFrom("roar", "groan", "gurgle", "rumble", "whine", "churn", "squish")} as it {GetRandomStringFrom("digests", "gurgles", "churns", "dissolves", "liquifies", "melts", "breaks down")} its hapless occupant, <b>{i.Unit.Name}</b> wonders why <b>{AttractedWarrior(i.Unit).Name}</b> is so tense around {GPPHim(i.Unit)}.",
            priority: 8, conditional: ReqOSWBelly),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> is terrified of becoming a layer of fat on <b>{i.Unit.Name}</b>. Meanwhile, <b>{i.Unit.Name}</b> just <i>knows</i> that this digestion will be the one to finally entice <b>{AttractedWarrior(i.Unit).Name}</b>.",
            priority: 8, conditional: ReqOSW),
            new EventString((i) => $"<b>{i.Unit.Name}</b> licks the top of {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} with {GPPHis(i.Unit)} tongue, trying to entice <b>{AttractedWarrior(i.Unit).Name}</b>, whom goes pale as {GPPHe(AttractedWarrior(i.Unit))} mistake{SIfSingular(AttractedWarrior(i.Unit))} the gesture as a foreboding threat!",
            priority: 8, conditional: ReqOSWBelly),
            //Panther flirt
            new EventString((i) => $"<b>{i.Unit.Name}</b> knows that it is often best to hunt alone, but {GPPHe(i.Unit)} can't help but accompany <b>{AttractedWarrior(i.Unit).Name}</b> wherever {GPPHe(AttractedWarrior(i.Unit))} go{EsIfSingular(AttractedWarrior(i.Unit))}.",
            priority: 8, actorRace: Race.Panthers, conditional: ReqOSW),
            new EventString((i) => $"As {GPPHis(i.Unit)} meal squirms within {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}{PluralForPart(i.preyLocation)}, <b>{i.Unit.Name}</b> catches <b>{AttractedWarrior(i.Unit).Name}</b> staring at {GPPHim(i.Unit)} just as {GPPHe(i.Unit)} finish{EsIfSingular(i.Unit)} licking {GPPHis(i.Unit)} paw clean. In a bit of a panic, {GPPHe(i.Unit)} flash{EsIfSingular(i.Unit)} a toothy grin. Surprisingly {GPPHe(AttractedWarrior(i.Unit))} do{EsIfSingular(AttractedWarrior(i.Unit))}n't seem all that scared and even smile back!",
            priority: 8, actorRace: Race.Panthers, conditional: ReqOSW),
            new EventString((i) => $" Displaying {GPPHis(i.Unit)} hunting prowess, <b>{i.Unit.Name}</b> arrogantly struts about, displaying {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} to everyone watching. {GPPHe(i.Unit)} becomes somewhat nervous however when <b>{AttractedWarrior(i.Unit).Name}</b> begins watching but is encouraged as {GPPHe(AttractedWarrior(i.Unit))} too congratulate{SIfSingular(AttractedWarrior(i.Unit))} {GPPHim(i.Unit)} on the catch!",
            priority: 8, actorRace: Race.Panthers, conditional: ReqOSW),


            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("boobs wobble", "boobies wobble", "breasts wobble", "tits wobble", "titties wobble", "bosoms wobble", "jugs wobble", "knockers wobble", "hooters wobble", "milkers wobble", "cleavage wobbles", "bust wobbles")} vigorously as <b>{i.Target.Name}</b> attempts to escape {GPPHis(i.Target)} prison.",
            priority: 8, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rubs {GPPHis(i.Unit)} {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")}, trying to alleviate the soreness from absorbing <b>{i.Target.Name}</b>.",
            priority: 8, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rubs {GPPHis(i.Unit)} back as her {GetRandomStringFrom("boobs jiggle", "boobies jiggle", "breasts jiggle", "tits jiggle", "titties jiggle", "bosoms jiggle", "jugs jiggle", "knockers jiggle", "hooters jiggle", "milkers jiggle", "cleavage jiggles", "bust jiggles")} as {GPPHis(i.Unit)} prey fights for {GPPHis(i.Target)} life.",
            priority: 8, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grips {GPPHis(i.Unit)} now engorged {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")} in both hands and squeezes them, forcing a bit of fatty milk to trickle from {GPPHis(i.Unit)} nipples.",
            priority: 8, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> pinches {GPPHis(i.Unit)} sore nipples as the essence of her most recent prey fills {GPPHis(i.Unit)} {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")} with creamy milk.",
            priority: 8, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> begins to lactate as {GPPHis(i.Unit)} prey begins to break down, the process excites {GPPHis(i.Unit)} and {GPPHe(i.Unit)} can't help but suckle {GPPHis(i.Unit)} own {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")}.",
            priority: 8, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> moans as {GPPHis(i.Unit)} {GetRandomStringFrom("boobs heave", "boobies heave", "breasts heave", "tits heave", "titties heave", "bosoms heave", "jugs heave", "knockers heave", "hooters heave", "milkers heave", "cleavage heaves", "bust heaves")}. The struggles of {GPPHis(i.Unit)} prey dying inside of {GPPHim(i.Unit)} arouses the busty warrior to no end.",
            priority: 8, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> finally feels like a true woman with her flourishing {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")}.",
            priority: 8, conditional: InBreasts),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("boobs become", "boobies become", "breasts become", "tits become", "titties become", "bosoms become", "jugs become", "knockers become", "hooters become", "milkers become", "cleavage becomes", "bust becomes")} so laden with prey that every step becomes a struggle, {GPPHe(i.Unit)} can barely move with the swell of life struggling within {GPPHim(i.Unit)}.",
            priority: 8, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> wishes that <b>{AttractedWarrior(i.Unit).Name}</b> would come over and hold {GPPHis(i.Unit)} {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")} as {GPPHe(i.Unit)} {GetRandomStringFrom("digests", "gurgles", "churns", "dissolves", "liquifies", "melts", "breaks down", "lactifies")} {GPPHis(i.Unit)} prey.",
            priority: 8, conditional: s => InBreasts(s) && ReqOSW(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> smacks {GPPHis(i.Unit)} {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")} to make the struggling prey within settle down, but {GPPHis(i.Unit)} {GetRandomStringFrom("boobs are", "boobies are", "breasts are", "tits are", "titties are", "bosoms are", "jugs are", "knockers are", "hooters are", "milkers are", "cleavage is", "bust is")} overly sensitive as they absorb <b>{i.Target.Name}</b>, causing {GPPHis(i.Unit)} to let out a shocked gasp.",
            priority: 8, conditional: InBreasts),

            new EventString((i) => $"Slowly turning an opponent into nothing more than a slushie of meat and bile inside of {GPPHim(i.Unit)} really turns <b>{i.Unit.Name}</b> on. {Capitalize(GPPHe(i.Unit))} begin fingering {GPPHimself(i.Unit)}. The new wave of movement results in panicked screams from within {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} as <b>{i.Target.Name}</b> is covered in {GetRandomStringFrom("digestive", "melty", "acidic", "caustic", "predatory", "flesh-melting")} juices.",
            priority: 8, conditional: s => Lewd(s) && HardVore(s) ),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> futile attempts to free {GPPHimself(i.Target)} from an {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "acidic", "caustic", "grim", "predatory", "flesh-melting")} {GetRandomStringFrom("fate", "doom", "end", "grave", "death")} lights a fire in {GPPHis(i.Target)} predator's loins. <b>{i.Unit.Name}</b>, in a flurry of passion places {GPPHis(i.Unit)} thrashing bulge of a gut against {GPPHis(i.Unit)} most sensitive parts.",
            priority: 8, conditional: s => Lewd(s) && InStomachOrWomb(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> knows that the only way to increase {GPPHis(i.Unit)} attractiveness is for the struggling meal within {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} to fill {GPPHim(i.Unit)} out. Both to encourage growth and derive pleasure, {GPPHe(i.Unit)} begin{SIfSingular(i.Unit)} to massage {GPPHis(i.Unit)} {(i.Unit.HasDick ? "dick" : "breasts")}.",
            priority: 8, conditional: s => Lewd(s) && InStomachOrWomb(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> uses {GPPHis(i.Target)} entire body to thrash and struggle against <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach walls. The predator lets out a scream of pleasure and has to steady {GPPHimself(i.Unit)}. Thankfully {GPPHis(i.Unit)} sagging gut covers {GPPHis(i.Unit)} now moistened nethers.",
            priority: 8, conditional: s => Lewd(s) && InStomach(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> tenses {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} a little and says: \"Settle down in there already! The only noise I want to hear from you is some splatting on the ground when I {GetRandomStringFrom("dispose of you", "shit you out", "crap you out", "squeeze you out", "poop you out", "dump you")} later.\"",
            priority: 8, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tenses {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} a little and says: \"Settle down in there already! The only way I want you to grab my attention is as noise under my tail.\"",
            priority: 8, conditional: s => InStomach(s) && Farts(s) && ActorTail(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> winces as {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, riddled with handprints and strained bulges, attempts to {GetRandomStringFrom("digest", "gurgle", "churn", "dissolve", "liquify", "melt", "break down")} <b>{i.Target.Name}</b> who still fights from within {GPPHim(i.Unit)}. \"Please, settle down!\" {GPPHe(i.Unit)} says, attempting to smooth {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous")} stomach, \"It'll be over much sooner if you just stop fighting!\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Oh my!\" <b>{i.Unit.Name}</b> exclaims as {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} wobbles as <b>{i.Target.Name}</b> delivers a powerful kick against the {PreyLocStrings.ToSyn(PreyLocation.stomach)}'s walls. \"You're so strong!\" {GPPHe(i.Unit)} say{SIfSingular(i.Unit)} coyly with an admiring smack against {GPPHis(i.Unit)} bouncing {PreyLocStrings.ToSyn(PreyLocation.stomach)}. \"Just not strong enough.\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Ugh, stop moving already!\" <b>{i.Unit.Name}</b> shouts with distain at {GPPHis(i.Unit)} barely wobbling {PreyLocStrings.ToSyn(PreyLocation.stomach)}. \"You were a pathetic warrior and a pathetic meal! The best thing you can do now is just settle in and accept your {GetRandomStringFrom("fate", "doom", "end", "grave", "death")}.\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"You were hard to get down, I’ll give you that,\" <b>{i.Unit.Name}</b> says to {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, sagging low from the weight of the living meal within. \"But it's about time you become part of a <i>real</i> warrior,\" {GPPHe(i.Unit)} says, proudly rubbing {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous")} gut.",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"You'd better not go to my thighs,\" <b>{i.Unit.Name}</b> warns {GPPHis(i.Unit)} meal as it thrashes about inside of {GPPHim(i.Unit)}. \"I'm trying to maintain a certain figure,\" {GPPHe(i.Unit)} taunt{SIfSingular(i.Unit)} as {GPPHe(i.Unit)} run{SIfSingular(i.Unit)} {GPPHis(i.Unit)} hands across {GPPHis(i.Unit)} chest and {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional:s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"I thought your race was supposed to be intimidating or something, not delicious!\" <b>{i.Unit.Name}</b> teases {GPPHis(i.Unit)} meal followed by a burp, \"<i>{GetRandomStringFrom("*Burp!*", "*Burrp!*", "*Buurp*", "*Buoorp!*", "*Urp*", "*Urrp!*", "*Uorrp!*", "*UOOORRP!*")}</i> But hey, I'm not complaining!\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"You thought you were so special,\" <b>{i.Unit.Name}</b> states with disdain at the {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} hanging off {GPPHim(i.Unit)}, \"Now you're just my food. But don't worry,\" {GPPHe(i.Unit)} chuckle{SIfSingular(i.Unit)} as a cruel smile crosses {GPPHis(i.Unit)} lips, \"You'll just be {GetRandomStringFrom("shit", "scat", "crap", "manure", "turds")} soon enough!\"",
            priority: 8, conditional: s => InStomach(s) && Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Once you soften up, I'm going to let <b>{AttractedWarrior(i.Unit).Name}</b> use my belly as a pillow,\" <b>{i.Unit.Name}</b> states as {GPPHis(i.Unit)} prey makes {GPPHis(i.Unit)} enticing {PreyLocStrings.ToSyn(PreyLocation.stomach)} wobble.",
            priority: 8, conditional: s => ReqOSWBelly(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"A warrior must keep {GPPHis(i.Unit)} body strong,\" <b>{i.Unit.Name}</b> declares with a smile as {GPPHis(i.Unit)} hands caress {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, \"Your meat will be very useful to me.\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"I think it's about time I found someplace to rest and {GetRandomStringFrom("digest", "gurgle you", "churn you up", "dissolve you", "liquify you", "melt you down", "break you down")}, what do you think?\" <b>{i.Unit.Name}</b> questions {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. A response comes but the words are completely muffled by {GPPHis(i.Unit)} stomach walls and the roars of digestion. \"I'm glad you agree!\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"O-Oh my!\" <b>{i.Unit.Name}</b> exclaims as {GPPHis(i.Unit)} sagging {GetRandomStringFrom("belly begins", "stomach begins", "gut begins", "guts begin", "midsection begins", "tummy begins", "tum begins", "abdomen begins", "depths begin", "innards begin", "insides begin")} to sway back and forth with muffled lust-filled moans as <b>{i.Target.Name}</b> pleasures {GPPHimself(i.Target)}. \"You're a naughty one, aren't you!\"",
            priority: 8, conditional: s => InStomach(s) && Lewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"You know,\" <b>{i.Unit.Name}</b> idly muses while stroking {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, \"It's hard to feel lonely when you've got someone so close by... A shame you won't very long, though~\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Ha! You thought you could beat me?\" <b>{i.Unit.Name}</b> proclaims as {GPPHis(i.Unit)} {GetRandomStringFrom("belly shakes", "stomach shakes", "gut", "guts shake", "midsection shakes", "tummy shakes", "tum shakes", "abdomen shakes", "depths shake", "innards shake", "insides shake")} violently from the agitated foe trapped within. \"Well, enjoy my acids for as long as you have left! You're nothing but pudge in the making now!",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Ha! You thought you could beat me?\" <b>{i.Unit.Name}</b> proclaims as {GPPHis(i.Unit)} {GetRandomStringFrom("belly shakes", "stomach shakes", "gut", "guts shake", "midsection shakes", "tummy shakes", "tum shakes", "abdomen shakes", "depths shake", "innards shake", "insides shake")} violently from the agitated foe trapped within. \"Well, enjoy my acids for as long as you have left! You're nothing but pudge in the making now!  And probably some \'fudge\' a little bit later~",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s) && Scat(s)),
            new EventString((i) => $"Despite being eaten, <b>{i.Target.Name}</b> thrashes wildly, causing {GPPHis(i.Target)} devourer to begin burping as {GPPHis(i.Target)} struggles bring on indigestion. \"Ugh, maybe if you fought this hard <i>before</i> I ate you the tables would be turned right now!\" <b>{i.Unit.Name}</b> states, wincing from {GPPHis(i.Unit)} meal's efforts.",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"I know it may not be {GetRandomStringFrom("the best for you", "how you thought your day would go", "in your best interest", "what you wanted")},\" <b>{i.Unit.Name}</b> says, rubbing {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} as {GPPHis(i.Unit)} prey settles in, \"but I really do hope you enjoy your stay in my {GetRandomStringFrom("belly", "stomach", "gut", "guts", "midsection", "tummy", "tum", "abdomen", "depths", "innards", "insides", "bowels", "intestines")}!\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Any last words?\" <b>{i.Unit.Name}</b> asks {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} as bulges appear and disappear from the struggles within. The only response {GPPHe(i.Unit)} get{SIfSingular(i.Unit)} being a prolonged, muffled scream. \"{GetRandomStringFrom("Guess not.", "I suppose not.", "Oh, that's a shame.", "Oops, too late.", "Hm, that's unfortunate.", "Yeesh, nevermind then...", "Ouch, that sounded painful.", "Sorry, didn't quite catch that.")}\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Fighting as much as you are almost makes it seem that you think you have any chance of escaping, but you don't.\" <b>{i.Unit.Name}</b> states very plainly to {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} as {GPPHis(i.Unit)} prey tries {GPPHis(i.Target)} best to escape. \"You should probably stop embarrassing yourself and just give up. Or at least try and make this pleasurable for me.\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"<b>{AttractedWarrior(i.Unit).Name}</b> better appreciate how big I'm going to get from {GetRandomStringFrom("digesting you", "gurgling you", "churning you", "dissolving you", "liquifying you", "melting you", "breaking you down")} or I swear I'm going to flatten {GPPHim(AttractedWarrior(i.Unit))}.\" <b>{i.Unit.Name}</b> says lifting {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} with both hands as {GPPHis(i.Unit)} prey sloshes about inside.",
            priority: 8, conditional: s => ReqOSWBelly(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"I've got to say, having a {GetRandomStringFrom("big", "large", "huge", "massive")} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} feels amazing and it's all thanks to you,\" <b>{i.Unit.Name}</b> says smiling and running {GPPHis(i.Unit)} hands across {GPPHis(i.Unit)} humungous {PreyLocStrings.ToSyn(PreyLocation.stomach)}, \"It almost makes me reconsider {GetRandomStringFrom("digesting you", "gurgling you", "churning you", "dissolving you", "liquifying you", "melting you", "breaking you down")}... almost.\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"If it makes the acids sting a little less, you were absolutely delicious!\" <b>{i.Unit.Name}</b> compliments {GPPHis(i.Unit)} still living meal as {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} shifts from the fight going on within.",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} lets out a low gurgle, the predator speaks to the furious prey within {GPPHis(i.Unit)} stomach, \"Hey, look at the bright side! At least I didn't chew,\" {GPPHe(i.Unit)} say{SIfSingular(i.Unit)} trying to contain the bulges appearing on the surface of {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, \"Just a bit more time before you're gone~\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"A horrified scream erupts from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} as it swings back and forth. The predator laughs and rubs the top of {GPPHis(i.Unit)} gut, \"You can yell all you want. Nobody's going to hear you from inside there.\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Ahh... Yeah, move just like that! Keep struggling in there~\" <b>{i.Unit.Name}</b> shouts, encouraging {GPPHis(i.Unit)} wiggling prey to keep moving as {GPPHe(i.Unit)} pinch{EsIfSingular(i.Unit)} {GPPHis(i.Unit)} nipples, almost drawing blood as {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} bounces. \"Oh yeah! I-I'm so c-close! Aaah!\"",
            priority: 8, conditional: s => InStomach(s) && Lewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"With a heavy breath and a hoisting of {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, <b>{i.Unit.Name}</b> stands ready to continue fighting, \"Rest assured, {GetRandomStringFrom("eating you", "devouring you", "voring you", "gobbling you", "swallowing you", "gulping you", "slurping you down", "wolfing you down", "consuming you")} wasn't what I wanted.  However...\" {GPPHis(i.Unit)} stomach gurgles angrily as it starts to break down the living meal within, \"{GetRandomStringFrom("digesting you", "gurgling you", "churning you", "dissolving you", "liquifying you", "melting you", "breaking you down")} is my duty.\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"As {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} bounces and sways from {GPPHis(i.Unit)} meal's desperate attempt to escape, <b>{i.Unit.Name}</b> talks to the {GetRandomStringFrom("digesting", "gurgling", "churning", "dissolving", "liquifying", "melting")} prey filling {GPPHim(i.Unit)} up, \"Don’t worry, my {GetRandomStringFrom("belly", "stomach", "gut", "guts", "midsection", "tummy", "abdomen", "depths", "innards", "insides", "bowels", "intestines")} will make short work of you, and you'll soon be a part of my wonderful figure.\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Tell you what,\" <b>{i.Unit.Name}</b> says to the prey making a bulge in {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, \"If you can last for a few hours in there, I'll let you out! If you can't...\" {GPPHe(i.Unit)} grab{SIfSingular(i.Unit)} the sides of {GPPHis(i.Unit)} full {PreyLocStrings.ToSyn(PreyLocation.stomach)} and shake{SIfSingular(i.Unit)} it side to side, disorienting its contents, \"You'll make my ass bigger!\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"A violent kick from within sends ripples across <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} bringing forth a belch and pained sigh from {GPPHis(i.Unit)} lips, \"Come on now, there's no shame in losing. You fought well, but that's over now. So stop embarrassing yourself and just let this happen. This is no easy task for me either; I imagine I'll have indigestion for hours because of you!\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"After another futile attempt to break free, the prey inside <b>{i.Unit.Name}</b> breaks down and begins to cry. \"Hey now, no need for that. Don't worry,\" {GPPHe(i.Unit)} say{SIfSingular(i.Unit)} as {GPPHe(i.Unit)} press{EsIfSingular(i.Unit)} {GPPHis(i.Unit)} hands into {GPPHis(i.Unit)} sobbing {PreyLocStrings.ToSyn(PreyLocation.stomach)}, \"after I'm done digesting you we'll go to your home and reunite the whole family, doesn't that sound nice?\" With that, {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} returns to a mess of ripples and bulges.",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Ugh, why do I keep doing this to myself?\" <b>{i.Unit.Name}</b> asks {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} as it sags from the heavy prey inside. \"I'm supposed to be on a diet!  But instead of a healthy meal, I end up {GetRandomStringFrom("eating", "devouring", "voring", "gobbling", "swallowing", "gulping", "slurping", "wolfing down", "consuming")} a fat idiot like you instead!\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"You must be lonely in there!\" <b>{i.Unit.Name}</b> says to the prey making {GPPHis(i.Unit)} gut jiggle, \"Don't worry, we'll find you a friend very soon, I'm sure of it.\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Hurry up and {GetRandomStringFrom("digest", "gurgle", "churn", "dissolve", "liquify", "melt", "break down")}, will you?\" <b>{i.Unit.Name}</b> taunts while {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} {GetRandomStringFrom("stroking", "rubbing", "petting", "feeling", "massaging", "groping", "molesting", "poking")} {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. \"I've had {GetRandomStringFrom("a stressful", "a horrible", "an awful", "an annoying", "an irritating", "the worst", "a shit")} {GetRandomStringFrom("day", "night", "morning", "evening", "afternoon", "week", "month", "few days")} and I find that taking {GetRandomStringFrom("a", "one of those")} {GetRandomStringFrom("nice and ", "nice, ", " ")}{GetRandomStringFrom("huge", "massive", "big", "long", "thick", "fat", "girthy", "heavy", "relaxing", "refreshing", "easy", "smoothe", "soft", "quick", "hot", "bone-filled")} {GetRandomStringFrom("shits", "dumps", "craps")} cheers me right up.\"",
            priority: 8, conditional: s => InStomach(s) && ActorHumanoid(s) && Scat(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> tells <b>{i.Target.Name}</b> that {GPPHe(i.Unit)}'ll enjoy {GetRandomStringFrom("gushing", "splurting", "spurting", "spraying", "shooting", "splattering", "cumming", "nutting", "jizzing")} {GPPHis(i.Target)} remains all over the ground.",
            priority: 8, conditional: s => InBalls(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tells <b>{i.Target.Name}</b> that {GPPHe(i.Unit)}'ll enjoy {GetRandomStringFrom("gushing", "splurting", "spurting", "spraying", "shooting", "splattering", "cumming", "nutting", "jizzing")} {GPPHis(i.Target)} remains into a condom.",
            priority: 8, conditional: s => InBalls(s) && Lewd(s) && Condoms(s)),

            new EventString((i) => $"<b>{i.Target.Name}</b> sits in {GPPHis(i.Target)} leader's {PreyLocStrings.ToSyn(PreyLocation.stomach)}, rubbing around. <b>{i.Unit.Name}</b> reassures {GPPHim(i.Target)} \"You have served me well, warrior. Soon you will be forever with me as a layer of {GetRandomStringFrom("flab", "fat", "pudge", "heft", "chub", "paunch", "blubber")} hugging my {GetRandomStringFrom("abs", "belly", "stomach", "gut", "midsection", "middle", "tummy", "tum", "abdomen")}.\"",
            priority: 9, conditional: s => ActorLeader(s) && InStomach(s) && Friendly(s)), //This one is meant to imply that the eaten unit sees being eaten by the leader as a great honour
            new EventString((i) => $"<b>{i.Target.Name}</b> sits in {GPPHis(i.Target)} leader's {PreyLocStrings.ToSyn(PreyLocation.stomach)}, rubbing around. <b>{i.Unit.Name}</b> reassures {GPPHim(i.Target)} \"You have served me well, warrior. Soon you will be forever with me as a layer of {GetRandomStringFrom("flab", "fat", "pudge", "heft", "chub", "paunch", "blubber")} hugging my {GetRandomStringFrom("abs", "belly", "stomach", "gut", "midsection", "middle", "tummy", "tum", "abdomen")} and {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")}.\"",
            priority: 9, conditional: s => ActorLeader(s) && InStomach(s) && Friendly(s) && s.Unit.HasBreasts),
            new EventString((i) => $"<b>{i.Target.Name}</b> sits in {GPPHis(i.Target)} leader's {PreyLocStrings.ToSyn(PreyLocation.stomach)}, rubbing around. <b>{i.Unit.Name}</b> reassures {GPPHim(i.Target)} \"You have served me well, warrior. Soon you will be forever with me as a layer of {GetRandomStringFrom("flab", "fat", "pudge", "heft", "chub", "paunch", "blubber")} hugging my {GetRandomStringFrom("abs", "belly", "stomach", "gut", "midsection", "middle", "tummy", "tum", "abdomen")}.  Regretfully, a bit of you must slide forth from my great {GetRandomStringFrom("ass", "butt", "bum", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty", "moon", "tush", "posterior", "derriere")} as {GetRandomStringFrom("shit", "scat", "crap", "manure", "turds", "dung", "waste")}, but I shall see to it that you are honoured during your passing.\"",
            priority: 9, conditional: s => ActorLeader(s) && InStomach(s) && Friendly(s) && Scat(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> sits in {GPPHis(i.Target)} leader's {PreyLocStrings.ToSyn(PreyLocation.stomach)}, rubbing around. <b>{i.Unit.Name}</b> reassures {GPPHim(i.Target)} \"You have served me well, warrior. Soon you will be forever with me as a layer of {GetRandomStringFrom("flab", "fat", "pudge", "heft", "chub", "paunch", "blubber")} hugging my {GetRandomStringFrom("abs", "belly", "stomach", "gut", "midsection", "middle", "tummy", "tum", "abdomen")} and {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")}.  Regretfully, a bit of you must slide forth from my great {GetRandomStringFrom("ass", "butt", "bum", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty", "moon", "tush", "posterior", "derriere")} as {GetRandomStringFrom("shit", "scat", "crap", "manure", "turds", "dung", "waste")}, but I shall see to it that you are honoured during your passing.\"",
            priority: 9, conditional: s => ActorLeader(s) && InStomach(s) && Friendly(s) && Scat(s) && s.Unit.HasBreasts),

            new EventString((i) => $"\"You have been a thorn in my side for a long time,\" says <b>{i.Unit.Name}</b>. \"but soon...you will only be {GetRandomStringFrom("flab", "fat", "pudge", "heft", "chub", "paunch", "blubber")} on my {GetRandomStringFrom("abs", "belly", "stomach", "gut", "middle", "midsection", "tummy", "tum", "abdomen")} and {GetRandomStringFrom("ass", "asscheeks", "buns", "butt", "buttcheeks", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty", "moon", "tush", "posterior", "derriere")}.\"",
            priority: 9, conditional: s => ActorLeader(s) && InStomach(s) && TargetLeader(s)),
            new EventString((i) => $"\"You have been a thorn in my side for a long time,\" says <b>{i.Unit.Name}</b>. \"but soon...you will only be {GetRandomStringFrom("flab", "fat", "pudge", "heft", "chub", "paunch", "blubber")} on my {GetRandomStringFrom("abs", "belly", "stomach", "gut", "middle", "midsection", "tummy", "tum", "abdomen")} and a bunch of {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky", "bone-filled")} {GetRandomStringFrom("shit", "scat", "crap", "manure", "turds", "slop", "dung", "waste")} falling from my {GetRandomStringFrom("ass", "asscheeks", "buns", "butt", "buttcheeks", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty", "moon", "tush", "posterior", "derriere", "anus", "rectum", "anal sphincter", "outpipe", "crack")}.\"",
            priority: 9, conditional: s => ActorLeader(s) && InStomach(s) && TargetLeader(s) && Scat(s)),
            new EventString((i) => $"\"You have been a thorn in my side for a long time,\" says <b>{i.Unit.Name}</b>. \"but soon...you will only be {GetRandomStringFrom("flab", "fat", "pudge", "heft", "chub", "paunch", "blubber")} on my {GetRandomStringFrom("abs", "belly", "stomach", "gut", "middle", "midsection", "tummy", "tum", "abdomen")}, {GetRandomStringFrom("ass", "asscheeks", "buns", "butt", "buttcheeks", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty", "moon", "tush", "posterior", "derriere")}, and {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")}.\"",
            priority: 9, conditional: s => ActorLeader(s) && InStomach(s) && TargetLeader(s) && s.Unit.HasBreasts),
            new EventString((i) => $"\"You have been a thorn in my side for a long time,\" says <b>{i.Unit.Name}</b>. \"but soon...you will only be {GetRandomStringFrom("flab", "fat", "pudge", "heft", "chub", "paunch", "blubber")} on my {GetRandomStringFrom("abs", "belly", "stomach", "gut", "middle", "midsection", "tummy", "tum", "abdomen")} and {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")}, and a bunch of {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky", "bone-filled")} {GetRandomStringFrom("shit", "scat", "crap", "manure", "turds", "slop", "dung", "waste")} falling from my {GetRandomStringFrom("ass", "asscheeks", "buns", "butt", "buttcheeks", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty", "moon", "tush", "posterior", "derriere", "anus", "rectum", "anal sphincter", "outpipe", "crack")}.\"",
            priority: 9, conditional: s => ActorLeader(s) && InStomach(s) && TargetLeader(s) && Scat(s) && s.Unit.HasBreasts),
            

            new EventString((i) => $"<b>{i.Target.Name}</b> moans and groans blissfully in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)}.",
            priority: 9, conditional: Cursed),
            new EventString((i) => $"<b>{i.Target.Name}</b> knows what will happen to {GPPHim(i.Target)} if {GPPHe(i.Target)} do{EsIfSingular(i.Target)} not escape from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)}, but {GPPHeIsAbbr(i.Target)} just too horny to care.",
            priority: 9, conditional: s=> Cursed(s) && Lewd(s)),

            new EventString((i) => $" \"Look at you, the Big Bad Wolf reduced to a mere bulge in my Big Fat Gut\" <b>{i.Unit.Name}</b> laughs, taunting <b>{i.Target.Name}</b> as the wolf squirms within {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            targetRace: Race.Wolves, priority: 10, conditional: s => ActorLeader(s) && InStomach(s) && TargetLeader(s)),
            new EventString((i) => $" \"Look at you, the Big Bad Wolf reduced to a mere bulge in my Big Fat Gut\" <b>{i.Unit.Name}</b> laughs, taunting <b>{i.Target.Name}</b> as the wolf squirms within {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. \"Soon to be a Big Fat {GetRandomStringFrom("Shit", "Crap", "Dump", "Turd", "Bowel Movement")} {GetRandomStringFrom("as well~", "too~", "come to think of it~")}",
            targetRace: Race.Wolves, priority: 10, conditional: s => ActorLeader(s) && InStomach(s) && TargetLeader(s) && Scat(s)),

            new EventString((i) => $"\"You better get {GetRandomStringFrom("comfy", "cozy", "comfortable", "settled in")}, I have a long digestive {GetRandomStringFrom("system", "tract")}\" <b>{i.Unit.Name}</b> teases <b>{i.Target.Name}</b> as the {GetRaceDescSingl(i.Target)} tries frantically to escape.",
            actorRace: Race.Taurus, priority: 9, conditional: InStomach),
            //Creds to Cartography!
            new EventString((i) => $"With a sudden look on {GPPHis(i.Unit)} face, <b>{i.Unit.Name}</b> looks down and asks <b>{i.Target.Name}</b>, \"Hey, while I've got you in my pouch, can you tell me why so many races look like you guys? Like, what's up with that?\"",
            actorRace: Race.Kangaroos, targetRace: Race.Humans, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"I almost pity you pouchless, furless, and hairless people.\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b>. \"Almost enough to let you out of my pouch. Almost.\"",
            actorRace: Race.Kangaroos, targetRace: Race.Humans, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"You know, I wasn't actually certain if my pouch would be able to hold you. You looked pretty big,\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b>. \"You won't be very big much longer, though...\"",
            actorRace: Race.Kangaroos, targetRace: Race.Taurus, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"You know if you gave me that \"gun\" thing you have I would happily let you out?\" <b>{i.Unit.Name}</b> proposes to the {GetRaceDescSingl(i.Target)} in {GPPHis(i.Unit)} pouch. Very quickly <b>{i.Target.Name}</b> spitefully replies \"You think I'd give a {GetRandomStringFrom("varmint", "glorified wallaby")} like you a {GetWeaponTrueName(i.Target.GetBestRanged(), i.Target)}{GetRandomStringFrom("?", $"? Don't make me laugh!", "? Are you crazy!?")}\" At this <b>{i.Unit.Name}</b> proceeds to reach into {GPPHis(i.Unit)} own pouch and punch <b>{i.Target.Name}</b> in the face before crossing {GPPHis(i.Target)} arms in anger.",
            actorRace: Race.Kangaroos, targetRace: Race.Taurus, priority: 9, conditional: s => InBreasts(s) && (s.Target.HasSpecificWeapon(ItemType.CompoundBow) || s.Target.HasSpecificWeapon(ItemType.Bow))),
            new EventString((i) => $"\"You know if you gave me one of those \"gun\" things you guys use I would happily let you out?\" <b>{i.Unit.Name}</b> proposes to the {GetRaceDescSingl(i.Target)} in {GPPHis(i.Unit)} pouch. Very quickly <b>{i.Target.Name}</b> replies \"Even if I had one I wouldn't give it to you, you {GetRandomStringFrom("lousy varmint", "glorified wallaby")}!\" At this <b>{i.Unit.Name}</b> proceeds to reach into {GPPHis(i.Unit)} own pouch and punch <b>{i.Target.Name}</b> in the face before crossing {GPPHis(i.Target)} arms in disappointment.",
            actorRace: Race.Kangaroos, targetRace: Race.Taurus, priority: 9, conditional: s => InBreasts(s) && (s.Target.HasSpecificWeapon(ItemType.Axe) || s.Target.HasSpecificWeapon(ItemType.Mace))),
            new EventString((i) => $"\"Shame you don't have antlers. Those would have made a great trophy.\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b>, to which the deer answers \"Like I'd let you have them if I had them.\"",
            actorRace: Race.Kangaroos, targetRace: Race.Deer, priority: 9, conditional: s => InBreasts(s) && !s.Target.HasDick),
            new EventString((i) => $"\"Wonder if I'll be able to pull out your antlers before they merge with my pouch...\" <b>{i.Unit.Name}</b> idly says out loud. From within said pouch a muffled \"What?\" can be heard, which <b>{i.Unit.Name}</b> responds to with a quick \"Nothing!\"",
            actorRace: Race.Kangaroos, targetRace: Race.Deer, priority: 9, conditional: s => InBreasts(s) && s.Target.HasDick),
            new EventString((i) => $"During a lull in <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> struggles, <b>{i.Unit.Name}</b> says to {GPPHim(i.Target)} \"Isn't it like being back in your mommy's pouch? Don't worry, you'll never have to leave again.\"",
            actorRace: Race.Kangaroos, targetRace: Race.Kangaroos, priority: 9, conditional: s => InBreasts(s) && s.Target.Side != s.Unit.Side),
            new EventString((i) => $"After stopping {GPPHis(i.Unit)} struggles for a moment, <b>{i.Target.Name}</b> speaks to <b>{i.Unit.Name}</b>. \"Just so you know, there's a spot in here that smells, you might want to clean it.\" To this <b>{i.Unit.Name}</b> haltingly says \"Thank you?\"",
            actorRace: Race.Kangaroos, targetRace: Race.Dogs, priority: 9, conditional: InBreasts),
            new EventString((i) => $"As a soft rumbling begins to come from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch, {GetRandomStringFrom($"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} looks at {GPPHis(i.Unit)} pouch for a moment before asking \"Are you purring?\" After a few seconds, <b>{i.Target.Name}</b> quietly answers \"Yes.\"",
            actorRace: Race.Kangaroos, targetRace: Race.Cats, priority: 9, conditional: InBreasts),
            new EventString((i) => $"As a soft rumbling begins to come from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch, {GetRandomStringFrom($"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} looks at {GPPHis(i.Unit)} pouch for a moment before asking \"Are you purring?\" After another few moments, {GetRandomStringFrom($"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} asks \"Did you fall asleep!?\"",
            actorRace: Race.Kangaroos, targetRace: Race.Cats, priority: 9, conditional: InBreasts),
            new EventString((i) => $"As a soft rumbling begins to come from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch, {GetRandomStringFrom($"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} looks at {GPPHis(i.Unit)} pouch for a moment before asking \"Are you purring?\" After another few moments, {GetRandomStringFrom($"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} asks \"Did you fall asleep!?\"",
            actorRace: Race.Kangaroos, targetRace: Race.Panthers, priority: 9, conditional: InBreasts),
            new EventString((i) => $"As a soft rumbling begins to come from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch, {GetRandomStringFrom($"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} looks at {GPPHis(i.Unit)} pouch for a moment before asking \"Are you purring?\" After a few seconds, <b>{i.Target.Name}</b> answers \"Maybe.\"",
            actorRace: Race.Kangaroos, targetRace: Race.Panthers, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"Enjoying your new den?\" <b>{i.Unit.Name}</b> asks {GetRandomStringFrom($"<b>{i.Target.Name}</b>", "the vulpine")} as {GPPHe(i.Target)} struggle uselessly against {GetRandomStringFrom($"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b>", $"the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))}")} pouch.",
            actorRace: Race.Kangaroos, targetRace: Race.Foxes, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"Enjoying your new burrow?\" <b>{i.Unit.Name}</b> asks {GetRandomStringFrom($"<b>{i.Target.Name}</b>", "the lagomorph")} as {GPPHe(i.Target)} struggle uselessly against {GetRandomStringFrom($"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b>", $"the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))}")} pouch.",
            actorRace: Race.Kangaroos, targetRace: Race.Bunnies, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"Enjoying your new cave, batty?\" <b>{i.Unit.Name}</b> asks <b>{i.Target.Name}</b> as {GPPHe(i.Target)} struggle{SIfSingular(i.Target)} uselessly against {GetRandomStringFrom($"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b>", $"the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))}")} pouch.",
            actorRace: Race.Kangaroos, targetRace: Race.Bats, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"Enjoying your new chamber?\" <b>{i.Unit.Name}</b> asks {GetRandomStringFrom($"<b>{i.Target.Name}</b>", "the insect")} as {GPPHe(i.Target)} struggle uselessly against {GetRandomStringFrom($"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b>", $"the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))}")} pouch.",
            actorRace: Race.Kangaroos, targetRace: Race.Ants, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"Hey, wolf? can you howl for me\" <b>{i.Unit.Name}</b> asks <b>{i.Target.Name}</b>. \"No. Why?\" \"Because the sooner you run out of air the sooner my pouch can absorb you.\"",
            actorRace: Race.Kangaroos, targetRace: Race.Wolves, priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> notices how cold the lizard inside {GPPHis(i.Unit)} pouch is, and wonders at what point the reptile will warm up.",
            actorRace: Race.Kangaroos, targetRace: Race.Lizards, priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Target.Name}</b> allows {GPPHimself(i.Target)} to go fully liquid within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch, causing loud sloshes to eminate from {GetRandomStringFrom($"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} with every step {GPPHe(i.Unit)} take{SIfSingular(i.Unit)}.",
            actorRace: Race.Kangaroos, targetRace: Race.Slimes, priority: 9, conditional: InBreasts),
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> suction cups grab parts of the inside of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch, bizarre \"anti-bulges\" can be seen on {GetRandomStringFrom($"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b>", $"the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))}")} pouch.",
            actorRace: Race.Kangaroos, targetRace: Race.Scylla, priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> looks down at {GPPHis(i.Unit)} pouch and says to <b>{i.Target.Name}</b> \"Hey, when you feel yourself running out of air, let me know so I can nab a few feathers off of you. I need them for an art project I'm working on.\"",
            actorRace: Race.Kangaroos, targetRace: Race.Harpies, priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> looks down at {GPPHis(i.Unit)} pouch and says to <b>{i.Target.Name}</b> \"Hey, when you feel yourself running out of air, let me know so I can nab a few feathers off of you. I need them for an art project I'm working on.\"",
            actorRace: Race.Kangaroos, targetRace: Race.Avians, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"Looking at you in there, if I let you live, I could easily pass for having a joey, you're so small.\" <b>{i.Unit.Name}</b> says as a taunt to <b>{i.Target.Name}</b>.",
            actorRace: Race.Kangaroos, targetRace: Race.Imps, priority: 9, conditional: InBreasts),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> walks around with <b>{i.Target.Name}</b> in {GPPHis(i.Unit)} pouch, {GPPHe(i.Unit)} marvel{SIfSingular(i.Unit)} at the Crypter's weight. \"What are you, made of lead?\" the strained {GetRaceDescSingl(i.Unit)} groans out loud.",
            actorRace: Race.Kangaroos, targetRace: Race.Crypters, priority: 9, conditional: InBreasts),
            new EventString((i) => $"As <b>{i.Target.Name}</b> coils on and around {GPPHimself(i.Target)} within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch, the resulting bulge patterns on the outside are almost hypnotic.",
            actorRace: Race.Kangaroos, targetRace: Race.Lamia, priority: 9, conditional: InBreasts),
            new EventString((i) => $"From within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch comes a cry of \"Hey! {GetRaceDescSingl(i.Unit)}! Watch this!\" followed by a strange whirring sound. After a few moments, <b>{i.Target.Name}</b> speaks once more saying \"Guess that device wasn't ready yet...\"",
            actorRace: Race.Kangaroos, targetRace: Race.Crux, priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> looks down at {GPPHis(i.Unit)} pouch and asks <b>{i.Target.Name}</b> \"Hey, can you sit with your legs crossed or something? Those hooves are not comfortable.\" At this, the equine begins using {GPPHis(i.Target)} hooves as an active part of {GPPHis(i.Target)} escape efforts.",
            actorRace: Race.Kangaroos, targetRace: Race.Equines, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"I'm fairly certain that pouches can't digest things, so why don't you let me out?\" <b>{i.Target.Name}</b> says to <b>{i.Unit.Name}</b>. In response, {GetRandomStringFrom($"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} reaches into {GPPHis(i.Unit)} pouch, and {GetRandomStringFrom("bops", "boops")} the sergal on the tip of {GPPHis(i.Target)} {GetRandomStringFrom("pointed nose", "pointed snoot", "wedge shaped head")}.",
            actorRace: Race.Kangaroos, targetRace: Race.Sergal, priority: 9, conditional: InBreasts),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> moves around the battlefield, the sounds of furious buzzing can be heard from within {GPPHis(i.Unit)} pouch.",
            actorRace: Race.Kangaroos, targetRace: Race.Bees, priority: 9, conditional: InBreasts),
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> many legs move around the inside of {GPPHis(i.Unit)} pouch, <b>{i.Unit.Name}</b> shudders involentarally.",
            actorRace: Race.Kangaroos, targetRace: Race.Driders, priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> looks down at {GPPHis(i.Unit)} pouch and says to <b>{i.Target.Name}</b> \"Hey, try to keep your seeds and pollen to yourself, that stuff can be hard to get out.\"",
            actorRace: Race.Kangaroos, targetRace: Race.Alraune, priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> looks down at {GPPHis(i.Unit)} pouch and says to <b>{i.Target.Name}</b> \"Hey, try to keep your fish juices to a minimum, will you? Cleaning out a pouch can be very annoying.\"",
            actorRace: Race.Kangaroos, targetRace: Race.Merfolk, priority: 9, conditional: InBreasts),
            new EventString((i) => $"For several moments, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch lays still. Then the impression of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> leaping form can clearly be seen for several moments. \"Sorry froggy, that ain't gonna work\" {GetRandomStringFrom($"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} says to the dazed amphibian.",
            actorRace: Race.Kangaroos, targetRace: Race.Frogs, priority: 9, conditional: InBreasts),
            new EventString((i) => $"After a particularaly powerful struggle by <b>{i.Target.Name}</b>, <b>{i.Unit.Name}</b> reaches into {GPPHis(i.Unit)} own pouch and punches the shark on {GPPHis(i.Target)} nose, stunning {GPPHim(i.Target)}.",
            actorRace: Race.Kangaroos, targetRace: Race.Sharks, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"What do you think you're doing, you stupid atzaxat!?\" <b>{i.Target.Name}</b> screams at <b>{i.Unit.Name}</b>, who gleefully answers \"Turning you into pouch padding!\"",
            actorRace: Race.Kangaroos, targetRace: Race.Aabayx, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"From the moment you went in there to now you have been doing nothing but struggle{GetRandomStringFrom(".", "!")} How are you not tired yet{GetRandomStringFrom("!?", "?")}\" <b>{i.Unit.Name}</b> asks {GetRandomStringFrom($"<b>{i.Target.Name}</b>", $"the {GetRaceDescSingl(i.Target)}")} in {GPPHis(i.Unit)} pouch who continues to struggle{GetRandomStringFrom(".", ", showing no signs of slowing down.", ", seemingly not to have even heard the question.")}",
            actorRace: Race.Kangaroos, targetRace: Race.Mice, priority: 9, conditional: InBreasts),
            new EventString((i) => $"\"How does it feel to be in the pouch of someone so much weaker than you?\" <b>{i.Unit.Name}</b> taunts <b>{i.Target.Name}</b>.",
            actorRace: Race.Kangaroos, priority: 9, conditional: s => InBreasts(s) && s.Unit.Level * 2 <= s.Target.Level && s.Unit.Level >= 4),
            new EventString((i) => $"\"You know you're one tiny mistake from me getting out of your pouch and eating your sorry ass, right?\" <b>{i.Target.Name}</b> informs <b>{i.Unit.Name}</b>{GetRandomStringFrom(".", $". <b>{i.Unit.Name}</b> gulps nerviously.")}",
            actorRace: Race.Kangaroos, priority: 9, conditional: s => InBreasts(s) && s.Unit.Level * 2 <= s.Target.Level && s.Unit.Level >= 4),
            new EventString((i) => $"\"Hard to think I was ever as weak as you. How'd I even get this far?\" <b>{i.Unit.Name}</b> tauntingly tells {GPPHis(i.Unit)} pouch filling.",
            actorRace: Race.Kangaroos, priority: 9, conditional: s => InBreasts(s) && s.Target.Level * 2 <= s.Unit.Level && s.Unit.Level >= 4),
            new EventString((i) => $"\"Come on, let me out of your pouch. My life has barely begun!\" <b>{i.Target.Name}</b> pleads to <b>{i.Unit.Name}</b>{GetRandomStringFrom(".", $". the {GetRaceDescSingl(i.Unit)} thinks for a moment before bluntly saying \"Nope.\"")}",
            actorRace: Race.Kangaroos, priority: 9, conditional: s => InBreasts(s) && s.Target.Level * 2 <= s.Unit.Level && s.Unit.Level >= 4),
            new EventString((i) => $"While <b>{i.Target.Name}</b> squirms, {GPPHe(i.Target)} accidentally rub{SIfSingular(i.Target)} the bottom of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch against {GPPHis(i.Unit)} vagina{GetRandomStringFrom(".", "!", $", making {GetRandomStringFrom($"{GPPHim(i.Unit)}", $"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} blush furiously.")}",
            actorRace: Race.Kangaroos, priority: 9, conditional: s => InBreasts(s) && s.Unit.HasVagina),
            new EventString((i) => $"While <b>{i.Target.Name}</b> squirms, {GPPHe(i.Target)} accidentally rub{SIfSingular(i.Target)} the bottom of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch against {GPPHis(i.Unit)} penis{GetRandomStringFrom(".", "!", $", making {GetRandomStringFrom($"{GPPHim(i.Unit)}", $"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} blush furiously.")}",
            actorRace: Race.Kangaroos, priority: 9, conditional: s => InBreasts(s) && s.Unit.HasDick),
            new EventString((i) => $"<b>{i.Target.Name}</b> calls up to {GetRandomStringFrom($"<b>{i.Unit.Name}</b>", $"{GPPHis(i.Target)} predator")} and says \"you know that you can't hurt me here, right?\" <b>{i.Unit.Name}</b> smiles knowingly.",
            actorRace: Race.Kangaroos, priority: 9, conditional: s => InBreasts(s) && TargetHumanoid(s)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> struggles, {GPPHe(i.Target)} accidentally get{SIfSingular(i.Target)} {GPPHis(i.Target)} legs out of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch without realizing. <b>{i.Unit.Name}</b> casually slips the wiggling appendages back in {GPPHis(i.Unit)} pouch.",
            actorRace: Race.Kangaroos, priority: 9, conditional: s => InBreasts(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> desides to try and punch <b>{i.Unit.Name}</b> from within {GetRandomStringFrom($"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b>", $"the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))}")} pouch. <b>{i.Unit.Name}</b> elects not to inform {GetRandomStringFrom($"{GPPHim(i.Target)}", $"<b>{i.Target.Name}</b>")} that {GPPHe(i.Target)} {IsAre(i.Target)} facing the wrong way.",
            actorRace: Race.Kangaroos, priority: 9, conditional: s => InBreasts(s) && TargetHumanoid(s)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> squirms in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch, clear bulges of {GetRandomStringFrom($"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b>", $"the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Target))}")} body can be seen jutting from {GetRandomStringFrom($"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b>", $"the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))}")} pouch.",
            actorRace: Race.Kangaroos, priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Target.Name}</b> has somehow gotten turned around within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pouch, and is currently trying to force {GPPHis(i.Target)} way out the bottom of the {GetRandomStringFrom("pouch.", "flesh bag.", "pouch. An organ with only one way in or out, the top.", "flesh bag. An organ with only one way in or out, the top.")}",
            actorRace: Race.Kangaroos, priority: 9, conditional: InBreasts),
            //Cleaveage Vore
            new EventString((i) => $"Within {GetRandomStringFrom($"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b>", $"the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))}")} {PreyLocStrings.ToBreastSynPlural()}, <b>{i.Target.Name}</b> tries to struggle, but finds being split in two quite distracting.",
            priority: 8, conditional: s => CleaveageVore(s)),
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToBreastSynPlural()} wiggle and squirm, the {GetRaceDescSingl(i.Unit)} moans. \"Yes!\" <b>{i.Target.Name}</b> thinks within. \"{GPPHeIsAbbr(i.Unit)} getting tired!\" <b>{i.Unit.Name}</b> looks down and says \"That was nice. Keep doing that!\"",
            priority: 8, conditional: s => CleaveageVore(s) && ActorHumanoid(s)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> casually talks to <b>{AttractedWarrior(i.Unit).Name}</b>, a {(TargetHumanoid(i) ? "handprint" : $"{ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Target))} face")} bulges from the inside of {GPPHis(i.Unit)} {GetRandomStringFrom("tit", "boob", "breast")} and <b>{AttractedWarrior(i.Unit).Name}</b> akwardly walks away. \"Thanks for that, I was about to seal the deal!\"",
            priority: 8, conditional: s => CleaveageVore(s) && ActorHumanoid(s) && ReqOSW(s)),
            new EventString((i) => $"After a particularally strong stuggle, <b>{i.Target.Name}</b> finds {GPPHis(i.Target)} consciousness split between <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> left and right {PreyLocStrings.ToBreastSynPlural()}. After a brief very akward {GetRandomStringFrom("conversation/monolouge", "conversation... monolouge?")} <b>{i.Target.Name}</b> becomes one mind again and starts struggling again.",
            priority: 8, conditional: s => CleaveageVore(s)),
            new EventString((i) => $"\"It's kind of funny. You were a {GetRaceDescSingl(i.Target)}, and now you're just some especially wiggly tit fat.\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b>.",
            priority: 8, conditional: s => CleaveageVore(s)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> squirms within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToBreastSynPlural()}, one of {GPPHis(i.Target)} limbs briefly sticks out from between the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))} {PreyLocStrings.ToBreastSynPlural()}, before being {GetRandomStringFrom("promptly", "quickly")} pulled back in.",
            priority: 8, conditional: s => CleaveageVore(s)),
            new EventString((i) => $"\"It's kind of funny. You were {GetRandomStringFrom("someone important", "important", "a leader", $"the leader of the {InfoPanel.RaceSingular(State.World?.GetEmpireOfSide(i.Target.Side))}")}, and now you're just some especially wiggly tit fat.\" <b>{i.Unit.Name}</b> says to <b>{i.Target.Name}</b>.",
            priority: 8, conditional: s => CleaveageVore(s) && TargetLeader(s) && !State.GameManager.PureTactical),
            new EventString((i) => $"<b>{i.Target.Name}</b> stops struggling within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToBreastSynPlural()} for a few moments to feel what {PreyLocStrings.ToBreastSynPlural()} feel like.",
            priority: 8, conditional: s => CleaveageVore(s) && !TargetBoobs(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> notices that <b>{i.Target.Name}</b> is close to escaping {GPPHis(i.Unit)} {PreyLocStrings.ToBreastSynPlural()}, so {GPPHe(i.Unit)} say{SIfSingular(i.Unit)} to <b>{i.Target.Name}</b> \"why don't you stop and feel what having {PreyLocStrings.ToBreastSynPlural()} is like for a moment?\" Oddly, this actually works, and <b>{i.Target.Name}</b> stops and feels what being {PreyLocStrings.ToBreastSynPlural()} is like.",
            priority: 8, conditional: s => CleaveageVore(s) && !TargetBoobs(s)),

            new EventString((i) => $"\"Tell me, how does it feel knowing you're lower on the food chain?\" <b>{i.Unit.Name}</b> taunts <b>{i.Target.Name}</b> as the {GetRaceDescSingl(i.Target)} squirms within {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded")} {PreyLocStrings.ToSyn(i.preyLocation)}. \"Must be pretty embarrassed~\"",
            priority: 8),

            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pleasured murrls harmonize with {GPPHis(i.Unit)} busy {PreyLocStrings.ToSyn(PreyLocation.stomach)}'s groaning as it strives to {GetRandomStringFrom("digest", "gurgle", "churn", "dissolve", "liquify", "melt", "break down")} <b>{i.Target.Name}</b>.",
            priority: 9, conditional: InStomach, actorRace: Race.FeralLions),
        };

        BellyRubMessages = new List<EventString>()
        {
            new EventString((i) => $"<b>{i.Unit.Name}</b> takes the time to roll onto {GPPHis(i.Unit)} back and rubs {GPPHis(i.Unit)} paw against {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, {GetRandomStringFrom("digesting", "digesting", "gurgling up", "gurgling", "churning up", "churning down", "dissolving", "dissolving", "liquifying", "liquifying", "melting down", "melting", "breaking down", "breaking up", "smushing down", "smushing")} {GPPHis(i.Unit)} prey more and more.",
            priority: 11, conditional: s => s.Target == s.Unit, actorRace: Race.FeralLions),
            new EventString((i) => $"While <b>{i.Prey.Name}</b> is fighting for {GPPHis(i.Prey)} life inside the {GetRaceDescSingl(i.Unit)}, <b>{i.Unit.Name}</b> appreciates the internal pets and reciprocates by lazily pawing at {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 11, conditional: s => s.Target == s.Unit && !PreyDead(s), actorRace: Race.FeralLions),
            new EventString((i) => $"Much like a playful kitten catching movement under a blanket, <b>{i.Unit.Name}</b> boops every little bulge that shows up on {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, inadvertently creating an even more deadly gurgling hell for <b>{i.Prey.Name}</b>.",
            priority: 11, conditional: s => s.Target == s.Unit && !PreyDead(s), actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> paws purposely trace <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> faint outline on {( i.Target == i.Unit ? GPPHis(i.Unit) : "<b>" + i.Target.Name + "</b>'s")} middle. The thorough massage stimulates the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Target))} digestion and rubs {GPPHis(i.Target)} {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "acidic", "caustic", "predatory", "flesh-melting")} juices all over <b>{i.Prey.Name}</b>.",
            priority: 11, actorRace: Race.FeralLions, targetRace: Race.FeralLions, conditional: s => !PreyDead(s)), // TODO: Cattitude or volunteers, implement a way to tell what appendage a creature uses for interactions. I think an enumerable would be a good fit, but can be any sort of presence check too.
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> paws trace each bend in {( i.Target == i.Unit ? GPPHis(i.Unit) : "<b>" + ApostrophizeWithOrWithoutS(i.Target.Name) + "</b>")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, guiding <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> messy remains on their journey through the big cat.",
            priority: 11, actorRace: Race.FeralLions, targetRace: Race.FeralLions, conditional: s => PreyDead(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lifts a hind leg and scratches {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} with it, stirring the contents within.{(!PreyDead(i) ? "\nThe rhythm of the induced swaying is almost hypnotic to <b>" + i.Prey.Name + "</b>." : "")}",
            priority: 11, conditional: s => s.Target == s.Unit, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> decides to pet {GPPHimself(i.Unit)}, accidentally squishing out <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> last breathable air as a meaty burp!",
            priority: 11, conditional: s => s.Target == s.Unit && !PreyDead(s) && CanBurp(s), actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> decides to pet {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "churning", "groaning", "growling", "rumbling", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, squishing out what might have been <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> dying breath as a juicy fart.",
            priority: 11, conditional: s => InStomach(s) && !InWomb(s) && s.Target == s.Unit && PreyDead(s) && Farts(s) && PreyDead(s), actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> spiritedly flops on {GPPHis(i.Unit)} back to give {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)} some paw attention, kneading the newly dissolved <b>{i.Prey.Name}</b>-mass deeper into {GPPHimself(i.Unit)}.",
            priority: 11, conditional: s => s.Target == s.Unit && PreyDead(s), actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} takes on a loaf position, squishing {GPPHis(i.Unit)} food and willing it to churn away faster.",
            priority: 11, conditional: s => s.Target == s.Unit, actorRace: Race.FeralLions),

            new EventString((i) => $"<b>{i.Unit.Name}</b> nuzzles <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} affectionately, then rubs {GPPHis(i.Unit)} entire body length across it while passing below it, {GPPHis(i.Unit)} butt squishing up against its contents especially firmly.{(!PreyDead(i) ? " <b>" + i.Prey.Name + "</b> feels everything." : "")}",
            priority: 11, targetRace: Race.FeralLions, conditional: s => s.Target != s.Unit, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> walks by <b>{i.Target.Name}</b> and gives {GPPHis(i.Target)} {(PreyDead(i) ? "sloshing" : "squirming")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} some stimulating licks in passing.",
            priority: 11, targetRace: Race.FeralLions, conditional: s => s.Target != s.Unit, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> finds <b>{i.Target.Name}</b> lazing on {GPPHis(i.Target)} back and gives {GPPHis(i.Target)} {PreyLocStrings.ToSyn(i.preyLocation)} a vigorous nuzzle, pressing {GPPHis(i.Unit)} face into the {PreyLocStrings.ToSyn(PreyLocation.stomach)}{((PreyDead(i) && Farts(i) && InStomach(i)) ? ", stirring the liquefied prey and causing a little bit of <b>" + i.Prey.Name + "</b> gas to be squished out of "+ GPPHis(i.Target) + " butt": "")}.",
            priority: 11, targetRace: Race.FeralLions, conditional: s => s.Target != s.Unit, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> partially lays {GPPHimself(i.Unit)} on top of <b>{i.Target.Name}</b> to passionately groom {GPPHis(i.Target)} capacious gut, causing {GPPHis(i.Target)} prey to be assaulted by a cascade of fresh {GetRandomStringFrom("digestive", "groaning", "gurgling", "churning", "melty", "gastric", "acidic", "caustic", "predatory", "flesh-melting")} juices and fervid churning.",
            priority: 11, targetRace: Race.FeralLions, conditional: s => s.Target != s.Unit, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Target.Name}</b> doesn't suspect the surprise attack, as <b>{i.Unit.Name}</b> playfully jumps on their back with a tight hug, chewing on their neck while kneading their {PreyLocStrings.ToSyn(PreyLocation.stomach)} into churning overtures.",
            priority: 11, targetRace: Race.FeralLions, conditional: s => s.Target != s.Unit, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> shoves <b>{i.Target.Name}</b> over and rolls {GPPHim(i.Target)} on {GPPHis(i.Target)} back, then lays {GPPHimself(i.Unit)} on top, squishing bellies together and making their gurgles vibrate eachother's prey.",
            priority: 11, conditional: s => TacticalUtilities.GetActorOf(s.Unit).HasBelly && s.Target != s.Unit, targetRace: Race.FeralLions, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> flops against <b>{i.Target.Name}</b>, making both fall over. The ensuing tangle of wiggly feline cuddles does wonders for digestion.",
            priority: 11, conditional: s => TacticalUtilities.GetActorOf(s.Unit).HasBelly && s.Target != s.Unit, targetRace: Race.FeralLions, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> head-nudges <b>{i.Target.Name}</b> to have {GPPHim(i.Target)} flop onto {GPPHis(i.Target)} side, before hunkering down and kneading {GPPHis(i.Target)} tummy like dough. <b>{i.Target.Name}</b> flinches a little from the claws, but in return, {GPPHe(i.Target)} can practically feel <b>{i.Prey.Name}</b> soften with each squish of the leonine paws.",
            priority: 11, targetRace: Race.FeralLions, conditional: s => s.Target!= s.Unit, actorRace: Race.FeralLions),
            new EventString((i) => $"After settling down on <b>{i.Target.Name}</b> and applying {GPPHis(i.Unit)} full weight, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> deep kiss is met with a <b>{i.Prey.Name}</b>-flavored burp. There's no longer space for luxuries like \'squirming\' or \'breathing\' in <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)}.",
            priority: 11, conditional: s => InStomach(s) && s.Target != s.Unit, targetRace: Race.FeralLions, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Target.Name}</b> is about to rub {GPPHis(i.Target)} own abdomen, when <b>{i.Unit.Name}</b> quickly claims the spot and starts grinding against the bulge. The two lions make out, and this evolves into mutual dry humping, further threatening to liquefy any genital captives as the sex juices start flowing.",
            priority: 11, conditional: s => InWomb(s) && s.Target != s.Unit, targetRace: Race.FeralLions, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> finds <b>{i.Target.Name}</b> freshly flopped onto {GPPHis(i.Target)} back, haunches spread to show off {GPPHis(i.Target)} fullness. <b>{i.Unit.Name}</b> decides that this belly in particular needs grooming, and thoroughly licks it with {GPPHis(i.Unit)} rough tongue, stimulating the kitty's digestion.",
            priority: 11, targetRace: Race.FeralLions, conditional: s => s.Target!= s.Unit, actorRace: Race.FeralLions),
            new EventString((i) => $"A stuffed <b>{i.Target.Name}</b> who's lazing on the floor gets smushed under the floppy form of <b>{i.Unit.Name}</b>, whose wiggles do wonders for the breakdown of the former's latest catch.",
            priority: 11, targetRace: Race.FeralLions, conditional: s => s.Target!= s.Unit && SizeDiff(s,1f), actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Target.Name}</b> and <b>{i.Unit.Name}</b> find the time to share a big, squishy lion hug. As their pawed limbs tighten around eachother, so does the embrace of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> messy innards around <b>{i.Prey.Name}</b>.",
            priority: 11, targetRace: Race.FeralLions, conditional: s => s.Target!= s.Unit, actorRace: Race.FeralLions),

            new EventString((i) => $"<b>{i.Unit.Name}</b> stretches and shifts on the ground, moving bulges in {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} to more comfortable positions.",
            actorRace: Race.Serpents, priority: 11, conditional: s => s.Target == s.Unit),
            new EventString((i) => $"<b>{i.Unit.Name}</b> stretches and shifts on the ground, moving bulges in {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} to more comfortable positions.",
            actorRace: Race.Lamia, priority: 11, conditional: s => s.Target == s.Unit),

            new EventString((i) => $"<b>{i.Unit.Name}</b> massages {GPPHis(i.Unit)} own {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, its contents shifting under {GPPHis(i.Unit)} hands.",
            priority: 10, conditional: s => s.Target == s.Unit),
            new EventString((i) => $"<b>{i.Unit.Name}</b> massages {GPPHimself(i.Unit)}, moving bulges in {GPPHis(i.Unit)} <b>{i.Unit.Name}</b> massages {GPPHis(i.Unit)} own {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} to more comfortable positions.",
            priority: 10, conditional: s => s.Target == s.Unit),
            new EventString((i) => $"{i.Unit.Name} puts {GPPHis(i.Unit)} hands on {GPPHis(i.Unit)} <b>{i.Unit.Name}</b> massages {GPPHis(i.Unit)} own {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, feeling the prey struggling within.",
            priority: 10, conditional: s => s.Target == s.Unit),
            new EventString((i) => $"{i.Unit.Name} slaps {GPPHis(i.Unit)} <b>{i.Unit.Name}</b> massages {GPPHis(i.Unit)} own {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, taunting the prey within.",
            priority: 10, conditional: s => s.Target == s.Unit),
            new EventString((i) => $"{i.Unit.Name} squishes {GPPHis(i.Unit)} own {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, enjoying its wobble.",
            priority: 10, conditional: s => s.Target == s.Unit),

            new EventString((i) => $"<b>{i.Unit.Name}</b> coils around <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> <b>{i.Unit.Name}</b> massages {GPPHis(i.Unit)} own {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, enjoying its warmth and movement.",
            actorRace: Race.Serpents, priority: 9, conditional: s => s.Target == s.Unit),
            new EventString((i) => $"<b>{i.Unit.Name}</b> coils around <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> <b>{i.Unit.Name}</b> massages {GPPHis(i.Unit)} own {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, enjoying its warmth and movement.",
            actorRace: Race.Lamia, priority: 9, conditional: s => s.Target == s.Unit),

            new EventString((i) => $"<b>{i.Target.Name}</b> nervously asks <b>{i.Unit.Name}</b> for help as {GPPHis(i.Target)} body makes a weird squelching noise, the <b>{i.Unit.Name}</b> laughs and {GetRandomStringFrom("pats", "rubs", "massages")} the {GetRandomStringFrom("greenhorn", "newbie", "rookie")}'s {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: s=> TargetFirstTime(s) && (s.Target.Side == s.Unit.Side)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sees the {GetRandomStringFrom("virgin", "uninitiated", "greenhorn", "inexperienced", "rookie")} pred <b>{i.Target.Name}</b> nervously looking at {GPPHis(i.Target)} belly as the prey within tosses about, <b>{i.Unit.Name}</b> helps out and {GetRandomStringFrom("pats", "rubs", "massages")} the newbie's {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: s=> TargetFirstTime(s) && (s.Target.Side == s.Unit.Side)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sees the {GetRandomStringFrom("virgin", "uninitiated", "greenhorn", "newbie", "inexperienced", "rookie")} pred <b>{i.Target.Name}</b> struggling with {GPPHis(i.Target)} first prey and grabs {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} shaking it's contents around to help relieve <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> indigestion. <b>{i.Target.Name}</b> blushes deeply as this happens.",
            priority: 9, conditional: s=> TargetFirstTime(s) && (s.Target.Side == s.Unit.Side)),
            
            // romance
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> nipples perk in anticipation as <b>{i.Unit.Name}</b> presses {GPPHimself(i.Unit)} into {GPPHis(i.Target)} sensitive, {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && s.Target.HasBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> straddles <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, using {GPPHis(i.Unit)} weight to pack the stomach's contents tighter. <b>{i.Target.Name}</b> {GetRandomStringFrom("quivers", "trembles", "quakes", "shudders", "moans", "wiggles", "trills", "buzzes", "revels")} {GetRandomStringFrom ("in", "with")} {GetRandomStringFrom("pleasure", "delight", "arousal", "bliss", "contentment", "enjoyment", "indulgence", "satisfaction")} as {GPPHis(i.Target)} crush bounces up and down on top of {GPPHim(i.Target)}, taking {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "rounded", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} for a joyride.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> touches {GPPHim(i.Target)}, <b>{i.Target.Name}</b> places {GPPHis(i.Target)} hands atop {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "hungering", "ravenous", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and starts exploring {GPPHis(i.Target)}'s body's most sensitive areas, eventually sliding southward {GetRandomStringFrom("to the <i>really</i> sensitive areas", "to the fun zone", "between their sexy thighs", "for some <i>real</i> fun", "to properly get them off")}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> {GetRandomStringFrom("pinches", "plays with", "toys with", "squeezes")} {GPPHis(i.Target)} {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "nipples")} while {GPPHis(i.Target)} body is assailed by {ApostrophizeWithOrWithoutS(i.Unit.Name)} sensual ministrations as {GPPHe(i.Unit)} moves {GPPHis(i.Unit)} {GetRandomStringFrom("deft", "artful", "skillful", "dexterous", "expert", "wonderful", "capable")} {GetRandomStringFrom("digits", "fingers", "hands", "palms")} across the {GetRaceDescSingl(i.Unit)}'s {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && s.Target.HasBreasts),
            new EventString((i) => $"\"{GetRandomStringFrom("You know I've eaten people for less than touching me, right?", "Ooh, careful now~ You want to join them in there?", "Ahh~ And who gave you permission to touch me there, hmm?", "My, how bold of you! You like what you feel?")}\" <b>{i.Target.Name}</b> confidently asks <b>{i.Unit.Name}</b> in a husky voice tinged with {GetRandomStringFrom("pleasure", "delight", "arousal", "bliss", "contentment", "enjoyment", "indulgence", "satisfaction")}, \"{GetRandomStringFrom("Don't stop~", "Don't you <i>dare</i> stop~", "Never stop~", "I'll give you til the count of never to stop~", "I'll give you forever to stop~", "Keep going~", "Rub harder~", "Maybe I'll let you touch more than just my belly, hmm~?", "Do a good job and I'll let you rub somewhere <i>else</i>~", "Keep that up and perhaps I'll let you move those hands <i>lower</i>~", "I may have to put those hands to use somewhere <i>lower</i>~")}\"",
            priority: 8, conditional: s => ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"After massaging for a time, <b>{i.Unit.Name}</b> slowly reaches beneath the {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and {GetRandomStringFrom("rubs a hand against", "gently squeezes", "playfully toys with", "confidently strokes", "applies deft motions to", "gently jacks off", "idly masturbates", "runs a teasing finger along", "starts pumping", "masterfully massages")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}, {GetRandomStringFrom("eliciting", "drawing forth", "coercing", "dragging", "summoning", "conjuring", "beckoning forth", "invoking", "mustering", "rousing", "provoking", "inciting", "triggering", "stirring up", "prompting", "coaxing", "persuading", "goading")} a {GetRandomStringFrom("agitated", "flustered", "desperate", "ragged", "pleased", "pleasured", "delighted", "needy", "blissful", "contented", "aroused", "indulgent", "satisfied", "excited", "heated", "breathy", "lustful", "demanding", "husky", "wanton", "lewd", "amorous", "sinful", "salacious")} {GetRandomStringFrom("gasp", "moan", "groan", "cry", "sigh", "whine", "whimper")} from the fearsome predator.",
            priority: 8, conditional: s => ReqTargetCompatibleLewd(s) && s.Target.HasDick),
            new EventString((i) => $"After massaging for a time, <b>{i.Unit.Name}</b> slowly reaches beneath the {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and {GetRandomStringFrom("rubs a hand against", "gently fingers", "playfully toys with", "confidently strokes", "applies deft motions to", "slips a finger inside", "slides an entire hand inside", "masterfully massages")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("messy", "moist", "slick", "sloppy", "wet", "slimy", "dripping", "sopping", "drooling", "creamy", "hot", "humid", "sultry", "sweltering", "snug", "horny", "lecherous", "lustful", "steamy", "eager", "greedy", "hungry", "meat-hungry", "needy", "blushing", "tasty-looking", "delicious", "slippery", "quivering")} {GetRandomStringFrom("cooch", "cunt", "muff", "pussy", "slit", "snatch", "vagina", "vulva", "frontdoor", "honeypot", "love tunnel", "twat", "kitty", "clam", "love box", "vadge", "vagine", "downstairs", "sex", "flower", "minge", "cooter", "yoni", "labia", "loins", "nethers")}, {GetRandomStringFrom("eliciting", "drawing forth", "coercing", "dragging", "summoning", "conjuring", "beckoning forth", "invoking", "mustering", "rousing", "provoking", "inciting", "triggering", "stirring up", "prompting", "coaxing", "persuading", "goading")} a {GetRandomStringFrom("agitated", "flustered", "desperate", "ragged", "pleased", "pleasured", "delighted", "needy", "blissful", "contented", "aroused", "indulgent", "satisfied", "excited", "heated", "breathy", "lustful", "demanding", "husky", "wanton", "lewd", "amorous", "sinful", "salacious")} {GetRandomStringFrom("gasp", "moan", "groan", "cry", "sigh", "whine", "whimper")} from the fearsome predator.",
            priority: 8, conditional: s => ReqTargetCompatibleLewd(s) && !s.Target.HasDick),
            new EventString((i) => $"<b>{i.Target.Name}</b> pushes a blushing <b>{i.Unit.Name}</b> over and {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "apathetically", "idly", "languorously")} sits {GPPHis(i.Target)} {GetRandomStringFrom("ass", "buns", "butt", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty", "moon", "tush", "posterior", "derriere")} onto the {GetRaceDescSingl(i.Unit)}'s face while resting {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} against {GPPHis(i.Unit)} chest.  {GetRandomStringFrom("A confident", "A dominant", "A domineering", "A lustful", "A sinful", "A pleased", "A horny")} {GetRandomStringFrom("grin", "smile", "smirk")} spreads across {GPPHis(i.Target)} face when {GPPHe(i.Target)} feels <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("hot", "humid", "moist", "slick", "sloppy", "wet", "slippery", "slimy", "dripping", "drooling", "steamy", "eager")} tongue finally get to work.",
            priority: 8, conditional: s => ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> fumbles while massaging the predator's {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, distracted by {GPPHis(i.Target)} <i>other</i> endowments which {GetRandomStringFrom("pulsed", "throbbed", "swelled", "twitched")} with need mere inches away. <b>{i.Target.Name}</b> finds the {GetRaceDescSingl(i.Unit)}'s shy display absolutely adorable.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && s.Target.HasDick),
            new EventString((i) => $"<b>{i.Unit.Name}</b> presses {GPPHimself(i.Unit)} close and hoists <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, allowing its  contents to {GetRandomStringFrom("slosh", "churn", "slide", "slip", "sluice", "squish", "glide")} deeper into the blushing predator's {GetRandomStringFrom("hungry", "thirsty", "voracious", "ravenous", "eager", "greedy", "gluttonous", "slippery", "slimy", "covetous")} {GetRandomStringFrom("bowels", "intestines", "guts", "depths", "innards", "insides")}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatible(s)),
            new EventString((i) => $"Coming from behind, <b>{i.Unit.Name}</b> grabs onto <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> hips and slowly works {GPPHis(i.Unit)} way up to {GPPHis(i.Target)} waist, around {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and up to {GPPHis(i.Target)} heaving chest.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && !s.Target.HasBreasts),
            new EventString((i) => $"Coming from behind, <b>{i.Unit.Name}</b> grabs onto <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> hips and slowly works {GPPHis(i.Unit)} way up to {GPPHis(i.Target)} waist, around {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and up to {GPPHis(i.Target)} heaving {GetRandomStringFrom("boobs", "boobies", "breasts", "tits", "titties", "bosoms", "jugs", "knockers", "hooters", "milkers", "cleavage", "bust")}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && s.Target.HasBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't resist {GPPHis(i.Unit)} urges any longer and forcefully thrust{SIfSingular(i.Unit)} {GPPHimself(i.Unit)} against the {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} before {GPPHim(i.Unit)}. <b>{i.Target.Name}</b> had been waiting to elicit such an eager response and immediately reciprocates the amorous advance.",
            priority: 8, conditional: s => (s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s))),
            new EventString((i) => $"<b>{i.Target.Name}</b> was about to have {GPPHis(i.Target)} way with <b>{i.Unit.Name}</b>, but is caught off guard by just how caring {GPPHeIs(i.Unit)} in caressing {GPPHis(i.Target)} body and decides to let the affectionate massage continue.",
            priority: 8, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but get lost in <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> eyes as {GPPHe(i.Unit)} rub{SIfSingular(i.Unit)} {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> lets out a soft {GetRandomStringFrom("gasp", "moan", "groan", "sigh", "whine", "whimper")} as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> hands wrap around {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> refuses to let <b>{i.Unit.Name}</b> touch {GPPHim(i.Target)} but instantly swoons as {GPPHis(i.Unit)} hands press into {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> eyes <b>{i.Unit.Name}</b> seductively as {GPPHis(i.Unit)} hands press against {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs onto <b>{i.Target.Name}</b>, pressing {GPPHimself(i.Unit)} against {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and forcing {GPPHim(i.Target)} into a deep kiss.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> begins to lean into <b>{i.Target.Name}</b> for a kiss as {GPPHe(i.Unit)} knead{SIfSingular(i.Unit)} {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. <b>{i.Target.Name}</b> doesn't resist.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> wishes this moment could last forever as <b>{i.Unit.Name}</b> presses {GPPHis(i.Unit)} hands against {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> begins to pant heavily as <b>{i.Unit.Name}</b> handles {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"\"S - Stop, I'm s...sensitive!\" <b>{i.Target.Name}</b> protests as <b>{i.Unit.Name}</b> squeezes {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, relieving digestion.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"You know, while I might be full, I still have plenty of room in my bed for one more,\" <b>{i.Target.Name}</b> says to <b>{i.Unit.Name}</b> as {GPPHe(i.Unit)} feel{SIfSingular(i.Unit)} {GPPHis(i.Target)} enticing body.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> gives <b>{i.Target.Name}</b> an amorous hug, pushing the contents of {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} deeper into {GPPHis(i.Target)} {GetRandomStringFrom("hungry", "thirsty", "voracious", "ravenous", "eager", "greedy", "gluttonous", "slippery", "slimy", "covetous")} {GetRandomStringFrom("bowels", "intestines", "guts", "depths", "innards", "insides")}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> lets out an unexpected moan as <b>{i.Unit.Name}</b> presses {GPPHis(i.Unit)} finger into {GPPHis(i.Target)} belly's neglected underside.",
            priority: 8, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> shakily tells <b>{i.Unit.Name}</b> to leave {GPPHim(i.Target)} alone, but {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} body melts into {GPPHis(i.Unit)} hands as soon as {GPPHe(i.Unit)} touch{EsIfSingular(i.Unit)} {GPPHim(i.Target)}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> meticulously massages <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, fearing that a poor job would add {GPPHim(i.Unit)} to the {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning")} stew. <b>{i.Target.Name}</b> loves <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> amorous attention.",
            priority: 8, conditional: s => ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> can't believe {GPPHis(i.Target)} luck when {GPPHis(i.Target)} crush begins massaging {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. <b>{i.Unit.Name}</b> fears for {GPPHis(i.Unit)} life as {GPPHe(i.Unit)} consider{SIfSingular(i.Unit)} the {PreyLocStrings.ToSyn(PreyLocation.stomach)}'s current occupant.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),

            new EventString((i) => $"<b>{i.Target.Name}</b> grabs onto <b>{i.Unit.Name}</b> and presses {GPPHis(i.Unit)} face against {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, resting one hand against the small of {GPPHis(i.Target)} back to push {GPPHis(i.Target)} stomach out even further while the other lovingly rubs the back of {GPPHis(i.Target)} potential mate's head.  While <b>{i.Unit.Name}</b> was initially nervous, the methodic sloshing coming from within the {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} calms {GPPHim(i.Unit)} and {GPPHe(i.Target)} begin{SIfSingular(i.Unit)} rubbing it with awe.",
            priority: 8, conditional: s => ReqTargetCompatible(s) && ActorHumanoid(s) && Friendly(s)),
            new EventString((i) => $"Exhausted from the process of digestion, <b>{i.Target.Name}</b> lies down, breathing heavily as {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} pulsates. <b>{i.Unit.Name}</b> takes the opportunity to help. Going over, {GPPHe(i.Unit)} push{EsIfSingular(i.Unit)} the {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} towards the lying predator's chest creating a chorus of sloshing. With the huge gut out of the way, <b>{i.Unit.Name}</b> begins to go to work relieving {GPPHis(i.Target)} stress via carnal pleasures. <b>{i.Target.Name}</b> soon returns to the battlefield, renewed and ready to continue.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> massages <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, its contents shifting under {GPPHis(i.Unit)} hands.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side),
            new EventString((i) => $"<b>{i.Target.Name}</b> basks in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> attentions as {GPPHe(i.Unit)} massage{SIfSingular(i.Unit)} {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side),
            new EventString((i) => $"<b>{i.Target.Name}</b> sweats nervously as <b>{i.Unit.Name}</b> presses {GPPHis(i.Unit)} hands into {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8, conditional: s => s.Target.Side == s.Unit.Side),
            new EventString((i) => $"<b>{i.Target.Name}</b> is surprised when <b>{i.Unit.Name}</b> suddenly starts massaging {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. {Capitalize(GPPHe(i.Target))} look{SIfSingular(i.Target)} embarrassed but do{EsIfSingular(i.Target)}n't recoil from the touch.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> tenses when <b>{i.Unit.Name}</b> starts touching {GPPHim(i.Target)} but begins to relax as {GPPHis(i.Target)} digestion is relieved.",
            priority: 8),

            //Deer belly rubs
			new EventString((i) => $"Feeling the obvious presence of something within, <b>{i.Unit.Name}</b> asks if <b>{i.Target.Name}</b> has seen where <b>{i.Prey.Name}</b> went. With a blush and a bleat, {GPPHe(i.Target)} say{SIfSingular(i.Target)} that {GPPHeIsAbbr(i.Target)} turning {GPPHim(i.Prey)} into nothing but deer fat for <b>{i.Unit.Name}</b> to play with.",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s) && FriendlyPrey(s) && !Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> is startled as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> digits press into {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The deer part of {GPPHim(i.Target)} wanting to bolt at the sudden sensation but as {GPPHis(i.Unit)} caress continues, the skittish predator shyly leans into {GPPHim(i.Unit)}.",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> puffy tail begins to wiggle as <b>{i.Unit.Name}</b> massages the cervid's {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, {GPPHe(i.Target)} do{EsIfSingular(i.Target)}n't even mind when {GPPHis(i.Unit)} touch begins to drift to spots aside from {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> moans with discomfort from hefting around such a heavy gut, <b>{i.Unit.Name}</b> comes over to help the herbivore steady {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} much to the faun's bashful gratitude.",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rests one hand against the small of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> back while the other gently holds the side of the {GetRaceDescSingl(i.Unit)}'s {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. This affection makes {GPPHim(i.Target)} wonder if this is what it would be like to start a family with {GPPHim(i.Unit)}, just without the horrid indigestion.",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> ears turn bright red as <b>{i.Unit.Name}</b> lifts {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and lowers {GPPHis(i.Unit)} head between those furry legs and uses {GPPHis(i.Unit)} tongue to get a taste of {GPPHis(i.Target)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}.",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s) && s.Target.HasDick),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> ears turn bright red as <b>{i.Unit.Name}</b> lifts {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and lowers {GPPHis(i.Unit)} head between those furry legs and uses {GPPHis(i.Unit)} tongue to get a taste of {GPPHis(i.Target)} {PreyLocStrings.PussyAdjSyn()} {GetRandomStringFrom("cooch", "cunt", "muff", "pussy", "slit", "snatch", "vagina", "vulva", "frontdoor", "honeypot", "love tunnel", "twat", "kitty", "clam", "love box", "vadge", "vagine", "downstairs", "sex", "flower", "minge", "cooter", "yoni", "labia", "loins", "nethers")}.",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s) && !s.Target.HasDick),
            new EventString((i) => $"<b>{i.Unit.Name}</b> approaches with confident purpose, making <b>{i.Target.Name}</b> think {GPPHe(i.Target)} were about to be whisked away for passionate sex. However, when {GPPHe(i.Unit)} arrive{SIfSingular(i.Unit)}, {GPPHe(i.Unit)} begin{SIfSingular(i.Unit)} rubbing the {GetRaceDescSingl(i.Target)}'s fluffy ears. While <b>{i.Target.Name}</b> bleats angrily at the misunderstanding, {GPPHe(i.Target)} doesn't tell {GPPHim(i.Unit)} to stop.",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> shyly tells <b>{i.Unit.Name}</b> that {GPPHe(i.Unit)} can join {GPPHim(i.Target)} in the coming season's rut if {GPPHe(i.Unit)} want{SIfSingular(i.Unit)} to, as {GPPHe(i.Unit)} massage{SIfSingular(i.Unit)} the herbivore's {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"Panting, <b>{i.Target.Name}</b> meekly explains that unchecked breeding can lead to dangerous overpopulation for faun territory. The half-hearted warning doesn't stop <b>{i.Unit.Name}</b> from pushing {GPPHis(i.Target)} squishy gut out of the way and satisfying them both!",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"Between shy bleats, as {GPPHis(i.Target)} lover rubs {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, <b>{i.Target.Name}</b> calls <b>{i.Unit.Name}</b> {GPPHis(i.Target)} handsome stag!",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s) && s.Unit.GetGender() == Gender.Male),
            new EventString((i) => $"As {GPPHis(i.Unit)} partner bellows and moans from an indigestion riddled {PreyLocStrings.ToSyn(PreyLocation.stomach)}, <b>{i.Unit.Name}</b> asks <b>{i.Target.Name}</b> why {GPPHe(i.Target)} keep{SIfSingular(i.Target)} putting {GPPHimself(i.Target)} through this. The faun blushes while looking away, then says it's because {GPPHe(i.Target)} know{SIfSingular(i.Target)} {GPPHe(i.Unit)} secretly like{SIfSingular(i.Unit)} it.",
            targetRace: Race.Deer, priority: 8, conditional: s => ReqTargetCompatibleLewd(s) && !FirstTime(s)),
            //Wolfy Rub
            new EventString((i) => $"\"Who's a good {GetGenderString(i.Target, "girl", "boy", "wolf")}?\" <b>{i.Unit.Name}</b> says as {GPPHe(i.Unit)} rub{SIfSingular(i.Unit)} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The wolf lies down, {GPPHis(i.Target)} tongue lolling out, tail rapidly wagging, and leg kicking as <b>{i.Unit.Name}</b> rubs {GPPHis(i.Target)} belly in all the right places.",
            targetRace: Race.Wolves, priority: 9, conditional: s => (s.Target != s.Unit)),
            new EventString((i) => $"\"Who's a good {GetGenderString(i.Target, "girl", "boy", "wolf")}?\" <b>{i.Unit.Name}</b> says as {GPPHe(i.Unit)} rub{SIfSingular(i.Unit)} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The wolf lies down, {GPPHis(i.Target)} tongue lolling out, tail rapidly wagging, and leg kicking as <b>{i.Unit.Name}</b> rubs {GPPHis(i.Target)} belly in all the right places. \"I am!\" <b>{i.Target.Name}</b> exclaims.",
            targetRace: Race.Wolves, priority: 9, conditional: s => (s.Target != s.Unit)),
            //Angy Wolfie Rub
            new EventString((i) => $"\"Who's a good {GetGenderString(i.Target, "girl", "boy", "wolf")}?\" <b>{i.Unit.Name}</b> says as {GPPHe(i.Unit)} rub{SIfSingular(i.Unit)} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The wolf lies down, {GPPHis(i.Target)} tongue lolling out, tail rapidly wagging, and leg kicking as <b>{i.Unit.Name}</b> rubs {GPPHis(i.Target)} belly in all the right places.",
            targetRace: Race.FeralWolves, priority: 9, conditional: s => (s.Target != s.Unit)),
            new EventString((i) => $"\"Who's a good {GetGenderString(i.Target, "girl", "boy", "wolf")}?\" <b>{i.Unit.Name}</b> says as {GPPHe(i.Unit)} rub{SIfSingular(i.Unit)} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The wolf lies down, {GPPHis(i.Target)} tongue lolling out, tail rapidly wagging, and leg kicking as <b>{i.Unit.Name}</b> rubs {GPPHis(i.Target)} belly in all the right places. \"You are! Yes you are!\" <b>{i.Unit.Name}</b> exclaims.",
            targetRace: Race.FeralWolves, priority: 9, conditional: s => (s.Target != s.Unit)),
            //Doggo rub
            new EventString((i) => $"\"Who's a good {GetGenderString(i.Target, "girl", "boy", "dog")}?\" <b>{i.Unit.Name}</b> says as {GPPHe(i.Unit)} rub{SIfSingular(i.Unit)} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The dog lies down, {GPPHis(i.Target)} tongue lolling out, tail rapidly wagging, and leg kicking as <b>{i.Unit.Name}</b> rubs {GPPHis(i.Target)} belly in all the right places.",
            targetRace: Race.Dogs, priority: 9, conditional: s => (s.Target != s.Unit) ),
            new EventString((i) => $"\"Who's a good {GetGenderString(i.Target, "girl", "boy", "dog")}?\" <b>{i.Unit.Name}</b> says as {GPPHe(i.Unit)} rub{SIfSingular(i.Unit)} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The dog lies down, {GPPHis(i.Target)} tongue lolling out, tail rapidly wagging, and leg kicking as <b>{i.Unit.Name}</b> rubs {GPPHis(i.Target)} belly in all the right places. \"I am! I am a good {GetGenderString(i.Target, "boy", "girl", "dog")}!\" <b>{i.Target.Name}</b> happily exclaims.",
            targetRace: Race.Dogs, priority: 9, conditional: s => (s.Target != s.Unit)),
            new EventString((i) => $"\"Who's a good {BoyGirl(i.Target)}?\" <b>{i.Unit.Name}</b> asks while pressing {GPPHis(i.Unit)} fingers into {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. <b>{i.Target.Name}</b> cocks {GPPHis(i.Target)} head to the side, wondering the answer. \"You are!\" The answer sends the canine into an excited, jiggling jumping spree.",
            targetRace: Race.Dogs, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s attentive massage of <b>{i.Target.Name}</b>'s {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} convinces the voracious canine to make {GPPHim(i.Unit)} {GPPHis(i.Target)} master no matter the cost.",
            targetRace: Race.Dogs, priority: 9, conditional: s => s.Target.Side == s.Unit.Side || (s.Unit.HasTrait(Traits.SeductiveTouch) && TacticalUtilities.Units.Where(actor => actor.Unit == s.Target)?.FirstOrDefault().TurnsSinceLastParalysis <= 0) ),
            new EventString((i) => $"<b>{i.Target.Name}</b> just loves <b>{i.Unit.Name}</b> so much! {GPPHe(i.Target)} can't help {GPPHimself(i.Target)} from using {GPPHis(i.Target)} sloshing belly weight to push {GPPHim(i.Unit)} over and assaulting {GPPHim(i.Unit)} in a flurry of licks.",
            targetRace: Race.Dogs, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> lolls out {GPPHis(i.Target)} tongue and gently starts to lick <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> face as {GPPHe(i.Unit)} work{SIfSingular(i.Unit)} to satisfy {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            targetRace: Race.Dogs, priority: 9),
            new EventString((i) => $"Rubbing {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} causes <b>{i.Target.Name}</b> to start thumping {GPPHis(i.Target)} leg. <b>{i.Unit.Name}</b> finds this insanely cute and redoubles {GPPHis(i.Unit)} efforts.",
            targetRace: Race.Dogs, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> lies on {GPPHis(i.Target)}back, presenting {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} to <b>{i.Unit.Name}</b> in hopes of receiving a belly rub and maybe something a bit lewder. <b>{i.Unit.Name}</b> obliges both desires.",
            targetRace: Race.Dogs, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"\"I don't like feeling empty,\" <b>{i.Target.Name}</b> says as her master presses into her {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, \"After this meal's all gone, can you fill me with puppies?\" the dog girl asks with surprising innocence. <b>{i.Unit.Name}</b> stutters for a moment but can't see a good reason why {GPPHe(i.Unit)} shouldn't.",
            targetRace: Race.Dogs, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s) && s.Target.GetGender() == Gender.Female),
            new EventString((i) => $"\"I ate them, master! I ate them just for you!\" <b>{i.Target.Name}</b> declares as <b>{i.Unit.Name}</b> tends to {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} while it dutifully turns its prey into a slurry of {PreyLocStrings.ToFluid(PreyLocation.stomach)}. \"Please love me! I'm a good mate, I swear it!\" To emphasize the point, {GPPHe(i.Target)} start{SIfSingular(i.Target)} swaying {GPPHis(i.Target)} body, making {GPPHis(i.Target)} most sensual aspects stand out to {GPPHis(i.Target)} prospective mate.",
            targetRace: Race.Dogs, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"You know,\" <b>{i.Target.Name}</b> says imperiously as {GPPHis(i.Target)} beloved presses into {GPPHis(i.Target)} soft, supple body, “I'm actually very naughty.” {GPPHe(i.Target)} rub{SIfSingular(i.Target)} the side of {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()}, {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} as it lets out a groan and leans against <b>{i.Unit.Name}</b> while whispering into {GPPHis(i.Unit)} ear, \"You should probably put a collar on me. Then we can start to work on... discipline.\"",
            targetRace: Race.Dogs, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"You know I can smell it on you, right?\" <b>{i.Target.Name}</b> states as <b>{i.Unit.Name}</b> lovingly tends to {GPPHis(i.Target)} tummy, full of {PreyLocStrings.AcidicDeadlySyn()} juices and {GetRandomStringFrom("digesting", "churning", "gurgling", "melting", "mulched", "dissolving", "liquifying", "broken down")} {GetRandomStringFrom("prey", "flesh", "meat", "warriors")}. \"Your horniness... Your lust... Your desire to have your way with me. The air is <i>thick</i> with the scent,\" the canine predator continues as lovingly tended gut rumbles, \"Don't worry. I want that too~\"",
            targetRace: Race.Dogs, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> wastes no time in accepting the advances of {GPPHis(i.Target)} favorite lover. Soon enough the two are working furiously to satiate one another’s carnal desires, <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> bulging stomach bouncing wildly the whole time. As they’re wrapped together, <b>{i.Unit.Name}</b> begins to rub behind the canine warrior’s ears, eliciting a shocked gasp and belch from {GPPHis(i.Unit)} partner.",
            targetRace: Race.Dogs, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            //Kitty rubbies
            new EventString((i) => $"<b>{i.Target.Name}</b> wrap{SIfSingular(i.Target)} {GPPHimself(i.Target)} around <b>{i.Unit.Name}</b>, pressing {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} against {GPPHim(i.Unit)} while digging {GPPHis(i.Target)} claws into {GPPHis(i.Unit)} back.",
            targetRace: Race.Cats, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> slender tail flicks back and forth, swaying with <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> rubbing motions across {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            targetRace: Race.Cats, priority: 9),
            new EventString((i) => $"The attentions on {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} from the one {GPPHe(i.Target)} love{SIfSingular(i.Target)} cause <b>{i.Target.Name}</b> to inadvertently start purring. The feline predator catches {GPPHimself(i.Target)} and stops but it's too late, <b>{i.Unit.Name}</b> already thinks {GPPHe(i.Target)} is adorable.",
            targetRace: Race.Cats, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> lifts {GPPHis(i.Target)} arms high, stretching {GPPHis(i.Target)} body out as <b>{i.Unit.Name}</b> caresses {GPPHis(i.Target)} most recent meal.",
            targetRace: Race.Cats, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> stares imperiously with {GPPHis(i.Target)} slit eyes as <b>{i.Unit.Name}</b> attends to her {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}'s physical needs while thinking about what other parts of her body could be satisfied also.",
            targetRace: Race.Cats, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && s.Target.GetGender() == Gender.Female),
            new EventString((i) => $"<b>{i.Target.Name}</b> lies on {GPPHis(i.Target)} side and tries to lick {GPPHis(i.Target)} nethers, but {GPPHis(i.Target)} prey packed tummy prevents the flexible predator from doing so. \"I can't reach,\" {GPPHe(i.Target)} says, lifting {GPPHis(i.Target)} leg high while seductively looking at <b>{i.Unit.Name}</b> \"Would you mind?\" The {GetRaceDescSingl(i.Unit)} quickly gets to work satisfying the demanding feline.",
            targetRace: Race.Cats, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"\"You know,\" <b>{i.Target.Name}</b> says, licking her paw as <b>{i.Unit.Name}</b> tends to {GPPHis(i.Target)} {GetRandomStringFrom("sloshing", "sloshy", "gurgling", "gurgly", "churning", "groaning", "growling", "rumbling", "rumbly", "hungry", "voracious", "gluttonous", "wailing", "quaking", "quivering", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing", "bubbling", "bubbly", "pulsating", "curvaceous", "prey-filled", "prey-stuffed", "soft", "swollen", "lumpy", "deadly", "hefty", "overworked")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, \"we would make beautiful kittens.\"",
            targetRace: Race.Cats, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s) && s.Target.GetGender() == Gender.Female),
            //Wolfy rubs
            new EventString((i) => $"<b>{i.Target.Name}</b> growls and shows {GPPHis(i.Target)} teeth as <b>{i.Unit.Name}</b> approaches but starts to wag {GPPHis(i.Target)} tail and softly whine as {GPPHis(i.Target)} indigestion riddled stomach is caressed.",
            targetRace: Race.Wolves, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is surprised when <b>{i.Target.Name}</b> pushes {GPPHim(i.Unit)} over and starts to writhe against {GPPHim(i.Unit)} as the long-fanged predator's {PreyLocStrings.ToSyn(PreyLocation.stomach)} wobbles and sloshes while {GPPHe(i.Unit)} press{EsIfSingular(i.Unit)} {GPPHimself(i.Unit)} closer.",
            targetRace: Race.Wolves, priority: 9),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> is passing by, the wolfen suddenly starts to aggressively rub {GPPHis(i.Target)} gorged stomach against {GPPHim(i.Unit)}. {GPPHe(i.Target)} doesn't want to share {GPPHis(i.Target)} new mate with {GPPHis(i.Target)} pack mates so {GPPHeIsAbbr(i.Target)} marking {GPPHim(i.Unit)} with {GPPHis(i.Target)} scent.",
            targetRace: Race.Wolves, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> thrusts {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> face. After a moment's pause the {GetRaceDescSingl(i.Target)} says, \"Well? It's not going to massage itself! Or would you rather do so from the inside?\" With urgency, the gurgling {PreyLocStrings.ToSyn(PreyLocation.stomach)} is attended to.",
            targetRace: Race.Wolves, priority: 9, conditional: s => ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tries {GPPHis(i.Unit)} best to pay attention to the vicious wolfen's tummy as it {GetRandomStringFrom("digests", "gurgles down", "churns down", "dissolves", "liquifies", "melts away", "breaks down")} its occupant but the {GetRaceDescSingl(i.Target)}'s heavy panting and long stares keep distracting {GPPHim(i.Unit)}. As {GPPHe(i.Unit)} lift{SIfSingular(i.Unit)} the packed guts for an underside rub {GPPHe(i.Unit)} find{SIfSingular(i.Unit)} that the predator is most certainly in heat.",
            targetRace: Race.Wolves, priority: 9, conditional: s => ReqTargetCompatibleLewd(s)),
            //Imps
            new EventString((i) => $"<b>{i.Unit.Name}</b> starts to rub <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, eliciting a mischievous cackle from the short demon.",
            targetRace: Race.Imps, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sits with <b>{i.Target.Name}</b> in {GPPHis(i.Unit)} lap.  Then {GPPHe(i.Unit)} reach{EsIfSingular(i.Unit)} over and massage{SIfSingular(i.Unit)} the Imp but {GPPHe(i.Target)} start{SIfSingular(i.Unit)} grinding {GPPHis(i.Target)} hips back and forth, making {GPPHis(i.Target)} meal slosh in {GPPHis(i.Target)} guts and {GPPHis(i.Target)} ass press against {GPPHis(i.Target)} attendant in a delightful way.",
            targetRace: Race.Imps, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            //Lizards
            new EventString((i) => $"<b>{i.Unit.Name}</b> feels {GPPHis(i.Unit)} hand across the smooth scales of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("stomach", "belly", "tummy", "abdomen", "abs", "navel")} as {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} work away its last occupant. The lizard predator watches the {GetRaceDescSingl(i.Unit)} do so with {GetRandomStringFrom("ambiguous", "uncertain", "shapeless", "formless", "unknown", "unclear", "dubious", "nebulous")} intent behind {GPPHis(i.Target)} reptilian eyes.",
            targetRace: Race.Lizards, priority: 9),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> explores the scaled predator's body {GPPHeIs(i.Unit)} when suddenly, the situation takes an unexpected turn. \n\"{GetRandomStringFrom("You will mate with me,", "Enough of that, we're going to fuck.", "All that rubbing turned me on~ You'd better fix it...", "Put those hands to work a little <i>lower</i>, would you?", "I'm so hot and bothered now...  Let's screw!" )}\" <b>{i.Target.Name}</b> says {GetRandomStringFrom("lewdly", "in a lurid manner", "in a suggestive manner", "sluttily", "unabashedly", "confidently", "without any shame", "with supreme confidence", "in a sexy tone", "with a lusty look", "lustily", "while openly admiring the dutiful attendant", "with unbridled lust", "with unrestrained desire")}.  <b>{i.Unit.Name}</b> stumbles with {GPPHis(i.Unit)} words for a moment before the predator slap{SIfSingular(i.Target)} {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, \"{GetRandomStringFrom("Or you will join <i>them</i>.", "Unless, you'd rather join <i>them?</i>", "Come on, or I'll eat you too!", "Hurry up now! Before I decide I'm still hungry~")}\"  This prompts a {GetRandomStringFrom("scared", "spooked", "unnerved", "desperate", "swift", "quick", "rapid", "frightened", "nervous", "hesitant")} yet {GetRandomStringFrom("all too eager", "excited", "still willing", "passionate", "very horny", "very much impassioned", "fervent")} agreement.",
            targetRace: Race.Lizards, priority: 9, conditional: s => ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("stomach", "belly", "tummy", "abdomen", "abs", "navel")}, padded with the melting flesh of gurgling warriors, roars angrily as indigestion sets in. {GPPHe(i.Target)} quickly approaches {GPPHis(i.Target)} favorite mate and thrust{SIfSingular(i.Target)} the {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} against {GPPHim(i.Unit)}. <b>{i.Unit.Name}</b> starts to massage {GPPHim(i.Target)} without question.",
            targetRace: Race.Lizards, priority: 9, conditional: s => s.Target.Side == s.Unit.Side),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is suddenly knocked over by a violent {PreyLocStrings.ToSyn(PreyLocation.stomach)} wobble as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> desperate prey makes one last attempt at escaping the lizard's {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. With a reptilian rage, {GPPHe(i.Target)} slam{SIfSingular(i.Target)} {GPPHis(i.Target)} fist into {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, dazing the hapless prey and ceasing the vain struggle. {GPPHe(i.Target)} then hugs {GPPHis(i.Target)} hurt mate, desperately apologizing.",
            targetRace: Race.Lizards, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"\"<b>{i.Target.Name}</b> will never eat you, even should you become weak\" the lizard predator says while <b>{i.Unit.Name}</b> caresses {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. Before a thanks can be offered, the reptile continues, \"Reward this warrior's compassion with passionate mating.\"",
            targetRace: Race.Lizards, priority: 9, conditional: s => ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            //Bnnuy
            new EventString((i) => $"<b>{i.Unit.Name}</b> can tell the process of {PreyLocStrings.DigestingVerbSyn()} {GPPHis(i.Target)} last victim is no easy task for <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} and works {GetRandomStringFrom("diligently", "dutifully", "lovingly", "eagerly", "compassionately", "with gusto", "fervently", "without question", "without hesitation")} to help the herbivorous rabbit person {PreyLocStrings.DigestVerbSyn()} {GPPHis(i.Target)} prey.",
            targetRace: Race.Bunnies, priority: 9, conditional: s => s.Target.Side == s.Unit.Side),
            new EventString((i) => $"<b>{i.Target.Name}</b> holds {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and {GetRandomStringFrom("gasps", "moans", "groans", "cries", "sighs", "whines", "whimpers")} {GetRandomStringFrom("meekly", "weakly", "quietly", "breathlessly", "miserably", "pitifully")} as it {PreyLocStrings.DigestsVerbSyn()} the meat within. {GPPHis(i.Target)} outward pain ignites the {GetRandomStringFrom("pity of", "sympathy of", "empathy of", "aid of", "compassion of", "camaraderie of", "comradery of", "the desire to assist from", "the urge to help out from")} <b>{i.Unit.Name}</b> who comes and gently massages the carrot-eater's unusual meal.",
            targetRace: Race.Bunnies, priority: 9),
            new EventString((i) => $"Even though <b>{i.Target.Name}</b> has a {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} and fierce bout of indigestion, {GPPHe(i.Target)} hop{SIfSingular(i.Target)} onto <b>{i.Unit.Name}</b> with {GetRandomStringFrom("reckless", "wild", "horny", "desperate")} abandon and the two start {GetRandomStringFrom("fucking", "banging", "screwing", "rutting", "getting naughty")} like {GPPHis(i.Target)} species' namesake.",
            targetRace: Race.Bunnies, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"\"Urgh,\" <b>{i.Target.Name}</b> {GetRandomStringFrom("gasps", "moans", "groans", "cries", "sighs", "whines", "whimpers")} while <b>{i.Unit.Name}</b> caresses {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} to ease {GPPHis(i.Target)} rising indigestion, \"Why can't we fight something more tasty? Like carrot people! Or cabbage patch monsters!\" The humor goes over well, bringing out a chuckle from {GPPHis(i.Target)} loving attendant.",
            targetRace: Race.Bunnies, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> rubs the rabbit's stomach, {GPPHeIsAbbr(i.Unit)} suddenly stopped when <b>{i.Target.Name}</b> says, \"Wait, can you hear that?\" as {GPPHe(i.Unit)} lower{SIfSingular(i.Unit)} {GPPHis(i.Unit)} head to rest against {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. \"They’re saying something! It sounds like…\" A moment passes before the bucktoothed herbi-turned-carnivore lets loose a {GetRandomStringFrom("wet", "hot", "gross", "steamy", "indulgent", "gassy", "loud", "spluttering", "lewd", "ear-ringing")} belch followed by a fit of laughing.",
            targetRace: Race.Bunnies, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ActorHumanoid(s)),
            //Foxies
            new EventString((i) => $"<b>{i.Target.Name}</b>, with great melodrama, begins to wail about {GPPHis(i.Target)} pained stomach as it bubbled away its last victim. <b>{i.Unit.Name}</b>, naïve against the wiley fox’s acting, immediately starts lathering the bushy tailed warrior with attention and rubbing.",
            targetRace: Race.Foxes, priority: 9),
            new EventString((i) => $"\"You know,\" <b>{i.Target.Name}</b> muses with a sly grin as <b>{i.Unit.Name}</b> tends to {GPPHis(i.Target)} sloshing tummy, \"You could always massage me from the inside, it’d be much more relaxing. I promise I wouldn’t let you melt away!\" The trickster is surprised and flattered when {GPPHis(i.Target)} attendant doesn’t oppose the idea because {GPPHe(i.Unit)} trust{SIfSingular(i.Unit)} {GPPHim(i.Target)} so much.",
            targetRace: Race.Foxes, priority: 9, conditional: s => ReqTargetCompatible(s) && ActorHumanoid(s)),
            //Youko
            new EventString((i) => $"<b>{i.Target.Name}</b>, with great melodrama, begins to wail about {GPPHis(i.Target)} pained stomach as it bubbled away its last victim. <b>{i.Unit.Name}</b>, naïve against the wiley fox’s acting, immediately starts lathering the bushy tailed warrior with attention and rubbing.",
            targetRace: Race.Youko, priority: 9),
            new EventString((i) => $"\"You know,\" <b>{i.Target.Name}</b> muses with a sly grin as <b>{i.Unit.Name}</b> tends to {GPPHis(i.Target)} sloshing tummy, \"You could always massage me from the inside, it’d be much more relaxing. I promise I wouldn’t let you melt away!\" The trickster is surprised and flattered when {GPPHis(i.Target)} attendant doesn’t oppose the idea because {GPPHe(i.Unit)} trust{SIfSingular(i.Unit)} {GPPHim(i.Target)} so much.",
            targetRace: Race.Youko, priority: 9, conditional: s => ReqTargetCompatible(s) && ActorHumanoid(s)),
            //Dragon
            new EventString((i) => $"At <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> behest, <b>{i.Unit.Name}</b> begins to tend to the great dragon’s mighty belly as it melts {GPPHis(i.Target)} foes away into a fine sludge.",
            targetRace: Race.Dragon, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> has to scratch hard against the huge dragon’s shifting tummy scales to even be felt. <b>{i.Target.Name}</b> cares not, simply basking in {GPPHis(i.Target)} favorite servant’s attention.",
            targetRace: Race.Dragon, priority: 9, conditional: s => s.Target.Side == s.Unit.Side),
            new EventString((i) => $"\"This is simply divine,\" <b>{i.Target.Name}</b> says haughtily as <b>{i.Unit.Name}</b> deftly attends to {GPPHis(i.Target)} prey laden belly. \"I’ll need to grant you a reward from my horde or perhaps you would prefer a… different prize,\" {GPPHe(i.Target)} say{SIfSingular(i.Target)} coyly with a seductive look while raising {GPPHis(i.Target)} tail.",
            targetRace: Race.Dragon, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"Servants like <b>{i.Unit.Name}</b> remind <b>{i.Target.Name}</b> why {GPPHe(i.Target)} do{EsIfSingular(i.Target)}n’t simply devour everyone in {GPPHis(i.Target)} path. The thought however conflicts with {GPPHis(i.Target)} sloshing midsection melting a number of mortals' flesh and bone as the aforementioned servant rubs it.",
            targetRace: Race.Dragon, priority: 9, conditional: s => s.Target.Side == s.Unit.Side),
            new EventString((i) => $"<b>{i.Target.Name}</b> can’t help but stare lovingly at <b>{i.Unit.Name}</b> as {GPPHe(i.Unit)} tend{SIfSingular(i.Unit)} to {GPPHis(i.Target)} burgeoning mass filled with the foolish and weak.",
            targetRace: Race.Dragon, priority: 9, conditional: s => s.Target.Side == s.Unit.Side),
            new EventString((i) => $"While <b>{i.Unit.Name}</b> is certainly weaker than the great dragon, <b>{i.Target.Name}</b> can’t help but obey {GPPHis(i.Unit)} every command when it comes to massaging {GPPHis(i.Target)} imperious guts. At times like this {GPPHe(i.Target)} would even let {GPPHis(i.Unit)} make more sensual desires come to the light.",
            targetRace: Race.Dragon, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"\"Come closer,\" <b>{i.Target.Name}</b> says to <b>{i.Unit.Name}</b> as {GPPHis(i.Target)} filled guts rumble ominously. \"I can think of nothing better than your touch against my scales. Touch me as you please... wherever you please.\" The imposing dragon rolls over, inviting {GPPHis(i.Target)} favorite servant to explore {GPPHis(i.Target)} vast body.",
            targetRace: Race.Dragon, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            new EventString((i) => $"Laying on {GPPHis(i.Target)} back, <b>{i.Target.Name}</b> lifts <b>{i.Unit.Name}</b> up and places {GPPHim(i.Unit)} in the middle of {GPPHis(i.Target)} sloshing scaled belly. The servant goes to work massaging the powerful entity before {GPPHeIsAbbr(i.Unit)} interrupted by a booming voice, \"There’s an itch a bit lower, lower… even lower,\" soon enough the servant finds {GPPHimself(i.Unit)} tending to {GPPHis(i.Unit)} master’s most sensitive parts.",
            targetRace: Race.Dragon, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorHumanoid(s)),
            //Taurus
            new EventString((i) => $"<b>{i.Target.Name}</b> watches <b>{i.Unit.Name}</b> as {GPPHe(i.Unit)} tr{IesIfSingular(i.Target)} to massage {GPPHis(i.Target)} sturdy, gurgling midsection in vain. Eventually {GPPHis(i.Target)} attendant just slams into {GPPHis(i.Target)} gut with a shoulder, sending {GPPHis(i.Target)} meal into another stomach chamber and a wave of pleasure through the bovine predator.",
            targetRace: Race.Taurus, priority: 9, conditional: s => s.Target.Side == s.Unit.Side),
            new EventString((i) => $"<b>{i.Target.Name}</b> grabs <b>{i.Unit.Name}</b> as {GPPHe(i.Unit)} pass{EsIfSingular(i.Unit)} by and forces {GPPHis(i.Unit)} lips onto {GPPHis(i.Target)} breast. {Capitalize(GPPHis(i.Target))} latest burbling tummy occupant quickly becoming a thick, creamy milk that pained her engorged breast. <b>{i.Unit.Name}</b>, initially surprised, now greedily sucks down the delicious milk and elicits pleasured moans from the cowgirl.",
            targetRace: Race.Taurus, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && s.Unit.HasBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b>, with a surprising amount of confidence, grabs the bovine predator by the horns and forces {GPPHim(i.Target)} onto {GPPHis(i.Target)} hands and knees. With {GPPHis(i.Target)} gut pressed against the ground, <b>{i.Target.Name}</b> is shocked but excited when {GPPHis(i.Target)} attendant begins to milk {GPPHim(i.Target)}.",
            targetRace: Race.Taurus, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && s.Unit.HasBreasts),
            new EventString((i) => $"With a wobbling tummy, <b>{i.Target.Name}</b> wraps <b>{i.Unit.Name}</b> into a deep, soft, warm hug. As it goes on, <b>{i.Unit.Name}</b> inadvertently calls <b>{i.Target.Name}</b> {(i.Target.HasBreasts ? "mommy" : "daddy")} while one party is mortified by this, the other beams with pride and no small bit of arousal.",
            targetRace: Race.Taurus, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> sits down on {GPPHis(i.Target)} fat laden ass, letting {GPPHis(i.Target)} belly rest on the ground in an attempt to relive {GPPHis(i.Target)} indigestion as {GPPHis(i.Target)} meal passes from one stomach to the next. <b>{i.Unit.Name}</b>, seeing {GPPHis(i.Target)} discomfort arrives and attends to {GPPHis(i.Target)} sloshing belly. <b>{i.Target.Name}</b> basks in the attention, leaning back on {GPPHis(i.Target)} elbows as {GPPHeIsAbbr(i.Target)} rubbed down.",
            targetRace: Race.Taurus, priority: 9, conditional: s => s.Target.Side == s.Unit.Side),
            new EventString((i) => $"<b>{i.Unit.Name}</b> begins to explore the bovine’s massive form, subtly venturing further away from the gurgling midriff. <b>{i.Target.Name}</b> pretends not to notice but can’t hide {GPPHis(i.Target)} excitement as the massage reaches {GPPHis(i.Target)} more sensitive regions.",
            targetRace: Race.Taurus, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> thinks {GPPHe(i.Target)} wouldn’t mind being milked by such diligent hands as <b>{i.Unit.Name}</b> tends to {GPPHis(i.Target)} prey filled guts.",
            targetRace: Race.Taurus, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && s.Unit.HasBreasts),
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> hands disappear into the soft belly flesh, <b>{i.Target.Name}</b> asks {GPPHim(i.Unit)} if {GPPHe(i.Unit)}'d like to be trapped in {GPPHis(i.Target)} ‘Labyrinth’ later, but the euphemism is lost on the bovine’s prospective lover.",
            targetRace: Race.Taurus, priority: 9, conditional: s => s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s)),
            //Kobolds
            new EventString((i) => $"<b>{i.Unit.Name}</b> quickly gets to work rubbing <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> belly like a good little kobold.",
            actorRace: Race.Kobolds, priority: 9, conditional: s => s.Target.Race == Race.Dragon || s.Target.Race == Race.EasternDragon),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hops onto <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> belly and begins to knead and rub it, ellicting a pleasured groan from {GPPHis(i.Unit)} draconic master.",
            actorRace: Race.Kobolds, priority: 9, conditional: s => s.Target.Race == Race.Dragon || s.Target.Race == Race.EasternDragon),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can feel the contents of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> gut shift as {GPPHe(i.Unit)} press{EsIfSingular(i.Unit)} {GPPHis(i.Unit)} hands on that big scaly {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: s => s.Target.Race == Race.Dragon || s.Target.Race == Race.EasternDragon),

            new EventString((i) => $"<b>{i.Unit.Name}</b> moans and groans as {GPPHe(i.Unit)} rub{SIfSingular(i.Unit)} {GPPHis(i.Unit)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 10, conditional: s => Lewd(s) && (s.Target == s.Unit)),
            new EventString((i) => $"\"Ohhhh...you were soooooo tasty!\" <b>{i.Unit.Name}</b> moans in pleasure as {GPPHe(i.Unit)} rub{SIfSingular(i.Unit)} {GPPHis(i.Unit)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 10, conditional: s => s.Target == s.Unit),

            new EventString((i) => $"\"Mmmmmmmm...\" <b>{i.Target.Name}</b> moans as <b>{i.Unit.Name}</b> rubs and prods the {GetRaceDescSingl(i.Target)}'s {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 8),

            new EventString((i) => $"<b>{i.Unit.Name}</b> can't believe {GPPHe(i.Unit)} got the honour to rub the gut of the famous {(TargetHumanoid(i) ? "warrior" : "beast")}, <b>{i.Target.Name}</b>.",
            priority: 9, conditional: s => s.Unit.Level + 9 < s.Target.Level),
            new EventString((i) => $"\"Oh gods this is actually happening!\" <b>{i.Unit.Name}</b> thinks to {GPPHimself(i.Unit)} as {GPPHe(i.Unit)} knead{SIfSingular(i.Unit)} the {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} of their idol, <b>{i.Target.Name}</b>.",
            priority: 9, conditional: s => s.Target.Side == s.Unit.Side && s.Unit.Level + 9 < s.Target.Level),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> eyes light up as the great {(TargetHumanoid(i) ? "warrior" : "beast")}, <b>{i.Target.Name}</b>, lets {GPPHim(i.Unit)} rub {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 9, conditional: s => s.Target.Side == s.Unit.Side && s.Unit.Level + 9 < s.Target.Level),
            new EventString((i) => $"<b>{i.Unit.Name}</b> excitedly rubs <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. The famous, battle-hardened {(TargetHumanoid(i) ? "warrior" : "beast")} closing {GPPHis(i.Target)} eyes and nodding as {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} is tended to.",
            priority: 9, conditional: s => s.Unit.Level + 9 < s.Target.Level),
            new EventString((i) => $"<b>{i.Unit.Name}</b> vigorously kneads <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} hoping that the famous {(TargetHumanoid(i) ? "warrior" : "beast")} will be impressed with {GPPHis(i.Unit)} work.",
            priority: 9, conditional: s => s.Unit.Level + 9 < s.Target.Level),

            new EventString((i) => $"<b>{i.Unit.Name}</b> excitedly rubs the {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} of <b>{i.Target.Name}</b>. The famous {(TargetHumanoid(i) ? "warrior" : "beast")} seems very pleased indeed and <b>{i.Unit.Name}</b> hopes it's enough to possibly get a 'special reward' later tonight.",
            priority: 9, conditional: s => s.Target.Side == s.Unit.Side && Lewd(s) && (s.Unit.Level + 9 < s.Target.Level)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> seductively rubs the {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} of their idol, <b>{i.Target.Name}</b>. <b>{i.Unit.Name}</b> makes sure that {GPPHis(i.Unit)} assets draw the strong {(TargetHumanoid(i) ? "warrior" : "beast")}'s attention and hopes that <b>{i.Target.Name}</b> will want to be interested in {GPPHim(i.Unit)}.",
            priority: 9, conditional: s => Lewd(s) && (s.Unit.Level + 9 < s.Target.Level)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> eagerly rubs the {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} of <b>{i.Target.Name}</b>, the famous {(TargetHumanoid(i) ? "warrior" : "beast")} whispers to {GPPHim(i.Unit)}, \"If you keep that up, I might make time for a 'special session' with you tonight.\" <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> eyes go wide and {GPPHe(i.Unit)} go{EsIfSingular(i.Unit)} back to rubbing with twice the vigor!",
            priority: 9, conditional: s => s.Target.Side == s.Unit.Side && Lewd(s) && (s.Unit.Level + 9 < s.Target.Level)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> rubs the {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} of <b>{i.Target.Name}</b>, the renowned {(TargetHumanoid(i) ? "warrior" : "beast")} whispers something into {GPPHis(i.Unit)} ear. <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> eyes light up as {GPPHe(i.Unit)} begin{SIfSingular(i.Unit)} to rub ever harder, hoping to make their idol's prey digest even faster so {GPPHe(i.Unit)} can spend more time with <b>{i.Unit.Name}</b> alone.",
            priority: 9, conditional: s => Lewd(s) && (s.Unit.Level + 9 < s.Target.Level)),
            new EventString((i) => $"\"Keep that up, and I'll give you a passionate night you'll never forget~.\" <b>{i.Target.Name}</b> tells <b>{i.Unit.Name}</b> who immediately rubs harder and faster, still somewhat in disbelief that {GPPHis(i.Unit)} idol is willing to mate with them.",
            priority: 9, conditional: s => s.Target.Side == s.Unit.Side && Lewd(s) && (s.Unit.Level + 9 < s.Target.Level)),

            //enemy rubs
            new EventString((i) => $"<b>{i.Target.Name}</b> is confused about <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> sudden affection while {GPPHeIs(i.Target)} digesting {GPPHis(i.Unit)} kin, but takes it as a peace offering considering the obvious difference in might. How adorable.",
            priority: 9, conditional: s => s.Target.Side != s.Unit.Side && (s.Unit.Level + 9 < s.Target.Level)),
            new EventString((i) => $"<b>{i.Target.Name}</b> assumes the enemy lost {GPPHis(i.Unit)} mind out of pure attraction, causing {GPPHis(i.Target)} ego to be is stroked as much as {GPPHis(i.Target)} gurgling {i.preyLocation.ToSyn()} as {GPPHe(i.Target)} pos{EsIfSingular(i.Target)} and stretches under the intensely pleasing touch.",
            priority: 9, conditional: s => s.Target.Side != s.Unit.Side && ReqTargetCompatible(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> dextrously closes in and starts kneading <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {i.preyLocation.ToSyn()} in the middle of battle, making sure their struggling former ally is processed nicely within the predator.",
            priority: 9, conditional: s => s.Target.Side != s.Unit.Side),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> reflexes don't trigger to fend off <b>{i.Unit.Name}</b>, as they lack any killing intent or sudden movements. A careful caress turns into vigorous rubbing that's definitely causing <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> comrade to be broken down faster. <b>{i.Target.Name}</b> cannot help but muse that maybe this one's useful as more than food.",
            priority: 9, conditional: s => s.Target.Side != s.Unit.Side),
            new EventString((i) => $"Instead of surrendering, <b>{i.Unit.Name}</b> seems to be offering a massage. A really good massage. <b>{i.Target.Name}</b> completely has {GPPHis(i.Target)} guard down as {GPPHe(i.Target)} get{SIfSingular(i.Prey)} lost in the bliss of feeling {GPPHis(i.Target)} prey melt away in record time, but <b>{i.Unit.Name}</b> doesn't take advantage, tending to the {i.preyLocation.ToSyn()} dutifully.",
            priority: 9, conditional: s => s.Target.Side != s.Unit.Side),
            new EventString((i) => $"<b>{i.Target.Name}</b> doesn't regret letting an unarmed <b>{i.Unit.Name}</b> touch {GPPHis(i.Target)} noisy {i.preyLocation.ToSyn()}. The {GetRaceDescSingl(i.Unit)} expertly shifts and softens the {GetRaceDescSingl(i.Target)} food that {GPPHe(i.Unit)} used to call an ally. Perhaps this is a sign {GPPHe(i.Unit)} wish{EsIfSingular(i.Unit)} to be brought inside too!",
            priority: 9, conditional: s => s.Target.Side != s.Unit.Side && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> casually commits high treason by affectionately helping the enemy's {i.preyLocation.ToSyn()} churn down <b>{i.Prey.Name}</b> into more useful stuff.",
            priority: 9, conditional: s => s.Target.Side != s.Unit.Side),
            new EventString((i) => $"<b>{i.Unit.Name}</b> adds insult to injury for <b>{i.Prey.Name}</b>, by vigorously massaging {GPPHis(i.Prey)} voracious captor's {i.preyLocation.ToSyn()} instead of even attempting to help at all.",
            priority: 9, conditional: s => s.Target.Side != s.Unit.Side && !s.Prey.IsDead),
            new EventString((i) => $"\"Help!!\", cries <b>{i.Prey.Name}</b> from within an ever softening bulge in <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {i.preyLocation.ToSyn()}. <b>{i.Unit.Name}</b> heeds {GPPHis(i.Prey)} call by helping {GPPHim(i.Prey)} digest into gut slush. Any further protest are drowned out by <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> ensuing carnal symphony.",
            priority: 9, conditional: s => s.Target.Side != s.Unit.Side && !s.Prey.IsDead),

            new EventString((i) => $"<b>{i.Unit.Name}</b> caresses <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {i.preyLocation.ToSyn()} with so much devotion, that <b>{i.Prey.Name}</b> can't help but despair as {GPPHe(i.Prey)} understand{SIfSingular(i.Prey)} {GPPHis(i.Prey)} allies wrote {GPPHim(i.Prey)} off, only considering {GPPHim(i.Prey)} food now, which should just hurry up and liquefy. At least they strive to make it quick and painless?",
            priority: 9, conditional: s => !s.Prey.IsDead && (s.Target.Side != s.Unit.Side || (s.Prey.Side == s.Target.Side && s.Target.Side == s.Unit.Side && !Endo(s)))),
            
            //Feit rubbs
            new EventString((i) => $"<b>{i.Target.Name}</b> growls her appreciation as her {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} is kneaded dutifully by <b>{i.Unit.Name}</b>.",
            targetRace: Race.Feit, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> presses down on the {GetRaceDescSingl(i.Unit)}'s {PreyLocStrings.ToSyn(PreyLocation.stomach)}, curious about <b>{i.Target.Name}'s</b> unusual body and swollen {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            targetRace: Race.Feit, priority: 9),

            //Abakhanskya rubbies
            new EventString((i) => $"<b>{i.Unit.Name}</b> is taken aback by the enormous scale of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)}. There's more here than {GPPHe(i.Unit)} could <i>ever</i> hope to grab!",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> shoves her gut up against <b>{i.Unit.Name}</b>, who immediately services the Matron and starts aiding her digestion as best {GPPHe(i.Unit)} can.",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is put to use by <b>{i.Target.Name}</b>, who desires some good gut massaging.",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"All that meat inside of <b>{i.Target.Name}</b> can be felt by <b>{i.Unit.Name}</b>, who shudders as {GPPHe(i.Unit)} works it all down.",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> hands have to press deep into all that fat to really help <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} {PreyLocStrings.DigestVerbSyn()} its load.",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> belches right into <b>{i.Unit.Name}</b> who is nearly blown away when they're forced to rub her stomach. The experienced lady laughs.",
            targetRace: Race.Abakhanskya, priority: 9, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Unit.Name}</b> submits themselves to <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> will and lets her guide their hands across the massive canvas that is her {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"The work of <b>{i.Unit.Name}</b> does not go unnoticed as they press themselves up against their Matron's bulk and start giving a massage with their whole body. <b>{i.Target.Name}</b> nods approvingly.",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"Doing as expected of them, <b>{i.Unit.Name}</b> earns a gentle pat on the head from a talon as they soothe their Matron's stomach from her wide flank.",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> has to consciously keep their balancing as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> breaths constantly heave the enormous belly back and forth as they try to rub as commanded.",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> wants to scale up that gut and massage from the top, between those enormous tits – a look from <b>{i.Unit.Name}</b> tells them to settle for the flank and front, to which they bow their head in agreement.",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"Commanded to do so, <b>{i.Unit.Name}</b> finds themselves pressing their hands deep into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> flesh to help the Matron {PreyLocStrings.DigestVerbSyn()} her prey.",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can practically feel <b>{i.Target.Name}</b> growing fatter under their grasp as she digests the meat within.",
            targetRace: Race.Abakhanskya, priority: 9),
            new EventString((i) => $"More flesh is added sooner to <b>{i.Target.Name}</b> as she commands <b>{i.Unit.Name}</b> to start massaging that {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)} she possesses.",
            targetRace: Race.Abakhanskya, priority: 9),
            //RwuMercenary Rub
            new EventString((i) => $"As <b>{i.Unit.Name}</b> {GetRandomStringFrom("pats", "rubs", "massages", "tends to")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "groaning", "growling", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} \"I was going to request a pay raise after battle but this works to.~\" <b>{i.Target.Name}</b> {GetRandomStringFrom("says gratefully", "says contently", "happily moans")}.",
            targetRace: Race.RwuMercenaries, priority: 9),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> {GetRandomStringFrom("pats", "rubs", "massages", "tends to")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("sloshing", "gurgling", "groaning", "growling", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} \"Thanks for the {GetRandomStringFrom("aid", "assist")}.\" <b>{i.Unit.Name}</b> says attempting to maintain {GetRandomStringFrom("professionalism", "military bearing")}.",
            targetRace: Race.RwuMercenaries, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> begins {GetRandomStringFrom("rubbing", "massageing", "tending to")} {GPPHis(i.Unit)} fellow mercenary's {GetRandomStringFrom("sloshing", "gurgling", "groaning", "growling", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} \"You know this is against {GetRandomStringFrom("our contract", "protocol", "regulations")}... Just don't tell high command.\" <b>{i.Target.Name}</b> whispers, while making sure no one else sees them.",
            targetRace: Race.RwuMercenaries, actorRace: Race.RwuMercenaries, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> begins {GetRandomStringFrom("rubbing", "massageing", "tending to")} {GPPHis(i.Unit)} fellow mercenary's {GetRandomStringFrom("sloshing", "gurgling", "groaning", "growling", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. <b>{i.Target.Name}</b> attempts remain stoic and hide how much {GPPHe(i.Target)} actually enjoys the act. (Failing miserably)",
            targetRace: Race.RwuMercenaries, actorRace: Race.RwuMercenaries, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pats", "rubs", "adjusts", "packs in")} {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "groaning", "growling", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, {GetRandomStringFrom("grumbling", "groaning", "sighing")} \"I better not have to get my armor refitted after I'm done with you.\"",
            priority: 11, conditional: s => s.Target == s.Unit, actorRace: Race.RwuMercenaries),
            new EventString((i) => {
                if (State.Rand.Next(15) == 1)//7% chance goof dialogue!
                    return $"As <b>{i.Unit.Name}</b> {GetRandomStringFrom("pats", "rubs", "adjusts", "packs in")} {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "groaning", "growling", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} {GPPHe(i.Unit)} wishes {GPPHe(i.Unit)} had a minigun... for recreational use.";
                return $"As <b>{i.Unit.Name}</b> {GetRandomStringFrom("pats", "rubs", "adjusts", "packs in")} {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "groaning", "growling", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing")} {PreyLocStrings.ToSyn(PreyLocation.stomach)} {GPPHe(i.Unit)} can't help but think about what {GPPHe(i.Unit)}'ll do with {GPPHis(i.Unit)} pay after battle.";
            },
            priority: 11, conditional: s => s.Target == s.Unit, actorRace: Race.RwuMercenaries),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pats", "rubs", "adjusts", "packs in", "squishes")} {GPPHis(i.Unit)} {GetRandomStringFrom("sloshing", "gurgling", "groaning", "growling", "shifting", "trembling", "wobbling", "stuffed", "full", "bloated", "bulging", "thrashing")} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, {GetRandomStringFrom("protesting", "groaning", "complaining")} \"Why are you {GetRandomStringFrom("so", "annoyingly", $"<i>annoyingly</i>")} heavy?\"",
            priority: 11, conditional: s => s.Target == s.Unit && SizeDiff(s, 1), actorRace: Race.RwuMercenaries),
        };

        BreastRubMessages = new List<EventString>()
        {
            new EventString((i) =>$"<b>{i.Unit.Name}</b> massages {(i.Unit == i.Target ? GPPHis(i.Target) : "<b>" + i.Target.Name + "</b>'s")} full breasts.", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> massages {(i.Unit == i.Target ? GPPHis(i.Target) : "<b>" + i.Target.Name + "</b>'s")} full breasts, milk leaking out of {(i.Unit == i.Target ? GPPHis(i.Target) : "<b>" + i.Target.Name + "</b>'s")} engorged nipples.", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> grabs {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}, lifting them up and then letting them bounce against {GPPHis(i.Unit)} chest, sloshing their contents about!", priority: 8, conditional: s => s.Target == s.Unit),
            new EventString((i) =>$"With a happy sigh, <b>{i.Unit.Name}</b> places {GPPHis(i.Unit)} arms behind {GPPHis(i.Unit)} back and shakes {GPPHis(i.Unit)} torso vigorusly, giving {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} a good stirring. ", priority: 8, conditional: s => s.Target == s.Unit),

            //Kangaroos (pouch vore) belly rubs
            
            // Live Prey

            // Other Ver. A
            new EventString((i) => $"<b>{i.Unit.Name}</b> approaches <b>{i.Target.Name}</b> and rubs {GPPHis(i.Target)} still squirming {GetRandomStringFrom("lower torso", "pouch", "marsupium")}, feeling <b>{i.Prey.Name}</b> within, and tiring <b>{i.Prey.Name}</b> out a little bit more.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target != s.Unit && !PreyDead(s)),
            // Other Ver. B
            new EventString((i) => $"<b>{i.Target.Name}</b> beckons <b>{i.Unit.Name}</b> over and asks {GPPHim(i.Unit)} to rub {GPPHis(i.Target)} still moving {GetRandomStringFrom("lower torso", "pouch", "marsupium")}. As <b>{i.Unit.Name}</b> rubs, they can feel the whole of <b>{i.Prey.Name}</b>'s body. <b>{i.Prey.Name}</b>, for {GPPHis(i.Prey)} part, breathes a little harder at <b>{i.Unit.Name}</b>'s touch, inadvertently wasting some of {GPPHis(i.Prey)} precious {GetRandomStringFrom("air", "oxygen", "O2")}.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target != s.Unit && !PreyDead(s)),
            // Other Ver. C: What do I even do about spines. Write a lookup for if races are invertebrate?
            //new EventString((i) => $"As <b>{i.Unit.Name}</b> walks past <b>{i.Target.Name}</b>, {GPPHim(i.Unit)} brush{EsIfSingular(i.Unit)} up against {GPPHis(i.Target)} full {GetRandomStringFrom("lower torso", "pouch", "marsupium")}, causing a shiver to go down the {spines/spine analogs<used when <b>{i.Prey.Name}</b> or <b>{i.Unit.Name}</b>(or I guess <b>{i.Target.Name}</b>) belong to races that lack spines>} of all three; <b>{i.Target.Name}</b>, <b>{i.Unit.Name}</b>, and <b>{i.Prey.Name}</b>.",
            //actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target != s.Unit && !PreyDead(s)),
            // Other Ver. D
            new EventString((i) => $"<b>{i.Target.Name}</b> has <b>{i.Unit.Name}</b> rub {GPPHis(i.Target)} still moving {GetRandomStringFrom("lower torso", "pouch", "marsupium")}, robbing <b>{i.Prey.Name}</b> of just a little more air.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target != s.Unit && !PreyDead(s)),
            // Other Ver. E
            new EventString((i) => $"As <b>{i.Unit.Name}</b> walks past <b>{i.Target.Name}</b>, {GPPHe(i.Unit)} brush{EsIfSingular(i.Unit)} up against {GPPHis(i.Target)} full {GetRandomStringFrom("lower torso", "pouch", "marsupium")}, pushing a little more air from <b>{i.Target.Name}</b>'s pouch.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target != s.Unit && !PreyDead(s)),

            // Self Ver. A
            new EventString((i) => $"As <b>{i.Prey.Name}</b> squirms within <b>{i.Unit.Name}</b>'s pouch, <b>{i.Unit.Name}</b> pushes down on {GPPHis(i.Unit)} pouch, forcing a little bit of <b>{i.Prey.Name}</b>'s limited air supply out with a barely perceptible -hwuh- sound.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target == s.Unit && !PreyDead(s)),
            // Self Ver. B & C: This one's future-proofed, huh? Also, mixed the two.
            new EventString((i) => $"<b>{i.Unit.Name}</b> decides to reach down and knead {GPPHis(i.Unit)} pouch, feeling <b>{i.Prey.Name}</b>'s form trapped inside{(State.Rand.Next(2) == 0 ? "" : " " + GPPHis(i.Unit) + " own")}. As {GPPHe(i.Unit)} do{EsIfSingular(i.Unit)} this, {GPPHe(i.Unit)} lean{SIfSingular(i.Unit)} in and whispers, \"I'd tell you your fate, but frankly, even us {i.Unit.Race} don't fully \'get\' how it works.{(State.Rand.Next(2) == 0 ? "" : " All I know is soon, you\'ll shrink down to nothing, except maybe a little fat.\"")}",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target == s.Unit && !PreyDead(s)),
            // Self Ver. D
            new EventString((i) => $"<b>{i.Unit.Name}</b> decides to reach down and punch {GPPHis(i.Unit)} own pouch, knocking quite a bit of {GetRandomStringFrom("wind", "air")} out of <b>{i.Prey.Name}</b>.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target == s.Unit && !PreyDead(s)),
            // Self Ver. E
            new EventString((i) => $"<b>{i.Unit.Name}</b> kneads {GPPHis(i.Unit)} own pouch, forcing out a little more of <b>{i.Prey.Name}</b>'s{GetRandomStringFrom("", " limited")} air{GetRandomStringFrom("", " supply")}.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target == s.Unit && !PreyDead(s)),

            // Dead Prey

            // Other Ver. A
            new EventString((i) => $"<b>{i.Unit.Name}</b> approaches <b>{i.Target.Name}</b> and rubs {GPPHis(i.Target)} {GetRandomStringFrom("lower torso", "pouch", "marsupium")}. Curiously, the bulge <b>{i.Prey.Name}</b> makes in <b>{i.Target.Name}</b>'s figure seems slightly smaller than before.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target != s.Unit && PreyDead(s)),
            // Other Ver. B
            new EventString((i) => $"<b>{i.Target.Name}</b> beckons <b>{i.Unit.Name}</b> over and asks {GPPHim(i.Unit)} to rub {GPPHis(i.Target)} still moving {GetRandomStringFrom("lower torso", "pouch", "marsupium")}. Once <b>{i.Unit.Name}</b> is done and walks away, the {GetRandomStringFrom("bump", "lump")} in <b>{i.Target.Name}</b>'s pouch seems slightly... smaller?",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target != s.Unit && PreyDead(s)),
            // Other Ver. C: Same thing as the other one
            //new EventString((i) => $"As <b>{i.Unit.Name}</b> walks past <b>{i.Target.Name}</b>, {GPPHe(i.Unit)} brush{EsIfSingular(i.Unit)} up against {GPPHis(i.Target)} full {GetRandomStringFrom("lower torso", "pouch", "marsupium")}, causing a shiver to go down <b>{i.Target.Name}</b>'s [spine/spine analog]. Oddly, once <b>{i.Target.Name}</b> is done shaking, the lump <b>{i.Prey.Name}</b> makes in <b>{i.Target.Name}</b>'s figure seems somewhat reduced.",
            //actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target != s.Unit && PreyDead(s)),
            // Other Ver. D
            new EventString((i) => $"As <b>{i.Unit.Name}</b> rubs <b>{i.Target.Name}</b>'s pouch, the bulge <b>{i.Prey.Name}</b> makes in <b>{i.Target.Name}</b>'s figure curiously seems to grow slightly smaller than it was.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target != s.Unit && PreyDead(s)),
            // Other Ver. E
            new EventString((i) => $"<b>{i.Target.Name}</b> has <b>{i.Unit.Name}</b> rub {GPPHis(i.Target)} {GetRandomStringFrom("lower torso", "pouch", "marsupium")}, causing the bulge made by <b>{i.Prey.Name}</b> in <b>{i.Target.Name}</b>'s figure to shrink slightly.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target != s.Unit && PreyDead(s)),
            // Other Ver. F
            new EventString((i) => $"As <b>{i.Unit.Name}</b> walks past <b>{i.Target.Name}</b>, {GPPHe(i.Unit)} brush{EsIfSingular(i.Unit)} up against {GPPHis(i.Target)} {GetRandomStringFrom("lower torso", "pouch", "marsupium")}, causing the bulging pouch to go a little bit down.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target != s.Unit && PreyDead(s)),
            
            // Self Ver. A, B, & D: Combined. (D was also identical to A for some reason?)
            new EventString((i) => $"<b>{i.Unit.Name}</b> decides to reach down and knead {GPPHis(i.Unit)} pouch. {GetRandomStringFrom("Curiously", "Strangely", "Oddly")}, with each rub, the bulge of <b>{i.Prey.Name}</b> seems a {GetRandomStringFrom("touch", "bit")} {GetRandomStringFrom("smaller", "shrunken")}.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target == s.Unit && PreyDead(s)),
            // Self Ver. C
            new EventString((i) => $"<b>{i.Unit.Name}</b> decides to reach down and punch {GPPHis(i.Unit)} own pouch. For a moment, a dent is left in {GetRandomStringFrom("the shape", "what's left")} of <b>{i.Prey.Name}</b> in <b>{i.Unit.Name}</b>'s pouch, as though <b>{i.Prey.Name}</b> was made of putty.{(State.Rand.Next(2) == 0 ? "" : " Then the dent fills, though if one were observent, they would notice that <b>"+i.Unit.Name+"</b>'s pouch was smaller than before it was punched.")}",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target == s.Unit && PreyDead(s)),
            // Self Ver. E
            new EventString((i) => $"<b>{i.Unit.Name}</b> decides to reach down and knead {GPPHis(i.Unit)} pouch, which oddly causes the bulge in said pouch to shrink.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target == s.Unit && PreyDead(s)),
            // Self Ver. F & H: Combined.
            new EventString((i) => $"<b>{i.Unit.Name}</b> decides to reach down and punch {GPPHis(i.Unit)} own pouch, forcing to get just a bit smaller.{(i.Prey.HealthPct > -0.75f ? "" : " Just a little bit more to go.")}",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target == s.Unit && PreyDead(s)),
            // Self Ver. G
            new EventString((i) => $"<b>{i.Unit.Name}</b> decides to reach down and knead {GPPHis(i.Unit)} pouch.",
            actorRace: Race.Kangaroos, priority: 11, conditional: s => s.preyLocation == PreyLocation.breasts && s.Target == s.Unit && PreyDead(s)),
            
            //succs
            new EventString((i) =>$"The mere touch of <b>{i.Unit.Name}</b> is enough to make <b>{i.Target.Name}</b> gasp and quiver in pleasure.", actorRace: Race.Succubi, priority: 9, conditional: s=> s.Target.Side == s.Unit.Side),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> moans and hugs <b>{i.Target.Name}</b> tightly and grinds their breasts against one another, sending tingling bliss down both their spines.", actorRace: Race.Succubi, priority: 9, conditional: s=> s.Target.Side == s.Unit.Side && ReqTargetCompatibleLewd(s) && ActorBoobs(s)),
            //Cleaveage Vore
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("holds", "carresses")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")}, feeling them jiggle violently at {GPPHis(i.Unit)} touch.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target != s.Unit && !PreyDead(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> calls <b>{i.Unit.Name}</b> over, grabs {GPPHis(i.Unit)} arm, and puts it on {GPPHis(i.Target)} {GetRandomStringFrom("tits", "boobs", "breasts")}. For a moment, <b>{i.Unit.Name}</b> is simply confused, before feeling something move beneath the skin. <b>{i.Unit.Name}</b> pulls {GPPHis(i.Unit)} hand away, blushing furiously.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target != s.Unit && !PreyDead(s) && ReqTargetCompatible(s) && TargetHumanoid(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> asks to touch <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> squirming {GetRandomStringFrom("tits", "boobs", "breasts")}, to which <b>{i.Target.Name}</b> agrees. As <b>{i.Unit.Name}</b> presses in on <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> prison, {GPPHe(i.Prey)} can feel {GPPHimself(i.Prey)} grow a little weaker.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target != s.Unit && !PreyDead(s) && ReqTargetCompatible(s) && TargetHumanoid(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tells <b>{i.Target.Name}</b> a joke, making {GPPHim(i.Target)} laugh hysterically, bouncing <b>{i.Prey.Name}</b> within {GPPHis(i.Target)} {GetRandomStringFrom("tits", "boobs", "breasts")} up and down violently.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target != s.Unit && !PreyDead(s) && TargetHumanoid(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> {GetRandomStringFrom("holds", "carresses")} {GPPHis(i.Target)} own {GetRandomStringFrom("tits", "boobs", "breasts")}, feeling them jiggle violently at {GPPHis(i.Target)} touch.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target == s.Unit && !PreyDead(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> remembers a joke {GPPHe(i.Target)} heard the other day, and suddenly starts laughing hysterically, bouncing <b>{i.Prey.Name}</b> within {GPPHis(i.Target)} {GetRandomStringFrom("tits", "boobs", "breasts")} up and down violently.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target == s.Unit && !PreyDead(s) && ActorHumanoid(s)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> turns suddenly, thinking {GPPHe(i.Target)} heard something, {GPPHis(i.Target)} {GetRandomStringFrom("tits", "boobs", "breasts")} bounce against each other, stirring <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> mind like soup.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target == s.Unit && !PreyDead(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("holds", "carresses")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")}, stimulating a little more of <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> former mass to be converted into milk.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target != s.Unit && PreyDead(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tells <b>{i.Target.Name}</b> a joke, making {GPPHim(i.Target)} laugh hysterically, and stimulating a little more of <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> former mass to be converted into milk.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target != s.Unit && PreyDead(s) && TargetHumanoid(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> asks to touch <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")}, to which <b>{i.Target.Name}</b> agrees. As <b>{i.Unit.Name}</b> pushes on them, <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")} shrink a little, and grow perhaps a touch more firm.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target != s.Unit && PreyDead(s) && ReqTargetCompatible(s) && TargetHumanoid(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> {GetRandomStringFrom("holds", "carresses")} {GPPHis(i.Target)} own {GetRandomStringFrom("tits", "boobs", "breasts")}, stimulating a little more of <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> former mass to be converted into milk.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target == s.Unit && PreyDead(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> remembers a joke {GPPHe(i.Target)} heard the other day, and suddenly starts laughing hysterically, stimulating a little more of <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> former mass to be converted into milk.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target == s.Unit && PreyDead(s) && ActorHumanoid(s)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> turns suddenly, thinking {GPPHe(i.Target)} heard something, {GPPHis(i.Target)} {GetRandomStringFrom("tits", "boobs", "breasts")} bounce against each other, breaking <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> already broken mind further.",
            priority: 8, conditional: s => CleaveageVore(s) && s.Target == s.Unit && PreyDead(s)),

        };

        TailRubMessages = new List<EventString>()
        {
            new EventString((i) =>$"<b>{i.Unit.Name}</b> strokes {(i.Unit == i.Target ? GPPHis(i.Target) : "<b>" + i.Target.Name + "</b>'s")} tail, feeling it clench and squeeze its delicious contents.", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> eagerly strokes {(i.Unit == i.Target ? GPPHis(i.Target) : "<b>" + i.Target.Name + "</b>'s")} tail, feeling the tasty burden getting lighter with each stroke.", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> soothes the sloshing in {(i.Unit == i.Target ? GPPHis(i.Target) : "<b>" + i.Target.Name + "</b>'s")} tail with a quick rub.", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> squeezes {GPPHis(i.Unit)} tail hard and sighs contently, feels the large mass finally slither into {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.", priority: 8, conditional:s => s.Target == s.Unit),
            new EventString((i) =>$"With a grunt, <b>{i.Unit.Name}</b> pats {GPPHis(i.Unit)} tail to guide the digesting food on its way to {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.", priority: 8, conditional:s => s.Target == s.Unit),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> shifts {GPPHimself(i.Unit)} sideways so that {GPPHe(i.Unit)} can press down hard on {GPPHis(i.Unit)} tail, shifting it deeper into {GPPHis(i.Unit)} body for digestion.", priority: 8, conditional:s => s.Target == s.Unit),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> curls back to stroke the bulge on {GPPHis(i.Unit)} tail, slowly guiding the lump deeper inside {GPPHim(i.Unit)}.", priority: 8, conditional:s => s.Target == s.Unit),
            new EventString((i) =>$"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail exhales a puff of acrid gas from the steady massages <b>{i.Unit.Name}</b> is giving it. <b>{i.Target.Name}</b> soon finds {GPPHimself(i.Unit)} dunked into strong stomach acids.", priority: 8, conditional:s=> HardVore(s) && CanBurp(s)),

            // Can we do an OR for actorrace? 
            new EventString((i) =>$"<b>{i.Unit.Name}</b> massages each lumpy bump on {(i.Unit == i.Target ? GPPHis(i.Target) : "<b>" + i.Target.Name + "</b>'s")} tail, enjoying each bulge slowly soften and flatten.", actorRace: Race.Vipers, priority: 9),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> massages each lumpy bump on {(i.Unit == i.Target ? GPPHis(i.Target) : "<b>" + i.Target.Name + "</b>'s")} tail, enjoying each bulge slowly soften and flatten.", actorRace: Race.Lamia, priority: 9),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> swishes {GPPHis(i.Unit)} filled tail against the ground, eager for it to squeeze its prey into {GPPHis(i.Unit)} stomach for digestion.", priority: 9, actorRace: Race.Lamia, conditional:s => s.Target == s.Unit),
            

            //succs
            new EventString((i) =>$"The mere touch of <b>{i.Unit.Name}</b> is enough to make <b>{i.Target.Name}</b> gasp and quiver in pleasure.", actorRace: Race.Succubi, priority: 9),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> passionately caresses the bulging length of {GPPHis(i.Unit)} tail, sending a burst of sensual sensations rippling down {GPPHis(i.Unit)} spine. \"Enjoy the ride my little snack.\" {GPPHe(i.Unit)} coo{SIfSingular(i.Unit)} softly.", actorRace: Race.Succubi, priority: 9, conditional:s => s.Target == s.Unit),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> stretches {GPPHis(i.Unit)} wings backwards, rubbing the wing span against {GPPHis(i.Unit)} stuffed tail to guide the contents into {GPPHis(i.Unit)} belly.", actorRace: Race.Succubi, priority: 9, conditional:s => s.Target == s.Unit),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> tucks {GPPHis(i.Unit)} bloated tail between {GPPHis(i.Unit)} legs then grinds {GPPHis(i.Unit)} {(i.Unit.HasDick ? "dick" : "pussy")} depravedly against it for <b>{AttractedWarrior(i.Unit)}</b> to see. \"Come join me my dear!\"", actorRace: Race.Succubi, priority: 9, conditional:s => s.Target == s.Unit && ReqOSWLewd(s)),
        };

        BallMassageMessages = new List<EventString>()
        {
            new EventString((i) => $"<b>{i.Unit.Name}</b> nuzzles each of {(i.Unit == i.Target ? GPPHis(i.Target) : "<b>" + i.Target.Name + "</b>'s")} {GetRandomStringFrom("balls", "testicles", "testes", "nuts", "orbs", "jizzmakers", "daddybags")} and gives them a round of stimulating licks, making them twitch up and down as they work on {PreyLocStrings.DigestingVerbSyn()} <b>{i.Prey.Name}</b> down into {PreyLocStrings.ToFluid(PreyLocation.balls)}.",
            priority: 16, targetRace: Race.FeralLions, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Target.Name}</b> is about to rub {GPPHis(i.Target)} own {PreyLocStrings.ToSyn(PreyLocation.balls)}, when <b>{i.Unit.Name}</b> quickly steals the spot and starts grinding against {GPPHis(i.Target)} crotch. The two lions make out, and this evolves into mutual dry humping, threatening to {PreyLocStrings.DigestVerbSyn()} any genital captives as the sex juices start flowing.",
            priority: 16, conditional: s => s.Target != s.Unit ,targetRace: Race.FeralLions, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "apathetically", "idly", "languorously")} sits down on {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.balls)}, compressing <b>{i.Prey.Name}</b> together with all the {PreyLocStrings.ToFluid(PreyLocation.balls)}.",
            priority: 16, conditional: s => s.Target == s.Unit ,targetRace: Race.FeralLions, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> showers <b>{i.Target.Name}</b> with playful affection and wears {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.balls)} like spectacles. The attention makes <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.balls)} churn around <b>{i.Prey.Name}</b>.",
            priority: 16, conditional: s => s.Target != s.Unit ,targetRace: Race.FeralLions, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> notices that <b>{i.Target.Name}</b> seems distressed with {GPPHis(i.Target)} swollen {PreyLocStrings.ToSyn(PreyLocation.balls)} and carefully investigates. <b>{i.Unit.Name}</b> has no idea whether it's the fullness or any prey thrashing inside, but surely a big smooch on the sheath will calm the {PreyLocStrings.ToSyn(PreyLocation.balls)}. Astonishingly, it does provide relief, because the arousal is turning <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> lifeforce into {PreyLocStrings.ToFluid(PreyLocation.balls)}.",
            priority: 16, conditional: s => s.Target != s.Unit ,targetRace: Race.FeralLions, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Target.Name}</b> startles as <b>{i.Unit.Name}</b> playfully paws at {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.balls)}, but it doesn't hurt. {Capitalize(GPPHe(i.Target))} eventually relaxes as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> kneading and kisses help turn <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> into {GPPHis(i.Target)} next sticky load.",
            priority: 16, conditional: s => s.Target != s.Unit ,targetRace: Race.FeralLions, actorRace: Race.FeralLions),
            new EventString((i) => $"<b>{i.Unit.Name}</b> gets <b>{i.Target.Name}</b> onto {GPPHis(i.Target)} back, kneads {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.balls)} and suckles {GPPHis(i.Target)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}, but carefully has {GPPHim(i.Target)} remain off the edge. {Capitalize(GPPHe(i.Unit))} even gives the {PreyLocStrings.ToSyn(PreyLocation.balls)} some gentle nibbles – all to turn <b>{i.Prey.Name}</b> into lion cummies.",
            priority: 16, conditional: s => s.Target != s.Unit ,targetRace: Race.FeralLions, actorRace: Race.FeralLions),

            // Merged original 1.5 line(s) into one entry that now handles self vs. ally rubbing
            new EventString((i) =>$"<b>{i.Unit.Name}</b> massages {(i.Unit == i.Target ? $"{GPPHis(i.Target)} own" : $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b>")} full scrotum{GetRandomStringFrom(".",$", a bit of pre leaking out of {(i.Unit == i.Target ? GPPHis(i.Target) : "<b>" + i.Target.Name + "</b>'s")} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}.")}.", priority: 8),
            // New lines (Thanks Cartography! :thumbsup:)
            new EventString((i) =>$"<b>{i.Unit.Name}</b> fondles {(i.Unit == i.Target ? $"{GPPHis(i.Target)} own" : $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b>")} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.balls)}, feeling <b>{i.Prey.Name}</b> within.",
            priority: 8),
            new EventString((i) =>$"<b>{i.Target.Name}</b> {(i.Unit == i.Target ? $"feels {GPPHis(i.Target)} own" : $"has <b>{i.Unit.Name}</b> feel {GPPHis(i.Target)}")} {PreyLocStrings.ToSyn(PreyLocation.balls)}, soaking poor <b>{i.Prey.Name}</b> even further with {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)}.",
            priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> rubs over <b>{i.Target.Name}</b>'s {PreyLocStrings.BellyStuffedAdjSyn()} {GetRandomStringFrom($"{PreyLocStrings.ToBallSynSing()}, amazed that it",$"{PreyLocStrings.ToBallSynPlural()}, amazed that they")} can contain a whole {GetRaceDescSingl(i.Prey)}.",
            priority: 8, conditional: s => !SizeDiffPrey(s, 0.75f) && s.Unit != s.Target),
            new EventString((i) =>$"As <b>{i.Target.Name}</b> walks, {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {GetRandomStringFrom($"{PreyLocStrings.ToBallSynSing()} slides",$"{PreyLocStrings.ToBallSynPlural()} slide")} along the ground, hastening the {PreyLocStrings.DigestingVerbSyn()} <b>{i.Prey.Name}</b>'s {GetRandomStringFrom("swift", "rapid", "timely", "quick", "quickening", "accelerating", "hasty", "fast")} conversion into {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)}.",
            priority: 8, conditional: s => s.Unit == s.Target),
            new EventString((i) =>$"<b>{i.Target.Name}</b> rests {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.balls)} on the ground and rolls {GPPHis(i.Target)} hips around, jostling <b>{i.Prey.Name}</b> around inside.", 
            priority: 8, conditional: s => s.Unit == s.Target),

            // PreyCumgested() is now finally used! :partying_face:
            new EventString((i) =>$"<b>{i.Unit.Name}</b> fondles {(i.Unit == i.Target ? $"{GPPHis(i.Target)} own" : $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b>")} {PreyLocStrings.BellyStuffedAdjSyn()} {GetRandomStringFrom($"{PreyLocStrings.ToBallSynSing()}, sloshing around its",$"{PreyLocStrings.ToBallSynPlural()}, sloshing around their")} {PreyLocStrings.SpoogeAdjSyn()} contents.",
            priority: 12, conditional: s => PreyCumgested(s)),
            new EventString((i) =>$"<b>{i.Target.Name}</b> {(i.Unit == i.Target ? $"feels {GPPHis(i.Target)} own" : $"has <b>{i.Unit.Name}</b> feel {GPPHis(i.Target)}")} {PreyLocStrings.ToSyn(PreyLocation.balls)}. {(i.Unit == i.Target ? $"As {GPPHe(i.Target)} touch{EsIfSingular(i.Target)} {GPPHimself(i.Target)}" : $"At {GPPHis(i.Unit)} touch")}, <b>{i.Target.Name}</b>'s {GetRandomStringFrom($"{PreyLocStrings.ToBallSynSing()} shrinks",$"{PreyLocStrings.ToBallSynPlural()} shrink")} down a little.", 
            priority: 12, conditional: s => PreyCumgested(s)),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> rubs over <b>{i.Target.Name}</b>'s {PreyLocStrings.BellyStuffedAdjSyn()} {GetRandomStringFrom($"{PreyLocStrings.ToBallSynSing()}, feeling the warmth it gives",$"{PreyLocStrings.ToBallSynPlural()}, feeling the warmth they give")} off as <b>{i.Prey.Name}</b> is absorbed within.", 
            priority: 12, conditional: s => PreyCumgested(s)),
            new EventString((i) =>$"As <b>{i.Target.Name}</b> walks, {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {GetRandomStringFrom($"{PreyLocStrings.ToBallSynSing()} slides",$"{PreyLocStrings.ToBallSynPlural()} slide")} along the ground, speeding up the {PreyLocStrings.DigestingVerbSyn()} <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> {GetRandomStringFrom("swift", "rapid", "timely", "quick", "quickening", "accelerating", "hasty", "fast")} conversion into {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)}.", 
            priority: 12, conditional: s => PreyCumgested(s)),

            new EventString((i) =>$"<b>{i.Unit.Name}</b> forcefully strokes <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}, either waiting for the prey inside {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.balls)} to melt down faster, or for {GPPHim(i.Target)} to {PreyLocStrings.ToVerb(PreyLocation.balls)} it out for <b>{i.Unit.Name}</b> to snatch it.", 
            priority: 9, conditional:s=>s.Target != s.Unit && ReqTargetCompatibleLewd(s)),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> puts <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.CockAdjSyn()} between {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.breasts)}, stroking and squishing it, waiting for release.", 
            priority: 9, conditional: s=> ReqTargetCompatibleLewd(s) && ActorBoobs(s)),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> quickly strokes {(i.Unit == i.Target ? GPPHis(i.Target) : $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b>")} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}, trying to relieve {GPPHis(i.Target)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.balls)} of their {PreyLocStrings.SpoogeAdjSyn()} contents.", 
            priority: 9, conditional: s=> ReqTargetCompatibleLewd(s) && ActorBoobs(s)),
            //succs
            new EventString((i) =>$"The mere touch of <b>{i.Unit.Name}</b> is enough to make <b>{i.Target.Name}</b> gasp and quiver in pleasure.", 
            actorRace: Race.Succubi, priority: 9),
            new EventString((i) =>$"\"My, my, what a beautiful ensemble we have here~\" coos <b>{i.Unit.Name}</b>, straddling <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.balls)} and stroking {GPPHis(i.Unit)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()} - \"{GetRandomStringFrom("Now~ Would you let me take care of it?", "Would you like a hand with that? Or maybe a <i>mouth?</i>", "Just lay back and let me take care of everything~", "Cum nice and <i>hard</i> for me~" )}\"", 
            actorRace: Race.Succubi, priority: 9, conditional: ReqTargetCompatibleLewd),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> gives a gentle kiss to <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}, giggling at {GPPHis(i.Unit)} muffled gasp of pleasure.", 
            actorRace: Race.Succubi, priority: 9),

            new EventString((i) => $"<b>{i.Unit.Name}</b> begins massaging <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.balls)}, causing the dragon to groan in pleasure.",
            actorRace: Race.Kobolds, priority: 10, conditional: s => Lewd(s) && s.Target.Race == Race.Dragon || s.Target.Race == Race.EasternDragon),
            new EventString((i) => $"<b>{i.Unit.Name}</b> prods <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, {GPPHis(i.Unit)} hands sinking into the organ as he rubs it. The increasing drops of precum falling on {GPPHis(i.Unit)} back and the pleasured groans of the dragon signal to {GPPHim(i.Unit)} that {GPPHe(i.Unit)}'s doing a good job.",
            actorRace: Race.Kobolds, priority: 10, conditional: s => Lewd(s) && s.Target.Race == Race.Dragon || s.Target.Race == Race.EasternDragon),
            new EventString((i) => $"<b>{i.Unit.Name}</b> begins massaging <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.balls)}, kneading deep and trying to massage every inch {GPPHe(i.Unit)} can. The deep, pleasured rumbling the dragon is making is a sign that the kobold is doing a fantastic job.",
            actorRace: Race.Kobolds, priority: 10, conditional: s => Lewd(s) && s.Target.Race == Race.Dragon || s.Target.Race == Race.EasternDragon),
            new EventString((i) => $"<b>{i.Target.Name}</b> beckons <b>{i.Unit.Name}</b> over, the kobold excitedly complies. <b>{i.Unit.Name}</b> digs {GPPHimself(i.Unit)} onto the outside of the dragon's {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.balls)}, rubbing {GPPHis(i.Unit)} head, hands, and entire body on as much of the sack as possible; <b>{i.Target.Name}</b> is rumbling in great pleasure the whole time. <b>{i.Unit.Name}</b> might not be a dragon {GPPHimself(i.Unit)}, but after {GPPHe(i.Unit)}'s done, {GPPHe(i.Unit)} sure smells like one.",
            actorRace: Race.Kobolds, priority: 10, conditional: s => Lewd(s) && s.Target.Race == Race.Dragon || s.Target.Race == Race.EasternDragon),

            new EventString((i) => $"<b>{i.Unit.Name}</b> begins massaging <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.balls)}, causing the dragon to groan in pleasure.",
            actorRace: Race.Kobolds, priority: 10, conditional: s => s.Target.Race == Race.Dragon || s.Target.Race == Race.EasternDragon),
            new EventString((i) => $"<b>{i.Unit.Name}</b> prods <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.balls)}, {GPPHis(i.Unit)} hands sinking into the organ as {GPPHe(i.Unit)} rub{SIfSingular(i.Unit)} it. The increasing drops of precum falling on {GPPHis(i.Unit)} back signal to {GPPHim(i.Unit)} that {GPPHeIsAbbr(i.Unit)} doing a good job.",
            actorRace: Race.Kobolds, priority: 10, conditional: s => s.Target.Race == Race.Dragon || s.Target.Race == Race.EasternDragon),

            new EventString((i) =>$"<b>{i.Unit.Name}</b> massages {(i.Unit == i.Target ? GPPHis(i.Target) : "<b>" + i.Target.Name + "</b>'s")} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.balls)}, a bit of pre leaking out of {GPPHis(i.Target)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}.", 
            priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> settles down and kneads {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.balls)}, feeling them slosh with increasing amounts of {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)}.", 
            priority: 11, conditional:s => s.Target == s.Unit),
            new EventString((i) =>$"Dropping to the ground, <b>{i.Unit.Name}</b> spreads {GPPHis(i.Unit)} legs and rubs {GPPHis(i.Unit)} thighs against {GPPHis(i.Unit)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}, enjoying the deep burbling within his {PreyLocStrings.ToSyn(PreyLocation.balls)}.", 
            priority: 11, conditional:s => s.Target == s.Unit),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> rubs {GPPHis(i.Unit)} {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.balls)}, {GPPHe(i.Unit)} begin{SIfSingular(i.Unit)} to ponder how big of a {PreyLocStrings.ToFluid(PreyLocation.balls)} puddle {GPPHis(i.Unit)} prey will make.",
            priority: 11, conditional: s => s.Target == s.Unit),

            new EventString((i) => $"<b>{i.Unit.Name}</b> can't believe {GPPHe(i.Unit)} got the honour to rub the balls of the famous {(TargetHumanoid(i) ? "warrior" : "beast")}, <b>{i.Target.Name}</b>.",
            priority: 15, conditional: s => s.Unit.Level + 9 < s.Target.Level),
            new EventString((i) => $"\"Oh gods this is actually happening!\" <b>{i.Unit.Name}</b> thinks to {GPPHimself(i.Unit)} as {GPPHe(i.Unit)} knead{SIfSingular(i.Unit)} the prey-filled {PreyLocStrings.ToSyn(PreyLocation.balls)} of thier idol, <b>{i.Target.Name}</b>.",
            priority: 15, conditional: s => s.Unit.Level + 9 < s.Target.Level),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> eyes light up as the great {(TargetHumanoid(i) ? "warrior" : "beast")}, <b>{i.Target.Name}</b>, lets {GPPHim(i.Unit)} rub {GPPHis(i.Target)} prey-filled {PreyLocStrings.ToSyn(PreyLocation.balls)}.",
            priority: 15, conditional: s => s.Unit.Level + 9 < s.Target.Level),
            new EventString((i) => $"<b>{i.Unit.Name}</b> excitedly rubs <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> belly. The famous, battle-hardened {(TargetHumanoid(i) ? "warrior" : "beast")} closing {GPPHis(i.Target)} eyes and groans in pleasure as <b>{i.Target.Name}</b> is clearly doing a good job.",
            priority: 15, conditional: s => s.Unit.Level + 9 < s.Target.Level),
            new EventString((i) => $"<b>{i.Unit.Name}</b> kneads and prods the {PreyLocStrings.ToSyn(PreyLocation.balls)} of <b>{i.Target.Name}</b>, hoping that the famous {(TargetHumanoid(i) ? "warrior" : "beast")} will be impressed with {GPPHis(i.Unit)} work.",
            priority: 15, conditional: s => s.Unit.Level + 9 < s.Target.Level),

            new EventString((i) => $"<b>{i.Unit.Name}</b> excitedly rubs the {PreyLocStrings.ToSyn(PreyLocation.balls)} of <b>{i.Target.Name}</b>. The famous {(TargetHumanoid(i) ? "warrior" : "beast")} groans lustfully and <b>{i.Unit.Name}</b> hopes it's enough to possibly get a 'special reward' later tonight.",
            priority: 15, conditional: s => Lewd(s) && (s.Unit.Level + 9 < s.Target.Level)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> seductively rubs the {PreyLocStrings.ToSyn(PreyLocation.balls)} of their idol, <b>{i.Target.Name}</b>. <b>{i.Unit.Name}</b> makes sure that {GPPHis(i.Unit)} assets draw the strong {(TargetHumanoid(i) ? "warrior" : "beast")}'s attention and hopes that <b>{i.Target.Name}</b> will think of taking {GPPHim(i.Unit)} tonight.",
            priority: 15, conditional: s => Lewd(s) && (s.Unit.Level + 9 < s.Target.Level)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> eagerly rubs the {PreyLocStrings.ToSyn(PreyLocation.balls)} of <b>{i.Target.Name}</b>, the renowned {(TargetHumanoid(i) ? "warrior" : "beast")} whispers to {GPPHim(i.Unit)}, \"If you keep that up, I might test out my new potency on you tonight~.\" <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> eyes go wide and {GPPHe(i.Unit)} go{EsIfSingular(i.Unit)} back to rubbing with thrice the vigor!",
            priority: 15, conditional: s => Lewd(s) && (s.Unit.Level + 9 < s.Target.Level)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> rubs the {PreyLocStrings.ToSyn(PreyLocation.balls)} of <b>{i.Target.Name}</b>, the strong {(TargetHumanoid(i) ? "warrior" : "beast")} whispers something into {GPPHis(i.Unit)} ear. <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> eyes light up as {GPPHe(i.Unit)} begin{SIfSingular(i.Unit)} to rub ever harder, hoping to make their idol's prey churn even faster so {GPPHe(i.Unit)} can spend more time with <b>{i.Unit.Name}</b> alone.",
            priority: 15, conditional: s => Lewd(s) && (s.Unit.Level + 9 < s.Target.Level)),
            new EventString((i) => $"\"Keep that up, and I'll give you a mating session you will never forget.\" <b>{i.Target.Name}</b> tells <b>{i.Unit.Name}</b> who immediately rubs harder and faster, clearly unable to hide their excitement after hearing that <b>{i.Target.Name}</b> wants to have sex with {GPPHim(i.Unit)}.",
            priority: 15, conditional: s => Lewd(s) && (s.Unit.Level + 9 < s.Target.Level)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> excitedly rubs the {PreyLocStrings.ToSyn(PreyLocation.balls)} of the battle-hardened {(TargetHumanoid(i) ? "warrior" : "beast")}, <b>{i.Target.Name}</b>. The smell of such a powerful {(TargetHumanoid(i) ? "warrior" : "beast")}'s nether regions is too arousing for <b>{i.Unit.Name}</b> and {GPPHis(i.Unit)} other hand drifts down to {GPPHis(i.Unit)} crotch.",
            priority: 15, conditional: s => Lewd(s) && (s.Unit.Level + 9 < s.Target.Level)),

        };

        BreastVoreMessages = new List<EventString>()
        {
            new EventString((i) =>$"<b>{i.Target.Name}</b> lets out a distressed yelp as {GPPHeIs(i.Target)} shoved headfirst into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> nipple!", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> casts aside {GPPHis(i.Unit)} weapon and grabs onto <b>{i.Target.Name}</b>, stuffing {GPPHim(i.Target)} into {GPPHis(i.Unit)} cleavage!", priority: 8, conditional: (s) => s.Unit.HasWeapon && s.Unit.FixedGear == false && ActorHumanoid(s)),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> swiftly jumps on <b>{i.Target.Name}</b>, {GPPHis(i.Target)} form engulfed by <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> breasts!", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> shoves <b>{i.Target.Name}</b> onto the ground and shoves {GPPHim(i.Target)} legfirst into {GPPHis(i.Unit)} nipple!", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> overpowers <b>{i.Target.Name}</b> and swiftly shoves {GPPHim(i.Target)} into {GPPHis(i.Unit)} bust!", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> shoves <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} supple, hungry bosom.", priority: 8),
            new EventString((i) =>$"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> nipples ache after stretching far enough to consume {GPPHis(i.Unit)} rival warrior.", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> holds <b>{i.Target.Name}</b> tightly, preparing to swallow them, but just as {GPPHe(i.Unit)} go{EsIfSingular(i.Unit)} to swallow them, {GPPHe(i.Unit)} see{SIfSingular(i.Unit)} {GPPHis(i.Unit)} prey disappearing into {GPPHis(i.Unit)} engorged cleavage.", priority: 8),

            /*Weapon detection example
            new EventString((i) =>$"<b>{i.Unit.Name}</b> disarms <b>{i.Target.Name}</b> of {GPPHis(i.Target)} {GetWeaponTrueName(i.Target.GetBestMelee(), i.Target)} not wishing to assist in {GPPHis(i.Unit)} prey's potential escape before shoving {GPPHim(i.Target)} into {GPPHis(i.Unit)} engorged cleavage.", priority: 25, conditional: (s) => (s.Target.HasSpecificWeapon(ItemType.Axe) || s.Target.HasSpecificWeapon(ItemType.Mace)) && s.Target.FixedGear == false && TargetHumanoid(s) && ActorHumanoid(s)),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> disarms <b>{i.Target.Name}</b> of {GPPHis(i.Target)} {GetWeaponTrueName(i.Target.GetBestRanged(), i.Target)} and says \"Enough with the range!\" before shoving {GPPHim(i.Target)} into {GPPHis(i.Unit)} engorged cleavage.", priority: 25, conditional: (s) => (s.Target.HasSpecificWeapon(ItemType.CompoundBow) || s.Target.HasSpecificWeapon(ItemType.Bow)) && s.Target.FixedGear == false && TargetHumanoid(s) && ActorHumanoid(s)),
            Weapon detection example*/

            //Slime pred
            new EventString((i) => $"<b>{i.Unit.Name}</b> launches {GPPHimself(i.Unit)} at <b>{i.Target.Name}</b>, engulfing them in {GPPHis(i.Unit)} bosom!", actorRace: Race.Slimes, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> seems to hug <b>{i.Target.Name}</b>, engulfing them in {GPPHis(i.Unit)} chest!", actorRace: Race.Slimes, priority: 10),

            //Slime prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> reaches for <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> core, shoving it into {GPPHis(i.Unit)} cleavage!", targetRace: Race.Slimes, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> viscous form and slurps {GPPHim(i.Target)} into {GPPHis(i.Unit)} nipples!", targetRace: Race.Slimes, priority: 10),

            //Kangaroo pred (pouch vore)
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{i.Target.Name}</b> and shoves {GPPHim(i.Target)} into {GPPHis(i.Unit)} pouch. Once <b>{i.Target.Name}</b> is fully inside, the pouch entrance seals tight.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            // Todo: Write a method for checking the unit's feet when I'm not so tired
            //new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{i.Target.Name}</b> with both arms and lifts {GPPHim(i.Target)} up. At first, <b>{i.Target.Name}</b> is worried, but as <b>{i.Unit.Name}</b> starts to lower {GPPHim(i.Target)}, <b>{i.Target.Name}</b> feels relieved. That is, until <b>{i.Target.Name}</b> feels {GPPHis(i.Target)} {(i.Target.Race == Race.Lamia ? "tail" : i.Target.Race == Race.Slimes ? "feet")} enter a warm chamber. Before <b>{i.Target.Name}</b> knows it, {GPPHe(i.Target)} find{SIfSingular(i.Target)} the opening of <b>{i.Unit.Name}</b>'s pouch sealing tight above {GPPHim(i.Target)}!", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> tries to tackle <b>{i.Target.Name}</b>, {GPPHe(i.Unit)} fumble{SIfSingular(i.Unit)}, flying through the air at an odd angle. When <b>{i.Unit.Name}</b> gets back up, {GPPHe(i.Unit)} find{SIfSingular(i.Unit)} {GPPHis(i.Unit)} pouch entrance sealed, and <b>{i.Target.Name}</b> struggling vigorously within it!", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> tries to tackle <b>{i.Target.Name}</b>, {GPPHe(i.Unit)} fumble{SIfSingular(i.Unit)}, and somehow end{SIfSingular(i.Unit)} up with {GetRandomStringFrom("<b>" + i.Target.Name + "</b>", "the " + GetRaceDescSingl(i.Target), "the " + GetPreyDesc(i.Target) + " " + GetRaceDescSingl(i.Target))} in {GPPHis(i.Unit)} pouch!", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> approaches <b>{i.Target.Name}</b> and taps on {GPPHis(i.Target)} shoulder. <b>{i.Unit.Name}</b> then gestures to {GPPHis(i.Unit)} pouch, which {GPPHeIs(i.Unit)} holding open with {GPPHis(i.Unit)} fingers. After <b>{i.Target.Name}</b> reluctantly gets in, <b>{i.Unit.Name}</b>'s pouch's entrance closes somewhat above <b>{i.Target.Name}</b>, not enough to block oxygen from flowing in, but enough to stop <b>{i.Target.Name}</b> from just falling out.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts && (s.Target.Side == s.Unit.Side)),

            // Endo pouch vore
            new EventString((i) => $"<b>{i.Unit.Name}</b> approaches <b>{i.Target.Name}</b> and asks {GPPHim(i.Target)} to get in {GPPHis(i.Unit)} pouch, which <b>{i.Target.Name}</b> quickly does.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts && (s.Target.Side == s.Unit.Side)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> walks by <b>{i.Target.Name}</b>, <b>{i.Target.Name}</b> asks if {GPPHe(i.Target)} could hide in <b>{i.Unit.Name}</b>'s pouch for a bit, to which <b>{i.Unit.Name}</b> shrugs and says \"sure.\"", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts && (s.Target.Side == s.Unit.Side)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> approaches <b>{i.Target.Name}</b> and tells {GPPHim(i.Target)} to get in {GPPHis(i.Unit)} pouch. Not one to question orders, <b>{i.Target.Name}</b> gets in <b>{i.Unit.Name}</b>'s pouch.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts && (s.Target.Side == s.Unit.Side)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> approaches <b>{i.Target.Name}</b>, {GPPHe(i.Target)} surprises <b>{i.Unit.Name}</b> by jumping in {GPPHis(i.Unit)} pouch!", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts && (s.Target.Side == s.Unit.Side)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> approaches <b>{i.Target.Name}</b>, {GPPHe(i.Target)} surprises <b>{i.Unit.Name}</b> by jumping in {GPPHis(i.Unit)} pouch! \"Not really the time for roleplay right now,\" <b>{i.Unit.Name}</b> whispers to the giggling {InfoPanel.RaceSingular(i.Target)}.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts && (s.Target.Side == s.Unit.Side)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> approaches <b>{i.Target.Name}</b>, {GPPHe(i.Target)} surprises <b>{i.Unit.Name}</b> by jumping in {GPPHis(i.Unit)} pouch! <b>{i.Unit.Name}</b> snarls slightly, and mutters \"coward\" under {GPPHis(i.Unit)} breath at the shaking {InfoPanel.RaceSingular(i.Target)}.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts && (s.Target.Side == s.Unit.Side)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> approaches <b>{i.Target.Name}</b>, {GPPHe(i.Target)} surprises <b>{i.Unit.Name}</b> by jumping in {GPPHis(i.Unit)} pouch! \"Ooh, kinky!\" <b>{i.Unit.Name}</b> says to the squirming {InfoPanel.RaceSingular(i.Target)}.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts && (s.Target.Side == s.Unit.Side)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> walks by <b>{i.Target.Name}</b>, <b>{i.Target.Name}</b> asks if {GPPHe(i.Target)} could hide in <b>{i.Unit.Name}</b>'s pouch for a bit. <b>{i.Unit.Name}</b>, who had secretly been hoping for this, grabs <b>{i.Target.Name}</b> and shoves {GPPHim(i.Target)} into {GPPHis(i.Unit)} pouch before <b>{i.Target.Name}</b> can even think of changing {GPPHis(i.Target)} mind.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts && (s.Target.Side == s.Unit.Side)),
            
            // Additional pouch vore
            // Todo: Find some way to check if PreyLocation is already occupied when voring
            //new EventString((i) => $"", actorRace: Race.Kangaroos, priority: 10, conditional: s => s.Unit.),
            
            new EventString((i) => $"<b>{i.Unit.Name}</b> and <b>{i.Target.Name}</b> grapple each other tightly, grinding their breasts hard against one another until <b>{i.Target.Name}</b> sinks into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> bosom!", priority: 8, conditional: s => ActorBoobs(s) && TargetBoobs(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> presses {GPPHis(i.Unit)} breasts over <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head, muffling the voice of the leader of the {GetPreyDesc(i.Target)} {GetRaceDescSingl(i.Target)} and absorbing {GPPHim(i.Unit)} into the hungry breast flesh.", priority: 8, conditional: s => Lewd(s) && TargetLeader(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> stuffs <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} boobs.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sucks <b>{i.Target.Name}</b> up {GPPHis(i.Unit)} breasts, the engorged bosom jiggling as prey struggles inside.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"Not a moment after being sucked in, <b>{i.Target.Name}</b> is already plotting {GPPHis(i.Target)} escape from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> bosom.",priority:25, conditional: HasGreatEscape),
            // RwuMercenary Breast vore
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("handily", "swiftly", "deftly")} stuffs <b>{i.Target.Name}</b>, into {GPPHis(i.Unit)} chest.\"Good thing this chest armor is so flexible!\" <b>{i.Unit.Name}</b> says as {GPPHis(i.Unit)} bust expands.", actorRace: Race.RwuMercenaries, priority: 10),
            // Cleaveage Vore
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head and shoves it between {GPPHis(i.Unit)} {GetRandomStringFrom("tits", "boobs", "breasts")}! Much to <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> surprise, {GPPHe(i.Target)} sink{SIfSingular(i.Target)} into the soft flesh at the bottom, becoming living fat on <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")}.",priority: 8, conditional: s => CleaveageVore(s)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> approaches <b>{i.Unit.Name}</b>, {GPPHe(i.Target)} trip{SIfSingular(i.Target)}, and fall{SIfSingular(i.Target)} face first into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> cleavage. With a {GetRandomStringFrom("-slurp-", "-fwump-")} sound, <b>{i.Target.Name}</b> is gone, and <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")} are both bigger and and now squirming.",priority: 8, conditional: s => CleaveageVore(s)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> approaches <b>{i.Unit.Name}</b>, {GPPHe(i.Target)} trip{SIfSingular(i.Target)}, and fall{SIfSingular(i.Target)} face first into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> cleavage. With a {GetRandomStringFrom("-slurp-", "-fwump-")} sound, <b>{i.Target.Name}</b> is gone, and <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")} are both bigger and and now squirming. While the exact \"How?\" is unclear, the \"Where?\" of <b>{i.Target.Name}</b> is quite obvious.",priority: 8, conditional: s => CleaveageVore(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> casually approaches <b>{i.Target.Name}</b>, picks {GPPHim(i.Target)} up, and begins sinking {GPPHim(i.Target)} between {GPPHis(i.Unit)} cleavage. As <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head slides between <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")}, {GPPHe(i.Target)} give{SIfSingular(i.Target)} <b>{i.Unit.Name}</b> a judgmental look.",priority: 9, conditional: s => CleaveageVore(s) && Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> runs at <b>{i.Unit.Name}</b> and jumps into {GPPHis(i.Unit)} {GetRandomStringFrom("tits", "boobs", "breasts")}! \"You're lucky I like you, or you'd become a permanent addition to my chest,\" <b>{i.Unit.Name}</b> says with a sigh.",priority: 9, conditional: s => CleaveageVore(s) && Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> picks up the shrunk <b>{i.Target.Name}</b> and casually drops the {GetRaceDescSingl(i.Target)} between {GPPHis(i.Unit)} {PreyLocStrings.ToBreastSynPlural()}, where {GPPHe(i.Target)} dissapear{SIfSingular(i.Target)}.",priority: 9, conditional: s => CleaveageVore(s) && Shrunk(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> places <b>{i.Target.Name}</b> between {GPPHis(i.Unit)} {PreyLocStrings.ToBreastSynPlural()} and then pushes them together. As the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))} {PreyLocStrings.ToBreastSynPlural()} seperate, <b>{i.Target.Name}</b> is gone{GetRandomStringFrom(".", "!", ", like a magic trick.", ", like a magic trick!")}",priority: 9, conditional: s => CleaveageVore(s) && Shrunk(s)),
            new EventString((i) => $"Seeing <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> diminuative form trying to run away, <b>{i.Unit.Name}</b> plops infront of {GPPHim(i.Target)}. The panicked {GetRaceDescSingl(i.Target)} doesn't have time to turn around and dissapears between <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToBreastSynPlural()}{GetRandomStringFrom(".", $". As <b>{i.Unit.Name}</b> gets up, no sign of <b>{i.Target.Name}</b> can be seen.", $". As <b>{i.Unit.Name}</b> gets up, no sign of <b>{i.Target.Name}</b> can be seen, save for a slight extra jiggle in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToBreastSynPlural()}.")}",priority: 9, conditional: s => CleaveageVore(s) && Shrunk(s)),
            new EventString((i) => $"The massive hand of <b>{i.Unit.Name}</b> envelops <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> entire body. <b>{i.Unit.Name}</b> smirks tossing the scared {GetRaceDescSingl(i.Target)} at {GPPHis(i.Unit)} mouth, accidently tossing {GPPHim(i.Target)} at {GPPHis(i.Unit)} {PreyLocStrings.ToBreastSynPlural()}, and <b>{i.Target.Name}</b> watches with horror as {GPPHe(i.Target)} \"sink{SIfSingular(i.Target)}\" into the flesh of the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))} {PreyLocStrings.ToBreastSynPlural()}.",priority: 9, conditional: s => CleaveageVore(s) && Shrunk(s)),

        };

        CockVoreMessages = new List<EventString>()
        {
            //Generic messages
            new EventString((i) => $"<b>{i.Target.Name}</b> lets out a distressed yelp as {GPPHeIs(i.Target)} shoved headfirst into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}!",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> casts aside {GPPHis(i.Unit)} weapon and grabs onto <b>{i.Target.Name}</b>, stuffing {GPPHim(i.Target)} into {GPPHis(i.Unit)} testicles!",
            priority: 8, conditional: (s) => s.Unit.HasWeapon && s.Unit.FixedGear == false && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> swiftly jumps on <b>{i.Target.Name}</b>, {GPPHis(i.Target)} form engulfed by <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}!",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> shoves <b>{i.Target.Name}</b> onto the ground and shoves {GPPHim(i.Target)} into {GPPHis(i.Unit)} dick!",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> overpowers <b>{i.Target.Name}</b> and swiftly shoves {GPPHim(i.Target)} into {GPPHis(i.Unit)} balls!",
            priority: 8),
            new EventString((i) => $"Grunting with each throb, <b>{i.Unit.Name}</b> sees <b>{i.Target.Name}</b> disappear further and further into {GPPHis(i.Unit)} cock.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lewdly sways {GPPHis(i.Unit)} hips, giving friend and foe alike the sight of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body disappearing into into {GPPHis(i.Unit)} cock.",
            priority: 8),
            new EventString((i) => $"Tired of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> struggling, <b>{i.Unit.Name}</b> grabs {GPPHim(i.Target)} by {GPPHis(i.Target)} shoulders and swiftly humps <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} cock.",
            priority: 8),
            new EventString((i) => $"Just bringing <b>{i.Target.Name}</b> close enough to glans causes <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> cock to swell and instantly swallow {GPPHis(i.Unit)} prey.",
            priority: 8),

            //Slime pred
            new EventString((i) => $"<b>{i.Unit.Name}</b> launches {GPPHimself(i.Unit)} at <b>{i.Target.Name}</b>, engulfing {GPPHim(i.Target)} in {GPPHis(i.Unit)} testicles!",
            actorRace: Race.Slimes, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> cascades over <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body, sucking {GPPHim(i.Target)} into {GPPHis(i.Unit)} dick!",
            actorRace: Race.Slimes, priority: 10),
            new EventString((i) => $" Everyone on the battlefield gets a good view of <b>{i.Target.Name}</b> sliding through translucent member of <b>{i.Unit.Name}</b> into {GPPHis(i.Unit)} balls.",
            actorRace: Race.Slimes, priority: 10),
            new EventString((i) => $"With a naughty grin, <b>{i.Unit.Name}</b> swells {GPPHis(i.Unit)} dick to grotesque proportions and slams it down on <b>{i.Target.Name}</b>, stunning and absorbing them through it.",
            actorRace: Race.Slimes, priority: 10),

            //Slime prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> reaches for <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> core, shoving it into {GPPHis(i.Unit)} penis!",
            targetRace: Race.Slimes, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> viscous form and slurps {GPPHim(i.Target)} into {GPPHis(i.Unit)} dick!",
            targetRace: Race.Slimes, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> shoves {GPPHis(i.Unit)} dick into <b>{i.Target.Name}</b>. Before <b>{i.Target.Name}</b> could react, <b>{i.Unit.Name}</b> slurps {GPPHim(i.Target)} up {GPPHis(i.Unit)} throbbing member.",
            targetRace: Race.Slimes, priority: 9, conditional: Lewd),

            new EventString((i) => $"<b>{i.Unit.Name}</b> smirks at <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> fearful face before {GPPHe(i.Unit)} cram{SIfSingular(i.Unit)} the so-called leader down {GPPHis(i.Unit)} mighty cock.",
            priority: 8, conditional: s => TargetLeader(s) && ActorHumanoid(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs the shrunken form of <b>{i.Target.Name}</b> and holds {GPPHim(i.Target)} tight against {GPPHis(i.Unit)} crotch. <b>{i.Unit.Name}</b> makes sure that the struggling {GetRaceDescSingl(i.Target)} gets good whiff before bringing {GPPHim(i.Target)} up to {GPPHis(i.Unit)} shaft and sticking {GPPHim(i.Target)} inside.",
            priority: 11, conditional: s => Shrunk(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs the shrunken form of <b>{i.Target.Name}</b>, getting all sorts of dirty thoughts of what to do with {GPPHim(i.Target)}. <b>{i.Unit.Name}</b> gets an idea and holds the wiggling {GetRaceDescSingl(i.Target)} against {GPPHis(i.Unit)} length, stroking up and down for a bit before shoving <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} dick.",
            priority: 11, conditional: s => Shrunk(s) && Lewd(s)),
            new EventString((i) => $"A shrunken <b>{i.Target.Name}</b> screams in horror as the massive hand of <b>{i.Unit.Name}</b> envelops {GPPHis(i.Target)} entire body. <b>{i.Unit.Name}</b> smirks and gives the scared {GetRaceDescSingl(i.Target)} a good look at {GPPHis(i.Unit)} member before stuffing {GPPHim(i.Target)} inside.",
            priority: 11, conditional: Shrunk),

            new EventString((i) => $"<b>{i.Unit.Name}</b> stuffs <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} cock.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"In a humping frenzy accompanying <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> descent into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> gurgling balls', <b>{i.Unit.Name}</b> doesn't notice <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> smug expression. \"Enjoy it while it lasts\" - the prey says disappearing inside.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> shaft greedily consumes <b>{i.Target.Name}</b>, {GPPHis(i.Target)} form engorging the pred's balls. <b>{i.Target.Name}</b> settles within and starts probing the walls of {GPPHis(i.Target)} fleshy prison, looking for a way out.",priority:25, conditional: HasGreatEscape),

            //Endo
            new EventString((i) => $"<b>{i.Target.Name}</b> blushes when <b>{i.Unit.Name}</b> embraces {GPPHim(i.Target)} and sends {GPPHim(i.Target)} sliding down {GPPHis(i.Unit)} shaft.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> gently engulfs {GPPHis(i.Unit)} ally. For <b>{i.Target.Name}</b>, the noise of the battlefield is replaced with gently sloshing and throbbing, as well as an all-encompassing heartbeat.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"After a moment of nervous hesitation, <b>{i.Target.Name}</b> comfortably slips into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} thoroughly played with by <b>{i.Unit.Name}</b>, {GPPHis(i.Target)} ally, before being packed away into the safety of {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> squirms and thrashes about, trying to free {GPPHimself(i.Target)} from the grasp of {GPPHis(i.Target)} vicious predator... and then {( Lewd(i) ? "moans in delight" : "giggles")} as the last of {GPPHim(i.Target)} slide{SIfSingular(i.Target)} into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}.\n<b>{i.Unit.Name}</b> appreciates the act and caresses {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> has to reassure <b>{i.Target.Name}</b> that it's safe, before the latter finally dives head first down the length of {GPPHis(i.Unit)} cock.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            //RwuMercenary CV
            new EventString((i) => $"\"Voring may not be our specialty, but I never get tired of doing that!\" <b>{i.Unit.Name}</b> says as {GPPHe(i.Unit)} sends <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            actorRace: Race.RwuMercenaries, priority: 9),

            //New CV w/ dialog by Flame
            new EventString((i) => $"\"{GetRandomStringFrom("Fuck","Fuuuck","Mmm","Mmm fuck","Ahh","Mmmffyeah","Mmm yeah","Mmmf","Mmmyeah","Nnf","Hnn","Ooh","Ohh")}, <b>{i.Target.Name}</b>, {GetRandomStringFrom("there we go","that's it","in you go","down you go")}{GetRandomStringFrom("~","...","!")}  {GetRandomStringFrom("Slide","Slip","Squeeze","Slither")} down into my {PreyLocStrings.ToSyn(PreyLocation.balls)}{GetRandomStringFrom("~","...","!")}  Gonna {PreyLocStrings.DigestVerbSyn()} you into a {GetRandomStringFrom("fat","hot","huge","big","massive")} load of {GetRandomStringFrom("cum","cum","sperm","semen","jizz","jizz","spunk","spunk","seed","seed","nut","spooge","batter")}{GetRandomStringFrom("~","...","!")}\" <b>{i.Unit.Name}</b> taunts the squirming {InfoPanel.RaceSingular(i.Target)} {GetRandomStringFrom("with glee","with amusement","casually","idly","with a cocky grin")} as {GPPHe(i.Unit)} works {GPPHim(i.Target)} down the shaft of {GPPHis(i.Unit)} {PreyLocStrings.ToCockSyn()}.  \"I wonder if <b>{AttractedWarrior(i.Unit).Name}</b> will let me {GetRandomStringFrom("blow","pump","cum","nut","blast","bust","shoot","dump","splurt","spurt","jizz")} you into one of their holes later...\"",
            priority: 8, conditional: s => ActorHumanoid(s) && ReqOSWLewd(s)),
            new EventString((i) => $"\"{GetRandomStringFrom("In you go","Down you go")}, {InfoPanel.RaceSingular(i.Target)}{GetRandomStringFrom("~","...","!")}  Let's get you {GetRandomStringFrom("tucked away","nice and snug","wrapped up")} in my {PreyLocStrings.ToSyn(PreyLocation.balls)} where you belong{GetRandomStringFrom("~","...","!")}\" <b>{i.Unit.Name}</b> grunted as the last of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> disappeared into {GPPHis(i.Unit)} {GetRandomStringFrom("hungry","greedy")} {PreyLocStrings.ToCockSyn()}.  \"You were always {GetRandomStringFrom("gonna","going to","destined to")} {GetRandomStringFrom("end up as","become","turn into","melt into")} my next {GetRandomStringFrom("load","round","wad","blast","shot")} of {GetRandomStringFrom("cum","cum","sperm","semen","jizz","spunk","seed","seed","nut","spooge","spooge","ball-batter")}...\"",
            priority: 8, conditional: s => ActorHumanoid(s)),
            
        };

        AnalVoreMessages = new List<EventString>()
        {
            new EventString((i) => $"<b>{i.Unit.Name}</b> leaps high into the air before coming down onto <b>{i.Target.Name}</b> ass-first, slurping the terrified prey up {GPPHis(i.Unit)} {(ActorTail(i) ? GetRandomStringFrom("tailhole","anus","rectum","sphincter","rear-entrance","backdoor") : GetRandomStringFrom("asshole","anus","rectum","sphincter","rear-entrance","backdoor"))}.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> leaves skidmarks on the ground as {GPPHe(i.Target)} is being pulled up <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> booty.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> clenches <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head between {GPPHis(i.Unit)} asscheeks and pulls {GPPHim(i.Target)} in.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sits on <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> face, letting the lucky prey feel {GPPHis(i.Unit)} plump booty before quickly pulling them inside.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> smooshes <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> face under {GPPHis(i.Unit)} rump, grinding indulgently and working {GPPHim(i.Target)} into {GPPHis(i.Unit)} anus among muffled protests, before getting up and stretching {GPPHis(i.Unit)} butt in the air, letting gravity do the rest.",
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> is pulled screaming and thrashing into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> behind!",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lies on the ground while {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "apathetically", "idly", "half-heartedly")} watching <b>{i.Target.Name}</b> disappear up {GPPHis(i.Unit)} ass.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> knocks <b>{i.Target.Name}</b> onto the ground and swiftly {GetRandomStringFrom("slides","slips","shoves","forces","squeezes","pushes")} the terrified prey’s lower body up {GPPHis(i.Unit)} ass. After a few contractions, {i.Unit.Name} leans over, caressing their now enormous belly.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("slides","slips","shoves","forces","squeezes","pushes","pulls")} <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.anal)}!",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> backs up into <b>{i.Target.Name}</b> until {GPPHe(i.Target)} trip{SIfSingular(i.Target)}, dooming {GPPHim(i.Target)} to getting face-first engulfed in ass.",
            priority: 8),
            new EventString((i) => $"Once <b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} immobilized, {GPPHe(i.Target)} can only watch in fear as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {(ActorTail(i) ? GetRandomStringFrom("tailhole","anus","rectum","sphincter","rear-entrance","backdoor") : GetRandomStringFrom("asshole","anus","rectum","sphincter","rear-entrance","backdoor"))} slurps up {GPPHis(i.Target)} body like a noodle",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> baits a sneak attack from <b>{i.Target.Name}</b>, only to let {GPPHim(i.Target)} collide with {GPPHis(i.Unit)} gaping {(ActorTail(i) ? GetRandomStringFrom("tailhole","anus","rectum","sphincter","rear-entrance","backdoor") : GetRandomStringFrom("asshole","anus","rectum","sphincter","rear-entrance","backdoor"))}, which consumes {GPPHim(i.Target)} in a series of powerful anal clenches.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sits down on the shrunken <b>{i.Target.Name}</b> and grinds {GPPHis(i.Unit)} butt on the ground. After {GPPHe(i.Unit)} stand{SIfSingular(i.Unit)} up, <b>{i.Target.Name}</b> is nowhere to be seen.",
            priority: 10, conditional: Shrunk),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sits down on the shrunken <b>{i.Target.Name}</b> and clenches {GPPHis(i.Unit)} ass hard. After {GPPHe(i.Unit)} stand{SIfSingular(i.Unit)} up, <b>{i.Target.Name}</b> is nowhere to be seen.",
            priority: 10, conditional: Shrunk),
            new EventString((i) => $"<b>{i.Unit.Name}</b> unceremoniously turns around and thwumps down on the shrunken <b>{i.Target.Name}</b>, making {GPPHim(i.Target)} slip up into {GPPHis(i.Unit)} anal depths.",
            priority: 10, conditional: Shrunk),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs the shrunken <b>{i.Target.Name}</b> and brings {GPPHim(i.Target)} to {GPPHis(i.Unit)} ass. Using {(ActorHumanoid(i) ? "a finger" : GPPHis(i.Unit)+" tongue")}, {GPPHe(i.Unit)} shove{SIfSingular(i.Unit)} the struggling {GetRaceDescSingl(i.Target)} inside.",
            priority: 10, conditional: Shrunk),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs the shrunken <b>{i.Target.Name}</b> and brings {GPPHim(i.Target)} to {GPPHis(i.Unit)} ass, shoving {GPPHim(i.Target)} halfway inside {GPPHis(i.Unit)} hole. Using {(ActorHumanoid(i) ? "a finger" : GPPHis(i.Unit)+" tongue")}, {GPPHe(i.Unit)} shove{SIfSingular(i.Unit)} the struggling {GetRaceDescSingl(i.Target)} inside completely.",
            priority: 10, conditional: Shrunk),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {(ActorHumanoid(i) ? "reaches" : "leans")} down and grabs the shrunken <b>{i.Target.Name}</b> and holds {GPPHim(i.Target)} in front of {GPPHis(i.Unit)} ass. <b>{i.Unit.Name}</b> lets the 'lucky' {GetRaceDescSingl(i.Target)} get a nice long view of {GPPHis(i.Unit)} assets before shoving {GPPHim(i.Target)} into {GPPHis(i.Unit)} hole.",
            priority: 10, conditional: Shrunk),
            new EventString((i) => $"<b>{i.Target.Name}</b> looks up at <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pucker in awe, realizing {GPPHe(i.Target)} want{SIfSingular(i.Target)} to slip up that hole so bad – which makes {GPPHim(i.Target)} rather cooperative when the butt thwumps down.", priority: 10,
            conditional: s=> Cursed(s) && Shrunk(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> sits down on <b>{i.Target.Name}</b> and grinds {GPPHis(i.Unit)} butt on the ground. After {GPPHe(i.Unit)} stand{SIfSingular(i.Unit)} up, <b>{i.Target.Name}</b> is nowhere to be seen.",
            priority: 9, conditional: s => SizeDiff(s, 3)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sits down on the comparatively tiny <b>{i.Target.Name}</b> and clenches {GPPHis(i.Unit)} ass hard. After {GPPHe(i.Unit)} stand{SIfSingular(i.Unit)} up, <b>{i.Target.Name}</b> is nowhere to be seen.",
            priority: 9, conditional: s => SizeDiff(s , 3)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> unceremoniously turns around and thwumps down on the miniscule <b>{i.Target.Name}</b>, making {GPPHim(i.Target)} slip up into {GPPHis(i.Unit)} anal depths.",
            priority: 9, conditional: s => SizeDiff(s , 3)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs little <b>{i.Target.Name}</b> and brings {GPPHim(i.Target)} to {GPPHis(i.Unit)} ass. Using {(ActorHumanoid(i) ? "a finger" : GPPHis(i.Unit)+" tongue")}, {GPPHe(i.Unit)} shove{SIfSingular(i.Unit)} the struggling {GetRaceDescSingl(i.Target)} inside.",
            priority: 9, conditional: s => SizeDiff(s , 3)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs the bite-sized <b>{i.Target.Name}</b> and brings {GPPHim(i.Target)} to {GPPHis(i.Unit)} ass, shoving {GPPHim(i.Target)} halfway inside {GPPHis(i.Unit)} hole. Using {(ActorHumanoid(i) ? "a finger" : GPPHis(i.Unit)+" tongue")}, {GPPHe(i.Unit)} shove{SIfSingular(i.Unit)} the struggling {GetRaceDescSingl(i.Target)} inside completely.",
            priority: 9, conditional: s => SizeDiff(s , 3)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {(ActorHumanoid(i) ? "reaches" : "leans")} down to grab <b>{i.Target.Name}</b> and holds {GPPHim(i.Target)} in front of {GPPHis(i.Unit)} ass. <b>{i.Unit.Name}</b> lets the 'lucky' {GetRaceDescSingl(i.Target)} get a nice long view of {GPPHis(i.Unit)} assets before shoving {GPPHim(i.Target)} into {GPPHis(i.Unit)} hole.",
            priority: 9, conditional: s => SizeDiff(s , 3)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> only tries to immobilize the smaller <b>{i.Target.Name}</b> by sitting on {GPPHim(i.Target)}, but {GPPHe(i.Target)} end{SIfSingular(i.Target)} up deep inside {GPPHis(i.Unit)} ass.",
            priority: 9, conditional: s => SizeDiff(s , 3)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> knocks over <b>{i.Target.Name}</b> and plants {GPPHis(i.Unit)} rump right on {GPPHis(i.Target)} face to let loose a blast of vile farts, numbing {GPPHis(i.Target)} senses. <b>{i.Target.Name}</b> barely has a grip on what's happening as {GPPHe(i.Target)} vanish{EsIfSingular(i.Target)} up the gassy tailhole.",
            priority: 9, conditional: s => Farts(s) && SizeDiff(s, 3)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> plants {GPPHis(i.Unit)} rump on <b>{i.Target.Name}</b> and rubs {GPPHis(i.Unit)} filthy tailhole all over their comparatively tiny body. In the heat of the moment, the {GetRaceDescSingl(i.Unit)} lets lose all of {GPPHis(i.Unit)} flatulence upon <b>{i.Target.Name}</b>. When {GPPHe(i.Unit)} get{SIfSingular(i.Unit)} back up, {GPPHis(i.Unit)} thinks the little {GetRaceDescSingl(i.Target)} got vaporized by {GPPHis(i.Unit)} farts, until {GPPHe(i.Unit)} feel{SIfSingular(i.Unit)} a squirm inside {GPPHis(i.Unit)} ass.",
            priority: 9, conditional: s => Farts(s) && Scat(s) && SizeDiff(s, 3)),

            //New AV w/ dialog by Flame
            new EventString((i) => $"\"Get nice and acquainted with {GetRandomStringFrom("my","that","this")} {GetRandomStringFrom("beautiful","wonderful","perfect","sexy","tasty","delicious")} {GetRandomStringFrom("ass","asshole","butt","butthole","booty","bum","rear-end","backdoor","backside","tush")}, {GetRandomStringFrom("nerd","bitch","slut","fool","tasty","snack","buttsnack","buttfood","assfood","ass-snack","buttfat","assfat")}.\" <b>{i.Unit.Name}</b> says with a sneer as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head {GetRandomStringFrom("slips","slides","pops","squeezes","is forced")} into the {InfoPanel.RaceSingular(i.Unit)}'s {GetRandomStringFrom("asshole","anus","rectum","sphincter","rear-entrance","backdoor")}, the first step on the long and winding journey towards {GPPHis(i.Unit)} {PreyLocStrings.AcidicDeadlySyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. \"You'll be {GetRandomStringFrom("squeezing","slipping","sliding","pushing","coming")} outta there again soon enough, right after I turn you into {PreyLocStrings.ScatSyn()}~\"",
            priority: 8, conditional: s => ActorHumanoid(s) && Scat(s)),
            new EventString((i) => $"\"Get nice and acquainted with {GetRandomStringFrom("my","that","this")} {GetRandomStringFrom("beautiful","wonderful","perfect","sexy","tasty","delicious")} {GetRandomStringFrom("ass","asshole","butt","butthole","booty","bum","rear-end","backdoor","backside","tush")}, {GetRandomStringFrom("nerd","bitch","slut","fool","tasty","snack","buttsnack","buttfood","assfood","ass-snack","buttfat","assfat")}.\" <b>{i.Unit.Name}</b> says with a sneer as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head {GetRandomStringFrom("slips","slides","pops","squeezes","is forced")} into the {InfoPanel.RaceSingular(i.Unit)}'s {GetRandomStringFrom("asshole","anus","rectum","sphincter","rear-entrance","backdoor")}, the first step on the long and winding journey towards {GPPHis(i.Unit)} {PreyLocStrings.AcidicDeadlySyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}. \"{GetRandomStringFrom("Oh yeaahh~ You fill me up just right.","Mmm, that's it~ I love taking my prey in this way.","Ooh, keep screaming like that! It tingles~","Mm... Not quite filling enough.  Let's see if I can find you a roommate~")}\"",
            priority: 8, conditional: s => ActorHumanoid(s)),
            new EventString((i) => $"\"Get-- <i>*{GetRandomStringFrom("mmm!","mmf!","nn!","nnf!","ah","oof","ooh","fuck!","shit!","yeah!")}*</i>  -in-- <i>*{GetRandomStringFrom("mmm!","mmf!","nn!","nnf!","ah","oof","ooh","fuck!","shit!","yeah!")}*</i>  -there!  You {GetRandomStringFrom("stupid","dumb","weak","useless","waste of a","sorry excuse of a")} {InfoPanel.RaceSingular(i.Target)}!\" <b>{i.Unit.Name}</b> demanded of {GPPHis(i.Unit)} struggling prey in between heavy breaths as the last of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {(TargetHumanoid(i) ? "legs" : "body")} is {GetRandomStringFrom("slurped","sucked")} up by {GPPHis(i.Unit)} {GetRandomStringFrom("strong","powerful","capable","hungry","greedy")} {GetRandomStringFrom("ass","asshole","butt","butthole","booty","bum","rear-end","backdoor","backside","tush","bowels","intestines")}. {Capitalize(GPPHe(i.Unit))} {GetRandomStringFrom("sighs","huffs","exhales","breathes")} {GetRandomStringFrom("in relief","in contentment","happily","pleasantly","cutely")} when it's finally over. \"Ahh~ There we go, all tucked away like the {GetRandomStringFrom("gutslut","buttslut","meal","treat","snack","buttsnack","buttfood","assfood","ass-snack")} you were always meant to be.\"",
            priority: 8, conditional: s => ActorHumanoid(s)),
            new EventString((i) => $"\"Don't be {GetRandomStringFrom("afraid","scared","nervous")}, <b>{i.Target.Name}</b>, just {GetRandomStringFrom("slide","slip","squeeze","slither")} on into your new home.\" Says <b>{i.Unit.Name}</b> with {GPPHis(i.Unit)} legs spread wide, watching {GetRandomStringFrom("with glee","with amusement","casually","idly","with a cocky grin")} as {GPPHis(i.Unit)} {GetRandomStringFrom("ass","asshole","butt","butthole","booty","bum","rear-end","backdoor","backside","tush")} makes an easy meal out of the {InfoPanel.RaceSingular(i.Target)}.  As the last of <b>{i.Target.Name}</b> disappears {GetRandomStringFrom("into","inside of","within")} the {GetRandomStringFrom("predatory","gluttonous","hungry","domineering","victorious")} {InfoPanel.RaceSingular(i.Unit)}, {GPPHe(i.Unit)} lets out a{GetRandomStringFrom(" satisfied"," gratified"," contented"," happy","n elated","n appeased"," pleased"," fulfilled"," proud"," serene")} {GetRandomStringFrom("sigh","huff","breath")}. \"{GetRandomStringFrom("Fuck", "Mmm", "Mmm fuck", "Ahh", "Mmmffyeah", "Mmm yeah", "Mmmf", "Mmmyeah")}{GetRandomStringFrom("~","...","!")} Right where you belong, my {GetRandomStringFrom("little","precious","tasty","cute","squirming","wiggly","perfectly sized")} {GetRandomStringFrom("gutslut","buttslut","meal","treat","snack","buttsnack","ass-snack","buttfood","assfood")}{GetRandomStringFrom("~","...","!")} Get {GetRandomStringFrom("comfy","cozy","comfortable")}, now{GetRandomStringFrom("~","...","!")}\"",
            priority: 8, conditional: s => ActorHumanoid(s)),
            new EventString((i) => $"\"{GetRandomStringFrom("Fuck","Fuuuck","Mmm","Mmm fuck","Ahh","Mmmffyeah","Mmm yeah","Mmmf","Mmmyeah","Nnf","Hnn","Ooh","Ohh")}{GetRandomStringFrom("~","...","!")}  That's it, my {GetRandomStringFrom("little","precious","tasty","cute","squirming","wiggly","perfectly sized")} {GetRandomStringFrom("gutslut","buttslut","meal","treat","snack","buttsnack","ass-snack","buttfood","assfood")}{GetRandomStringFrom("~","...","!")} Squirm away under my {(ActorDick(i) ? GetRandomStringFrom("cock","dick","wang","shaft","balls","nuts","nutsack","testicles") : GetRandomStringFrom("pussy","slit","muff","cunt","cooch","snatch","vagina","twat","love tunnel","honeypot","minge","love box","vadge","yoni"))} while my {GetRandomStringFrom("strong","powerful","capable","hungry","greedy","wonderful","perfect")} {GetRandomStringFrom("ass","asshole","anus","butt","butthole","booty","bum","rear-end","backdoor","backside","tush","derriere","rectum")} {GetRandomStringFrom("slurps you up","sucks you in","gobbles you up","eats you up","swallows you up","tucks you away","pulls you in","squeezes you in","devours you")}{GetRandomStringFrom("~","...","!")}\" <b>{i.Unit.Name}</b> {GetRandomStringFrom("cries","calls","exclaims")} {GetRandomStringFrom("to the heavens","heavensward","to the sky","skyward")} in {GetRandomStringFrom("sheer","absolute","extreme","utter","pure")} {GetRandomStringFrom("bliss","pleasure","elation","ecstacy","delight","rapture","joy","euphoria","satisfaction","thrill")} as more and more of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> struggling {GetRandomStringFrom("form","body")} {GetRandomStringFrom("disappears","slips","slides","squeezes","slithers","is pulled","is yanked","is forced")} {GetRandomStringFrom("inside","into","within")} {GPPHis(i.Unit)} {GetRandomStringFrom("strong","powerful","capable","hungry","greedy")} {GetRandomStringFrom("ass","asshole","anus","butt","butthole","booty","bum","rear-end","backdoor","backside","tush","derriere","rectum")}.",
            priority: 8, conditional: s => ActorHumanoid(s) && Lewd(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> squats over <b>{i.Target.Name}</b> and stuffs {GPPHim(i.Target)} into {GPPHis(i.Unit)} ass. <b>{i.Target.Name}</b> takes notice on how stretchy and easy to slide through it is.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"\"Wanna go out the same way you went in?\"- asks <b>{i.Unit.Name}</b> {GPPHis(i.Unit)} prey smugly. <b>{i.Target.Name}</b> shrugs and dives up. if <b>{i.Unit.Name}</b> wants it, so be it.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"Not the one to reject free lodging, <b>{i.Target.Name}</b> climbs up <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> ass with vigor, prompting gasps of pleasure from his predator.",priority:25, conditional: s => HasGreatEscape(s) && Cursed(s)),

            //Endo
            new EventString((i) => $"<b>{i.Target.Name}</b> blushes when <b>{i.Unit.Name}</b> turns aroud and sends {GPPHim(i.Target)} sliding up {GPPHis(i.Unit)} rectum.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> ass gently engulfs {GPPHis(i.Unit)} ally. For <b>{i.Target.Name}</b>, the noise of the battlefield is replaced with gently sloshing and groaning, as well as an all-encompassing heartbeat.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"After a moment of nervous hesitation, <b>{i.Target.Name}</b> comfortably slips into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> anal folds.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} thoroughly played with by <b>{i.Unit.Name}</b>, {GPPHis(i.Target)} ally, before being packed away into the safety of {GPPHis(i.Unit)} colon.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> squirms and thrashes about, trying to free {GPPHimself(i.Target)} from the grasp of {GPPHis(i.Target)} vicious predator... and then {( Lewd(i) ? "moans in delight" : "giggles")} as the last of {GPPHim(i.Target)} slides past the sphincter.\n<b>{i.Unit.Name}</b> appreciates the act and caresses {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> has to reassure <b>{i.Target.Name}</b> that it's safe, before the latter finally dives head first up {GPPHis(i.Unit)} {GetRandomStringFrom("ass", "asshole", "tailhole", "butt", "butthole", "rear entrance", "backdoor")}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),

            //Feral Lions
            new EventString((i) => $"<b>{i.Unit.Name}</b> grab{SIfSingular(i.Unit)} <b>{i.Target.Name}</b> and stick{SIfSingular(i.Unit)} {GPPHis(i.Target)} {(TargetHumanoid(i) ? "legs" : "hind legs")} into his anus, leaving {GPPHim(i.Target)} to dangle against the {GetRaceDescSingl(i.Unit)}'s genitals, while the quicksand trap that is {GPPHis(i.Unit)} asshole slowly pulls {GPPHim(i.Target)} into {GPPHis(i.Target)} smelly doom.",
            conditional: s => SizeDiff(s, 3), actorRace: Race.FeralLions, priority: 9),

            //Abakhanskya
            new EventString((i) => $"<b>{i.Target.Name}</b> screams out in horror as <b>{i.Unit.Name}</b> plucks {GPPHim(i.Target)} up and sticks {GPPHim(i.Target)} up her {GetRandomStringFrom("ass", "asshole", "tailhole", "butt", "butthole", "rear entrance", "backdoor")}. ",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> wraps her tail around <b>{i.Target.Name}</b> and sits. Like a magic trick, {GPPHe(i.Target)} is gone once she stands.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"Stunned by the pheromonal air around <b>{i.Unit.Name}</b>, <b>{i.Target.Name}</b> is helpless as the dragoness simply takes {GPPHim(i.Target)} in directly up her {GetRandomStringFrom("ass", "asshole", "tailhole", "butt", "butthole", "rear entrance", "backdoor")}.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> finds themselves entering <b>{i.Unit.Name}</b> up through her arse and contemplates the choices that lead {GPPHim(i.Target)} to being here.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> screams and writhes before {GPPHis(i.Target)} face disappears between <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> mountain-sized ass cheeks.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"Reaching for the ground to try and pull themselves free, <b>{i.Target.Name}</b> unfortunately finds no success as <b>{i.Unit.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} tucks {GPPHim(i.Target)} up her ass using only her thick tail.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"Abakhanskya {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} pumps <b>{i.Target.Name}</b> up her backside while she continues to fight the battle.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> is squeezed expertly between <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> cattle-sized ass cheeks before disappearing up her {GetRandomStringFrom("ass", "asshole", "tailhole", "butt", "butthole", "rear entrance", "backdoor")} with a wet slurp.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"The cry of terror from <b>{i.Target.Name}</b> is obliterated by the slapping of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> ass meat quickly working them inside.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"Somehow, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> grin grows even longer as <b>{i.Target.Name}</b> really squirms as they're taken into that gut via her {GetRandomStringFrom("ass", "asshole", "tailhole", "butt", "butthole", "rear entrance", "backdoor")}.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> squirms and screams for help from their soldiers as <b>{i.Unit.Name}</b> engulfs them whole, disappearing up her {GetRandomStringFrom("ass", "asshole", "tailhole", "butt", "butthole", "rear entrance", "backdoor")}.",
            actorRace: Race.Abakhanskya, priority: 11),
        };

        UnbirthMessages = new List<EventString>()
        {
            new EventString((i) =>$"<b>{i.Target.Name}</b> lets out a distressed yelp as {GPPHeIs(i.Target)} shoved headfirst into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> vagina!", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> casts aside {GPPHis(i.Unit)} weapon and grabs onto <b>{i.Target.Name}</b>, stuffing {GPPHim(i.Target)} into {GPPHis(i.Unit)} womb!", priority: 8, conditional: (s) => s.Unit.HasWeapon && s.Unit.FixedGear == false && ActorHumanoid(s)),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> swiftly jumps on <b>{i.Target.Name}</b>, {GPPHis(i.Target)} form engulfed by <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> pussy!", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> shoves <b>{i.Target.Name}</b> onto the ground and shoves {GPPHim(i.Target)} legfirst into {GPPHis(i.Unit)} vulva!", priority: 8),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> overpowers <b>{i.Target.Name}</b> and swiftly shoves {GPPHim(i.Target)} into {GPPHis(i.Unit)} womb!", priority: 8),
            new EventString((i) =>$"In the heat of {GPPHis(i.Unit)} needs, <b>{i.Unit.Name}</b> desides to use <b>{i.Target.Name}</b> as a living dildo – Unfortunately, {GPPHis(i.Unit)} toys have a tendency to disappear.", priority: 8, conditional: Lewd),

            //Shrunken Prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> unceremoniously turns around and thwumps down on the shrunken <b>{i.Target.Name}</b>, making {GPPHim(i.Target)} slip up into {GPPHis(i.Unit)} wet folds.",
            priority: 9, conditional: Shrunk),
            
            //Size difference in general
            new EventString((i) => $"Effortlessly, <b>{i.Target.Name}</b> is trapped in the comparatively huge slobbery maw of <b>{i.Unit.Name}</b>. The next time light touches {GPPHis(i.Target)} body, it's only for {GPPHis(i.Unit)} massive tongue to squish {GPPHim(i.Target)} against {GPPHis(i.Unit)} aroused slit, repeatedly dragging {GPPHim(i.Target)} across its length, before {GPPHe(i.Target)} slip{SIfSingular(i.Target)} in with a <i>~shlup~</i>.",
            priority: 9, conditional: s => SizeDiff(s , 4) && !ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> only tries to immobilize the smaller <b>{i.Target.Name}</b> by sitting on {GPPHim(i.Target)}, but {GPPHe(i.Target)} end{SIfSingular(i.Target)} up deep inside {GPPHis(i.Unit)} pussy.",
            priority: 9, conditional: s => SizeDiff(s , 3)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> unceremoniously turns around and thwumps down on the much smaller <b>{i.Target.Name}</b>, making {GPPHim(i.Target)} slip up into {GPPHis(i.Unit)} wet folds.",
            priority: 9, conditional: s => SizeDiff(s , 3)),
            
            //Cierihaka
            new EventString((i) => $"Feeling lewd, and dominant, <b>{i.Unit.Name}</b> looks over a helpless <b>{i.Target.Name}</b>. It wasn't long until {GPPHeIsAbbr(i.Target)} grappled by the dragoness, and shoved in headfirst through her slit, <b>{i.Unit.Name}</b> cooing softly throughout.", actorRace: Race.Cierihaka, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b>, wishing to play with her food, spins herself about on the spot, grabbing her prey with her tail and sending <b>{i.Target.Name}</b> on a trip to her womb, for {GPPHis(i.Target)} demise.", actorRace: Race.Cierihaka, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> feels an erotic itch needing to be scratched, and with <b>{i.Target.Name}</b> in front of her, it wasn't long until {GPPHeIsAbbr(i.Target)} used to scratch it. Up and through her slit {GPPHe(i.Target)} went, legs first!", actorRace: Race.Cierihaka, priority: 10),
            new EventString((i) => $"After having sensed she had gained the advantage, <b>{i.Unit.Name}</b> seals <b>{i.Target.Name}</b> away lewdly, taking {GPPHim(i.Target)} in head first into her womb, gasping in delight as {GPPHe(i.Target)} passed through her slit.", actorRace: Race.Cierihaka, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> stands perfectly still for a moment, menacingly overlooking her fearful prey. Quickly feigning an incoming swallow, she instead rotates to show her rump and sits down upon <b>{i.Target.Name}</b>, causing {GPPHim(i.Target)} to pass straight in to her womb.", actorRace: Race.Cierihaka, priority: 10),
            
            //Slime Pred
            new EventString((i) => $"<b>{i.Unit.Name}</b> launches {GPPHimself(i.Unit)} at <b>{i.Target.Name}</b>, engulfing {GPPHim(i.Target)} in {GPPHis(i.Unit)} womb!", actorRace: Race.Slimes, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> cascades over <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body, sucking {GPPHim(i.Target)} into {GPPHis(i.Unit)} womb!", actorRace: Race.Slimes, priority: 10),
            
            //Slime Prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> reaches for <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> core, shoving it into {GPPHis(i.Unit)} vulva!", targetRace: Race.Slimes, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> viscous form and slurps {GPPHim(i.Target)} into {GPPHis(i.Unit)} pussy!", targetRace: Race.Slimes, priority: 9),

            new EventString((i) => $"<b>{i.Unit.Name}</b> stuffs <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} pussy.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Unit.Name}</b> shoves <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} pussy and goes back to battle, unbothered by cries of protest from within.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"After a short struggle <b>{i.Unit.Name}</b> is now sporting a fat belly, {GPPHis(i.Unit)} womb full of surprisingly stubborn <b>{i.Target.Name}</b>. \"Some people just refuse to admit they lost\" - sighs <b>{i.Unit.Name}</b>.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"\" Want to be my baby for a while?\" - smugly asks <b>{i.Unit.Name}</b> her half-unbirthed quarry. \"Sure, for a while\" - equally smugly answers <b>{i.Target.Name}</b>.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"You'd think the prospect of being melted into cum would shaken <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> spirit, but {GetRaceDescSingl(i.Target)} is surprisingly calm, already calculating {GPPHis(i.Target)} escape.",priority:25, conditional: HasGreatEscape),

            //Endo
            new EventString((i) => $"<b>{i.Target.Name}</b> blushes when <b>{i.Unit.Name}</b> humps {GPPHim(i.Target)} and sends {GPPHim(i.Target)} sliding up {GPPHis(i.Unit)} pussy.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> slit gently engulfs {GPPHis(i.Unit)} ally. For <b>{i.Target.Name}</b>, the noise of the battlefield is replaced with gently sloshing and throbbing, as well as an all-encompassing heartbeat.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"After a moment of nervous hesitation, <b>{i.Target.Name}</b> comfortably slips into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> wet folds.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} thoroughly played with by <b>{i.Unit.Name}</b>, {GPPHis(i.Target)} ally, before being packed away into the safety of {GPPHis(i.Unit)} womb.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> squirms and thrashes about, trying to free {GPPHimself(i.Target)} from the grasp of {GPPHis(i.Target)} vicious predator... and then {( Lewd(i) ? "moans in delight" : "giggles")} as the last of {GPPHim(i.Target)} slide{SIfSingular(i.Target)} past the nether lips.\n<b>{i.Unit.Name}</b> appreciates the act and caresses {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> has to reassure <b>{i.Target.Name}</b> that it's safe, before the latter finally dives head first up {GPPHis(i.Unit)} cunt.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs the shrunken <b>{i.Target.Name}</b> and brings {GPPHim(i.Target)} to {GPPHis(i.Unit)} pussy, shoving {GPPHim(i.Target)} halfway inside {GPPHis(i.Unit)} hole. \"Relax, it's me, {i.Unit.Name},\" {GPPHe(i.Unit)} reassures {GPPHim(i.Target)}. <b>{i.Target.Name}</b> relaxes as {GPPHis(i.Target)} comrade pushes {GPPHim(i.Target)} inside {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} completely.",
            priority: 13, conditional: s => Friendly(s) && Endo(s) && Shrunk(s)),
        };

        TailVoreMessages = new List<EventString>()
        {
            new EventString((i) => $"<b>{i.Unit.Name}</b> catches <b>{i.Target.Name}</b> off guard and crams {GPPHim(i.Target)} down {GPPHis(i.Unit)} tail.", priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slurps up <b>{i.Target.Name}</b> with {GPPHis(i.Unit)} tail!", priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> yanks <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} hungry tail maw.", priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> struggles are for naught as {GPPHe(i.Target)} vanishe{SIfSingular(i.Target)} into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> ravenous tail.", priority: 8),

            new EventString((i) => $"<b>{i.Unit.Name}</b> blows <b>{i.Target.Name}</b> a kiss before sliding the tip of {GPPHis(i.Unit)} tail over <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head and slurping the {GetPreyDesc(i.Target)} {GetRaceDescSingl(i.Target)} up!", actorRace: Race.Succubi, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> distracts <b>{i.Target.Name}</b> with a tight sensual hug, just enough for {GPPHis(i.Unit)} to suck <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} tail!", actorRace: Race.Succubi, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> flutters over <b>{i.Target.Name}</b> and causally drops {GPPHis(i.Unit)} tail down far enough to vaccum <b>{i.Target.Name}</b> into the hungry opening.", actorRace: Race.Succubi, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} stunned with steamy thoughts when <b>{i.Unit.Name}</b> blows {GPPHim(i.Target)} a sensuous kiss; long enough for <b>{i.Unit.Name}</b> to plunge {GPPHim(i.Target)} into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> hungry tail.", actorRace: Race.Succubi, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> flashes {GPPHis(i.Unit)} {(i.Unit.HasDick ? "dick" : "breasts")} at <b>{i.Target.Name}</b>, distracting {GPPHim(i.Target)} long enough to swallow the {GetPreyDesc(i.Target)} {GetRaceDescSingl(i.Target)} feet first with {GPPHis(i.Unit)} tail.", actorRace: Race.Succubi, priority: 9, conditional: s => Lewd(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> seizes <b>{i.Target.Name}</b> in a tight hug, grinding {GPPHis(i.Unit)} {(i.Unit.HasDick ? "dick" : "breasts")} against <b>{i.Target.Name}</b> before pulling <b>{i.Target.Name}</b> down into the awaiting tail maw.", actorRace: Race.Succubi, priority: 9, conditional: s => Lewd(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slams {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.anal)} down on <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> face, smothering <b>{i.Target.Name}</b> while {GPPHe(i.Unit)} devour{SIfSingular(i.Unit)} with <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail maw.", actorRace: Race.Succubi, priority: 9, conditional: s => Lewd(s) && TargetHumanoid(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> coils {GPPHimself(i.Unit)} around <b>{i.Target.Name}</b>, feeding {GPPHim(i.Unit)} into the greedy hungry tail mouth!", actorRace: Race.Vipers, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail lashes out with a loud crack and <b>{i.Target.Name}</b> promptly finds {GPPHimself(i.Target)} slithering into its long hot slimy depths.", actorRace: Race.Vipers, priority: 9),

            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{i.Target.Name}</b> and stuffs {GPPHim(i.Target)} down into an awaiting {PreyLocStrings.ToSyn(PreyLocation.womb)}. <b>{i.Target.Name}</b> quickly slides down it, not into a womb but into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> voracious tail stomach.", actorRace: Race.Lamia, priority: 9, conditional: s => Lewd(s) && s.Unit.GetGender() == Gender.Female),
            new EventString((i) => $"<b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} trapped in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> crushing tail coils and the {GetPreyDesc(i.Target)} {GetRaceDescSingl(i.Target)} is devoured by the hungry tail maw.", actorRace: Race.Lamia, priority: 9),
            new EventString((i) => $"With a loud thud, <b>{i.Target.Name}</b> is knocked over by <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> lashing tail then reeled into its greedy tail maw!", actorRace: Race.Lamia, priority: 9),

            new EventString((i) => $"<b>{i.Unit.Name}</b> latches {GPPHis(i.Unit)} stinger into <b>{i.Target.Name}</b> and uses it like a straw to drink the {GetPreyDesc(i.Target)} {GetRaceDescSingl(i.Target)} down!", actorRace: Race.Bees, targetRace: Race.Slimes, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail tip expands wide, engulfing <b>{i.Target.Name}</b> and trapping {GPPHim(i.Target)} in <b>{i.Unit.Name}</b> honey filled abdomen!", actorRace: Race.Bees, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lunges {GPPHim(i.Unit)} stinger rapidly, jabbing it into <b>{i.Target.Name}</b>. While <b>{i.Target.Name}</b> reels from the pain, the stinger widens to a huge cone and {PreyLocStrings.GetOralVoreVPT()} {GPPHim(i.Target)}!", actorRace: Race.Bees, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> stings <b>{i.Target.Name}</b> and it swiftly swells wide enough to swallow up <b>{i.Target.Name}</b> whole!", actorRace: Race.Bees, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> throws {GPPHimself(i.Unit)} butt first at <b>{i.Target.Name}</b> with an armed tail stinger that wraps around <b>{i.Target.Name}</b> and swallows {GPPHim(i.Target)} upon impact!", actorRace: Race.Bees, priority: 9),

            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> world goes dark as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> rapacious tail descends on <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head, engulfing {GPPHim(i.Target)} completely.", priority: 9, conditional:TargetHumanoid),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail tip expands around <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> legs and reels {GPPHim(i.Target)} down greedily.", priority: 9, conditional:TargetHumanoid),
            new EventString((i) => $"<b>{i.Unit.Name}</b> pushes <b>{i.Target.Name}</b> over and snickers as {GPPHis(i.Unit)} tail consumes {GPPHis(i.Unit)} prey.", priority: 9, conditional:TargetHumanoid),

            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> struggling form is seen through <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> crop as they slide down into terror bird's waiting stomach", actorRace: Race.Terrorbird, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is struggling to swallow <b>{i.Target.Name}</b> in a single bite, and so waits until {GetPreyDesc(i.Target)} {GetRaceDescSingl(i.Target)} tires themselves out", actorRace: Race.Terrorbird, priority: 10),
            new EventString((i) => $"A brief scream sounds through the battlefield and the only reminder of <b>{i.Target.Name}</b> ever being there is <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> bulging crop", actorRace: Race.Terrorbird, priority: 10),
            new EventString((i) => $"Every time <b>{i.Unit.Name}</b> opens their mouth, anyone can see <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> terrified face, still struggling to get out of terror bird's esophagus", actorRace: Race.Terrorbird, priority: 10),

            new EventString((i) => $"<b>{i.Unit.Name}</b> stuffs <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)}.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Target.Name}</b> worries surprisingly little about being shoved into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)}.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)} welcomes another guest, this one livelier than the most.",priority:25, conditional: HasGreatEscape),

            
            //Endo
            new EventString((i) => $"<b>{i.Target.Name}</b> blushes when <b>{i.Unit.Name}</b> embraces {GPPHim(i.Target)} and sends {GPPHim(i.Target)} sliding into {GPPHis(i.Unit)} tail.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail slit gently engulfs {GPPHis(i.Unit)} ally. For <b>{i.Target.Name}</b>, the noise of the battlefield is replaced with gently sloshing and throbbing, as well as an all-encompassing heartbeat.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"After a moment of nervous hesitation, <b>{i.Target.Name}</b> comfortably slips into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail folds.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> finds {GPPHimself(i.Target)} thoroughly played with by <b>{i.Unit.Name}</b>, {GPPHis(i.Target)} ally, before being packed away into the safety of {GPPHis(i.Unit)} tail.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> squirms and thrashes about, trying to free {GPPHimself(i.Target)} from the grasp of {GPPHis(i.Target)} vicious predator... and then {( Lewd(i) ? "moans in delight" : "giggles")} as the last of {GPPHim(i.Target)} vanish{EsIfSingular(i.Target)} into the tail.\n<b>{i.Unit.Name}</b> appreciates the act and caresses {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> has to reassure <b>{i.Target.Name}</b> that it's safe, before the latter finally dives head first into {GPPHis(i.Unit)} tail opening.",
            priority: 12, conditional: s => Friendly(s) && Endo(s)),
    };

        DigestionDeathMessages = new List<EventString>()
        {
            //Generic strings
            new EventString((i) => $"The muffled protests in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} grow silent, replaced with content gurgling. <b>{i.Target.Name}</b> is dead.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} churns, its content finally turning into {i.preyLocation.ToFluid()} for the predator.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} contracts, turning <b>{i.Target.Name}</b> into {i.preyLocation.ToFluid()}.",
            priority: 8),
            new EventString((i) => $"Inside <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}, <b>{i.Target.Name}</b> finally falls silent.",
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} kills off <b>{i.Target.Name}</b>. The remaining sludge bubbles in the pit of {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)}.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> smiles as {GPPHe(i.Unit)} feel{SIfSingular(i.Unit)} {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} burble pleasurably, <b>{i.Target.Name}</b> having slipped under the acidic tides.",
            priority: 8),
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> struggles cease, prompting an agitated, \"Wait, was that it, really?\" from <b>{i.Unit.Name}</b> as {GPPHe(i.Unit)} poke{SIfSingular(i.Unit)} and prods at {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)}.",
            priority: 8),
            new EventString((i) => $"After a final desperate struggle that leaves <b>{i.Unit.Name}</b> sweating, <b>{i.Target.Name}</b> finds all {GPPHis(i.Target)} energy drained and soon succumbs to the convulsions of the victorious {PreyLocStrings.ToSyn(i.preyLocation)}.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sighs. Even though {GPPHe(i.Unit)} just ate a whole warrior, {GPPHe(i.Unit)} know{SIfSingular(i.Unit)} {GPPHe(i.Unit)}’ll just be hungry again ten minutes later.",
            priority: 8),
            new EventString((i) => $"As the digestion process finally finishes, <b>{i.Unit.Name}</b> compliments {GPPHis(i.Unit)} resilient prey for being so hardy.",
            priority: 8),
            new EventString((i) => $"<b>{i.Unit.Name}</b> breathes a sigh of relief as {GPPHis(i.Unit)} violently wobbling {PreyLocStrings.ToSyn(i.preyLocation)} finally stop moving. <b>{i.Target.Name}</b> simply can’t continue the fight and allows nature to take its course.",
            priority: 8),
            new EventString((i) => $"As <b>{i.Target.Name}</b> is converted into a nutritious stew in the pit of {GPPHis(i.Unit)} stomach, <b>{i.Unit.Name}</b> hopes {GPPHe(i.Unit)}’ll still be given rations after the battle.",
            priority: 8, conditional: InStomach),
            //Cum digestion - works, but need to actually bring the whole absorption thing here
            //new EventString((i) => $"BEPIS",
            //priority: 9, conditional: InBalls),
            //Cleaveage Vore strings
            new EventString((i) => $"With a final jiggle, <b>{i.Target.Name}</b> forgets that {GPPHeWas(i.Target)} ever anything other than <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tit fat", "boob fat", "breast fat")}. With this, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> mammary glands start producing milk.",
            priority: 8, conditional: s=> CleaveageVore(s)),
            new EventString((i) => $"With one last wobble, <b>{i.Target.Name}</b> fully accepts {GPPHis(i.Target)} new position in the world. Maybe {GPPHe(i.Target)} still remember{SIfSingular(i.Unit)} things from before, but even if {GPPHe(i.Target)} do{EsIfSingular(i.Unit)}, it doesn't matter. <b>{i.Target.Name}</b> is happy as fat. With this, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> mammary glands start producing milk.",
            priority: 8, conditional: s=> CleaveageVore(s)),
            new EventString((i) => $"With another sway, one theoretically no different from any other, the mind of <b>{i.Target.Name}</b> falls asleep. {GPPHe(i.Target)} struggle{SIfSingular(i.Target)} no more. With this, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> mammary glands start producing milk.",
            priority: 8, conditional: s=> CleaveageVore(s)),
            //Scat strings
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} contracts, sending <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> remains towards {GPPHis(i.Unit)} rectum to be {GetRandomStringFrom("expelled", "shit out", "defecated", "crapped out", "squeezed out", "released")} as {PreyLocStrings.ScatAdjSyn()} {GetRandomStringFrom("shit", "waste", "dung", "scat", "crap", "feces", "manure")}.",
            priority: 9, conditional: s=> Scat(s) && InStomach(s)),
            new EventString((i) => $"Now that <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} finished turning <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body into chyme, {GPPHis(i.Unit)} insides are guaranteed to make {GPPHim(i.Target)} even more disgusting.",
            priority: 9, conditional: s=> Scat(s) && InStomach(s)),
          
            //Burp strings
            new EventString((i) => $"<b>{i.Unit.Name}</b> looses a lewd, wet burp as <b>{i.Target.Name}</b> begins to pump into {GPPHis(i.Unit)} rumbling bowels.",
            priority: 9, conditional: s=> Scat(s) && CanBurp(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out a rolling {GetRandomStringFrom("belch", "burp")}, feeling <b>{i.Target.Name}</b> perish within {GPPHim(i.Unit)} as it's released.",
            priority: 9, conditional: s=> CanBurp(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> wraps {GPPHis(i.Unit)} arms around {GPPHis(i.Unit)} swollen midsection and squeezes hard, causing {GPPHim(i.Unit)} to let out a rolling belch. The burp soon deprives the belly chamber of air, causing <b>{i.Target.Name}</b> to pass out face first into the roaring acids.",
            priority: 9, conditional: s=> HardVore(s) && ActorHumanoid(s) && CanBurp(s) && InStomach(s)),
            new EventString((i) => $"\"Oh, here it comes!\" <b>{i.Unit.Name}</b> says excitedly as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> struggles begin to wane. \"BUUUUUUUAAAAAARRRRRRPPP!\" The massive {GetRandomStringFrom("belch", "burp")} that <b>{i.Unit.Name}</b> released finishes off the {GetRaceDescSingl(i.Target)}, the struggling bumps sinking down as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> belly rounds out.",
            priority: 9, conditional: s => CanBurp(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("belches", "burps")} loudly, as <b>{i.Target.Name}</b> succumbs to {GPPHis(i.Unit)} belly.",
            priority: 9, conditional: s=> CanBurp(s) && InStomach(s)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> {GetRandomStringFrom("belches", "burps")} proudly from finishing off <b>{i.Target.Name}</b>, <b>{AttractedWarrior(i.Unit)}</b> can't help but get turned on by the {GetRaceDescSingl(i.Unit)}'s roar, and starts to plot 'activities' to do with them after the battle.",
            priority: 9, conditional: s=> CanBurp(s) && InStomach(s) && ReqOSWLewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out a mighty {GetRandomStringFrom("belch", "burp")} for all to hear after finishing off their rival leader <b>{i.Target.Name}</b>!",
            priority: 11, conditional: s=> CanBurp(s) && InStomach(s) && ActorLeader(s) && TargetLeader(s)),
            
            //Hard strings
            new EventString((i) => $"With the final contraction, <b>{i.Target.Name}</b> falls apart into a bunch of {i.preyLocation.ToFluid()}.",
            priority: 9, conditional: HardVore),
            new EventString((i) => $"<b>{i.Target.Name}</b> punches the walls of {GPPHis(i.Target)} squishy prison but much to {GPPHis(i.Target)} dismay, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach fights back, filling itself with bubbling acid which swiftly turns the warrior into a goopy mess.",
            priority: 9, conditional: s=> HardVore(s) && InStomach(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach clenches, breaking <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> stance and plunging {GPPHim(i.Target)} into the acids frothing about the bottom of {GPPHis(i.Unit)} belly.",
            priority: 9, conditional: s=> HardVore(s) && InStomach(s)),
            new EventString((i) => $"The ripples and convulsions across <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> gurgling stomach die down as <b>{i.Target.Name}</b> takes a deep breath of acid, leaving a smooth, calm bulge.",
            priority: 9, conditional: s=> HardVore(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> tries to survive by pressing {GPPHimself(i.Target)} against the top stomach walls but {GPPHis(i.Target)} efforts are in vein as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> voracious gut is fully filled with flesh eating acid.",
            priority: 9, conditional: s=> HardVore(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> manages to avoid the deadly stomach acids for a time but <b>{i.Unit.Name}</b>, frustrated with {GPPHis(i.Target)} fighting grabs the side of {GPPHis(i.Unit)} tummy and shakes it violently, splashing the unsuspecting prey with powerful juices.",
            priority: 9, conditional: s=> HardVore(s) && InStomach(s) && ActorHumanoid(s)),
            //Humanoid pred
            new EventString((i) => $"\"Shh, it’s okay. You’re right where you belong,\" <b>{i.Unit.Name}</b> says soothingly while stroking {GPPHis(i.Unit)} belly. <b>{i.Target.Name}</b>, too weak to fight by this point, gives in to the loving words and dies with a final tummy wobble.",
            priority: 9, conditional: ActorHumanoid),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tries to draw out the process of digesting {GPPHis(i.Unit)} wiggling prey a little longer, but {GPPHis(i.Unit)} voracious {i.preyLocation.ToSyn()} overcome{PluralForPart(i.preyLocation)} the living meal before {GPPHe(i.Target)} can stop it.",
            priority: 9, conditional: ActorHumanoid),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grows tired of {GPPHis(i.Unit)} meal’s incessant struggling and decides to stop playing with {GPPHis(i.Unit)} food. <b>{i.Target.Name}</b> doesn’t stand a chance as the well trained {i.preyLocation.ToSyn()} begin{PluralForPart(i.preyLocation)} to convulse and fill with juices as the charade ends.",
            priority: 9, conditional: ActorHumanoid),
            //Friendly prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> can’t stand to look at {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} as it finishes off {GPPHis(i.Unit)} comrade.",
            priority: 9, conditional: s=> Friendly(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> realizes what {GPPHeIsAbbr(i.Unit)} done and tries to expel {GPPHis(i.Unit)} ally but it’s too late, <b>{i.Target.Name}</b> is already thigh fat.",
            priority: 9, conditional: s=> Friendly(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lifts a leg, making {GPPHis(i.Unit)} full belly wobble angrily. {GPPHe(i.Unit)} smile{SIfSingular(i.Unit)} as {GPPHis(i.Unit)} promotion is all but assured with <b>{i.Target.Name}</b> out of the way.",
            priority: 9, conditional: s=> Friendly(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> laughs. With <b>{i.Target.Name}</b> out of the way, everything will become much easier for {GPPHim(i.Unit)}.",
            priority: 9, conditional: s=> Friendly(s) && ActorHumanoid(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> just wanted to try out this endosoma thing with <b>{i.Target.Name}</b>, but as {GPPHe(i.Unit)} feel{SIfSingular(i.Unit)} {GPPHim(i.Target)} melt into gut mush, {GPPHe(i.Unit)} understand{SIfSingular(i.Unit)} that {GPPHis(i.Unit)} body doesn't discriminate between foods based on allegiance.",
            priority: 9, conditional: s=> Friendly(s) && InStomach(s)),
            //vagrant pred
            new EventString((i) => $"The silhouette of <b>{i.Target.Name}</b> inside <b>{i.Unit.Name}</b> loses coherency and dissolves into {i.preyLocation.ToFluid()}.",
            actorRace: Race.Vagrants, priority: 10),
            new EventString((i) => $"<b>{i.Unit.Name}</b> stops wobbling, the prey inside pacified forever.",
            actorRace: Race.Vagrants, priority: 10),
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body flattens, its prey softening into {i.preyLocation.ToFluid()}, it spits out the only thing left of <b>{i.Target.Name}</b> -{GPPHis(i.Target)} clothes.",
            actorRace: Race.Vagrants, priority: 10, conditional: ReqTargetClothingOn),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body flattens, its prey softening into {i.preyLocation.ToFluid()}, nothing remains of <b>{i.Target.Name}</b>.",
            actorRace: Race.Vagrants, priority: 10, conditional: ReqTargetClothingOff),
            //Slime pred
            new EventString((i) => $"The silhouette of <b>{i.Target.Name}</b> inside <b>{i.Unit.Name}</b> loses coherency and dissolves into slime.",
            actorRace: Race.Slimes, priority: 8),
            //Aabayx exclusive creds to Cartography!
            new EventString((i) => $"With one final shudder, <b>{i.Target.Name}</b> looses any structural integrity, dissolving into trillions of new viruses, ready for intigration into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body.",
            actorRace: Race.Aabayx, priority: 9),
            new EventString((i) => $"At this point, <b>{i.Target.Name}</b> is beyond saving. While clumps of the viral matrix that made up {GPPHis(i.Target)} body still cling together, <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> dissasembely has passed a point of no return. {GPPHe(i.Target)} {IsAre(i.Target)} dead.",
            targetRace: Race.Aabayx, actorRace: Race.Aabayx, priority: 10),
            //Deer pred
            new EventString((i) => $"<b>{i.Unit.Name}</b> tries comforting the poor soul trapped within {GPPHis(i.Unit)} burbling tummy. However, as {GPPHe(i.Unit)} soothe{SIfSingular(i.Unit)} <b>{i.Target.Name}</b>, {GPPHis(i.Unit)} dappled midsection contorts, reducing its sobbing resident into a meaty slurry. The {GetRaceDescSingl(i.Unit)} feels a bit guilty as {GPPHe(i.Target)} get{SIfSingular(i.Unit)} added to {GPPHis(i.Unit)} fluffy tush.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"Despite <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> efforts coming to a burbling end, <b>{i.Unit.Name}</b> lets out a groan as {GPPHe(i.Unit)} lift{SIfSingular(i.Unit)} {GPPHis(i.Unit)} sloshy gut and lets it drop. The {GetRaceDescSingl(i.Unit)}'s meal might be dead, but {GPPHis(i.Unit)} intestines are still full of meaty soup. The herbivorous warrior does not relish having to process so much flesh.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"An indigestion riddled burp escapes <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> lips, <b>{i.Target.Name}</b> having succumbed to the plant-eater's organs. However, {GPPHis(i.Unit)} belly is none too happy at digesting so much meat and gurgles angrily.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> places a hand against {GPPHis(i.Unit)} belly and it sinks in a bit, confirming <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> end. A relieved sigh escapes {GPPHis(i.Unit)} lips.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> wiggles {GPPHis(i.Unit)} fluffy short tail as {GPPHe(i.Unit)} feel{SIfSingular(i.Unit)} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> nutrients getting packed onto {GPPHis(i.Unit)} furry caboose.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out a petite eep as {GPPHis(i.Unit)} prey makes one last attempt to escape the faun's belly. Luckily, the effort ends quickly as digestion takes over and starts adding the troublesome meal to {GPPHis(i.Unit)} curves.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can feel the life leave <b>{i.Target.Name}</b> as {GPPHis(i.Unit)} fiber-digesting enzymes finally start working on them. The {GetRaceDescSingl(i.Unit)} hopes that {GPPHe(i.Target)} do{EsIfSingular(i.Unit)}n't make {GPPHim(i.Unit)} too fat.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> ignores the thumping coming from within {GPPHis(i.Unit)} wobbling belly as best {GPPHe(i.Unit)} can until the struggling ceases. The faun quietly thanks <b>{i.Target.Name}</b> for being {GPPHis(i.Unit)} meal.",
            actorRace: Race.Deer, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sighs with disappointment as {GPPHe(i.Unit)} feel{SIfSingular(i.Unit)} <b>{i.Target.Name}</b> get converted into nutrients. Much to {GPPHis(i.Unit)} chagrin, it seems {GPPHeIsAbbr(i.Target)} intent on turning into ass fat. The faun hopes {GPPHis(i.Unit)} fur will hide the extra pounds.", actorRace: Race.Deer, priority: 9),
            //Panther pred
            new EventString((i) => $"A final rumble from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} signals that <b>{i.Target.Name}</b> has passed from this world to the next.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"Resting a hand on {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}, <b>{i.Unit.Name}</b> can feel <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> final motions, as {GPPHis(i.Unit)} juices dissolve {GPPHim(i.Target)}, letting <b>{i.Target.Name}</b> join the spirits in the next life.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grows tired of waiting for {GPPHis(i.Unit)} lazy {i.preyLocation.ToSyn()} to finish <b>{i.Target.Name}</b> off. Deciding to speed the process along, <b>{i.Unit.Name}</b> leans on {GPPHis(i.Unit)} sloshing {i.preyLocation.ToSyn()}, slathering {GPPHis(i.Unit)} meal with juices. A sudden muffled scream followed by stillness ensures the fight to be over.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"\"You’ve been fighting for a long time in there, maybe I’ll get you back to town to sell you off as a sla-\" <b>{i.Unit.Name}</b> says before {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} make{PluralForPart(i.preyLocation)} such thoughts moot by finishing the meal off.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"A belch that shortly turns into a gleeful roar signals the end of <b>{i.Target.Name}</b> and the victory of the tribal warrior.",
            actorRace: Race.Panthers, priority: 9, conditional: s=> InStomach(s) && CanBurp(s)),
            new EventString((i) => $"Despite a few weak motions within {GPPHis(i.Unit)} softening {i.preyLocation.ToSyn()}, <b>{i.Unit.Name}</b> can already feel the strength of {GPPHis(i.Unit)} meal surge into {GPPHis(i.Unit)} body. <b>{i.Target.Name}</b> is too far gone now.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> gives an admiring rub to {GPPHis(i.Unit)} furred {i.preyLocation.ToSyn()} as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> defiant struggle comes to an end.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is loath to admit it, but as {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} settle{PluralForPart(i.preyLocation)} and begin{PluralForPart(i.preyLocation)} to soften, {GPPHe(i.Unit)}’ll miss the energetic struggles of {GPPHis(i.Unit)} meal.",
            actorRace: Race.Panthers, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can’t help but rub {GPPHis(i.Unit)} dick and curse with delight as <b>{i.Target.Name}</b> attempts a final desperate plan of escape. It does naught but excite the panting panther into orgasm.",
            actorRace: Race.Panthers, priority: 9, conditional: InBalls),
            new EventString((i) => $"{i.Unit.Name}</b> can’t help but rub {GPPHis(i.Unit)} nipples and curse with delight as <b>{i.Target.Name}</b> attempts a final desperate plan of escape. It does naught but excite the panting panther into orgasm.",
            actorRace: Race.Panthers, priority: 9, conditional: InBreasts),

            //Kangaroo pred (pouch vore)
            new EventString((i) => $"With no fanfare or ceremony, <b>{i.Unit.Name}</b>'s pouch stops moving, signaling <b>{i.Target.Name}</b>'s death within.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"Within <b>{i.Unit.Name}</b>'s pouch, <b>{i.Target.Name}</b> finally stops moving, succumbing to {GPPHis(i.Target)} fate.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"With no new oxygen for far longer than is safe, <b>{i.Target.Name}</b> finally stops moving within <b>{i.Unit.Name}</b>'s pouch.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"With no new oxygen for far longer than is safe, <b>{i.Target.Name}</b> finally stops moving within <b>{i.Unit.Name}</b>'s pouch. <b>{i.Target.Name}</b>'s last concious thought is a simple question: \"What happens to my body now? Surely a pouch can't... digest things.\"", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"With no new oxygen for far longer than is safe, <b>{i.Target.Name}</b> finally stops moving within <b>{i.Unit.Name}</b>'s pouch. <b>{i.Target.Name}</b>'s last concious thought is a simple question: \"Why me? What did I do?\"", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"With no new oxygen for far longer than is safe, <b>{i.Target.Name}</b> finally stops moving within <b>{i.Unit.Name}</b>'s pouch. <b>{i.Target.Name}</b>'s last concious thought is a simple question: \"I wonder who the first person to notice I'm gone will be?\"", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"With no new oxygen for far longer than is safe, <b>{i.Target.Name}</b> finally stops moving within <b>{i.Unit.Name}</b>'s pouch. <b>{i.Target.Name}</b>'s last concious thought is a simple question: \"Where will my {GetRandomStringFrom("clothes","weapon","bones","body")} go?\"", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"With no new oxygen for far longer than is safe, <b>{i.Target.Name}</b> finally stops moving within <b>{i.Unit.Name}</b>'s pouch. <b>{i.Target.Name}</b>'s last concious thought is a simple question: \"When will the battle end?\"", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),

            new EventString((i) => $"The violent jiggling in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} becomes still, much to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> displeasure. \"You can't even survive my {i.preyLocation.ToSyn()}. How weak.\"",
            priority: 9, conditional: s => InBreasts(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> arches {GPPHis(i.Unit)} back, revealing the busty outline of <b>{i.Target.Name}</b> pressing against the inside of {GPPHis(i.Unit)} mighty bosom before the struggling of {GPPHis(i.Unit)} prey ends.",
            priority: 9, conditional: s => InBreasts(s) && ActorHumanoid(s) && TargetBoobs(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> pelvic thrusts as the movement in {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} stops. \"You make a fine load of {i.preyLocation.ToFluid()}.\"",
            priority: 9, conditional: s => InBalls(s) && ActorHumanoid(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> feels a great pride as {GPPHe(i.Unit)} digest{EsIfSingular(i.Unit)} the leader of the {GetPreyDesc(i.Target)} {i.Target.Race}: <b>{i.Target.Name}</b>.",
            priority: 10, conditional:TargetLeader),
            new EventString((i) => $"<b>{i.Target.Name}</b> thrashes and screams futilely to no avail for {GPPHis(i.Target)} followers to free {GPPHim(i.Target)} as {GPPHe(i.Target)} melt{SIfSingular(i.Target)} away within <b>{i.Unit.Name}</b>.",
            priority: 10, conditional:TargetLeader),
            new EventString((i) => $"<b>{i.Unit.Name}</b> proudly bellows {GPPHis(i.Unit)} triumph as the leader of the {GetPreyDesc(i.Target)} {i.Target.Race} is claimed by {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            priority: 10, conditional: s => TargetLeader(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> squeezes {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} together proudly as <b>{i.Target.Name}</b> is drowned by all {GPPHis(i.Unit)} bubbling {i.preyLocation.ToFluid()}. \"I hope you enjoyed the royal accomodation <b>{i.Target.Name}</b>.\"",
            priority: 10, conditional: s => TargetLeader(s) && InBreasts(s) && ActorHumanoid(s)),


            new EventString((i) => $"<b>{i.Unit.Name}</b> massages {GPPHis(i.Unit)} soft {PreyLocStrings.ToSyn(PreyLocation.balls)} as <b>{i.Target.Name}</b> melts into {GetRandomStringFrom("fresh", "warm", "creamy")} {GetRaceDescSingl(i.Unit)} batter.",
            priority: 8, conditional: s => InBalls(s) && Lewd(s)),

            new EventString((i) => $"\"It was a valiant effort, <b>{i.Target.Name}</b>, but your struggles were futile since the start.\" <b>{i.Unit.Name}</b> tells the {GetRaceDescSingl(i.Target)} leader. \"Goodbye, <b>{i.Target.Name}</b>\" With that farewell, <b>{i.Target.Name}</b> finally succumbs to the {GetRaceDescSingl(i.Unit)} leader's {PreyLocStrings.ToSyn(i.preyLocation)}.",
            priority: 11, conditional: s => ActorLeader(s) && TargetLeader(s)),


            new EventString((i) => $"\"The time has come, <b>{i.Target.Name}</b>,\" says <b>{i.Unit.Name}</b> as the {GetRaceDescSingl(i.Target)} leader's struggles begin to wane. \"It is time for you to churn into my seed.\" Unable to withstand any longer, <b>{i.Target.Name}</b> finally lets {GPPHis(i.Target)} head sink below the fluids.",
            priority: 11, conditional: s => ActorLeader(s) && InBalls(s) && TargetLeader(s)),
            new EventString((i) => $"\"I greatly enjoyed our time together, <b>{i.Target.Name}</b>. But it's time to end this,\" says <b>{i.Unit.Name}</b> as {GPPHe(i.Unit)} begin{SIfSingular(i.Unit)} to knead {GPPHis(i.Unit)} massive balls. \"Now melt, and turn into my {PreyLocStrings.SpoogeAdjSyn()} load.\" Unable to withstand any longer, <b>{i.Target.Name}</b> sinks into the fluids.",
            priority: 11, conditional: s => ActorLeader(s) && InBalls(s) && TargetLeader(s)),

            new EventString((i) => $"<b>{i.Unit.Name}</b> burps as <b>{i.Target.Name}</b> goes quiet in {GPPHis(i.Unit)} belly. <b>{i.Target.Name}</b> was a tasty noodle.", //
            targetRace: Race.EasternDragon, priority: 9, conditional: s=> CanBurp(s) && InStomach(s)),

            //The instant digestion ones haven't been fully tested. They should work but if something's wrong with them just take them out and tell me
            new EventString((i) => $"A loud shriek is silenced by a crunch as <b>{i.Target.Name}</b> is instantly digested in the belly of <b>{i.Unit.Name}</b>.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InStomach(s) && HardVore(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> belly goes soft as <b>{i.Target.Name}</b> is instantly digested.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> contracts {GPPHis(i.Unit)} abs and <b>{i.Target.Name}</b> is digested instantly.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InStomach(s)),
            new EventString((i) => $"A loud scream, a gutteral crunch, and a soft belly describes what <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> belly did to <b>{i.Target.Name}</b> in such a short time.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InStomach(s) && HardVore(s)),
            new EventString((i) => $"As quickly as <b>{i.Unit.Name}</b> swallowed <b>{i.Target.Name}</b>, {GPPHis(i.Unit)} belly turned <b>{i.Target.Name}</b> into mush.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InStomach(s)),
            new EventString((i) => $"The solid mass of <b>{i.Target.Name}</b> turns to mush in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> belly within seconds of being swallowed.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InStomach(s) && HardVore(s)),

            new EventString((i) => $"<b>{i.Target.Name}</b> doesn't spend more than five seconds in the {PreyLocStrings.ToSyn(i.preyLocation)} of <b>{i.Unit.Name}</b> before being turned into {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)}.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InBalls(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> balls stop wiggling as <b>{i.Target.Name}</b> is instantly digested.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InBalls(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> balls squeeze in on <b>{i.Target.Name}</b>, instantly digesting {GPPHim(i.Target)}.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InBalls(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> cries out in horror as {GPPHe(i.Target)} realize{SIfSingular(i.Target)} that within seconds of being sucked into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> balls, {GPPHeIs(i.Target)} already melting.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InBalls(s) && HardVore(s)),
            new EventString((i) => $"As quickly as <b>{i.Unit.Name}</b> sucked in <b>{i.Target.Name}</b>, {GPPHis(i.Unit)} balls turned <b>{i.Target.Name}</b> into {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)}.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InBalls(s)),
            new EventString((i) => $"The solid mass of <b>{i.Target.Name}</b> turns into {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)} in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> balls within seconds of being sucked down.",
            priority: 10, conditional: s => s.Unit.HasTrait(Traits.InstantDigestion) && InBalls(s)),


            //Content Warning: the below are incredibly lewd
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out a soft moo as {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)} turn <b>{i.Target.Name}</b> into {GetRandomStringFrom("a fresh batch of", "a warm serving of", "high-protein", "rich, creamy", "warm, creamy")} bull milk.",
            actorRace: Race.Taurus, priority: 11, conditional: s => InBalls(s) && Lewd(s) && s.Unit.GetGender() == Gender.Male),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)} turn <b>{i.Target.Name}</b> into {GetRandomStringFrom("a fresh batch of", "a warm serving of", "high-protein", "rich, creamy", "warm, creamy")} bull milk.",
            actorRace: Race.Taurus, priority: 11, conditional: s => InBalls(s) && Lewd(s) && s.Unit.GetGender() == Gender.Male),
            new EventString((i) => $"<b>{i.Unit.Name}</b> moos as {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)} turn <b>{i.Target.Name}</b> into dairy... the bull kind.",
            actorRace: Race.Taurus, priority: 11, conditional: s => InBalls(s) && Lewd(s) && s.Unit.GetGender() == Gender.Male),
            //Content Warning: the above are incredibly lewd
            //No shame in making good use of the lewd option! ;3

            //If your headcanon is that kobolds feel great honour in being digested by a dragon, then keep these, if not, delete them and tell me you don't like that. 
            new EventString((i) => $"<b>{i.Target.Name}</b> moans in bliss knowing that {GPPHe(i.Target)} will become pudge and forever hug {GPPHis(i.Target)} dragon's belly.",
            actorRace: Race.Dragon, targetRace: Race.Kobolds, priority: 10, conditional: InStomach),
            new EventString((i) => $"<b>{i.Target.Name}</b> moans in bliss knowing that {GPPHe(i.Target)} will become {GPPHis(i.Target)} dragon's {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)}.",
            actorRace: Race.Dragon, targetRace: Race.Kobolds, priority: 10, conditional: InBalls),
            new EventString((i) => $"<b>{i.Target.Name}</b> blissfully sinks under the surrounding {PreyLocStrings.ToFluid(PreyLocation.balls)}, knowing {GPPHe(i.Target)} will become {GPPHis(i.Target)} dragon master's next {PreyLocStrings.SpoogeAdjSyn()} load.",
            actorRace: Race.Dragon, targetRace: Race.Kobolds, priority: 10, conditional: s => InBalls(s) && Lewd(s)),


            new EventString((i) => $"\"Can't you see, <b>{i.Target.Name}</b>? Your kind were always meant to be food to us,\" <b>{i.Unit.Name}</b> tells the {ApostrophizeWithOrWithoutS(i.Target.Race.ToString())} leader inside {GPPHim(i.Unit)}. \"...and you know what happens to food...\" Defeated, <b>{i.Target.Name}</b> braces for the inevitable. \"...it digests.\" With that, <b>{i.Unit.Name}</b> squeezes {GPPHis(i.Unit)} gut, finishing off <b>{i.Target.Name}</b>.",
            priority: 11, conditional: s => InStomach(s) && ActorLeader(s) && TargetLeader(s)),
            new EventString((i) => $"\"It's been fun, <b>{i.Target.Name}</b>, but our time together must end,\" <b>{i.Unit.Name}</b> tells the {ApostrophizeWithOrWithoutS(i.Target.Race.ToString())} leader inside {GPPHim(i.Unit)}. <b>{i.Target.Name}</b> knows that {GPPHeIsAbbr(i.Target)} completely out of energy, {GPPHe(i.Target)} know{SIfSingular(i.Target)} that {GPPHe(i.Target)} can't resist {GPPHis(i.Target)} fate anymore. \"It's time to digest,\" <b>{i.Unit.Name}</b> says, hugging {GPPHis(i.Unit)} belly tightly, feeling <b>{i.Target.Name}</b> finally digest.",
            priority: 11, conditional: s => InStomach(s) && ActorLeader(s) && TargetLeader(s)),
            
            //If they were feeling pleasure from being eaten while cursed, it would be just absolute cruelty to not let them climax before digesting away...
            //Tell me if you like these and I'll make some more along this theme
            new EventString((i) => $"\"Glad you enjoyed yourself,\" <b>{i.Unit.Name}</b> chuckles while rubbing {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)} after hearing <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> loud, {GetRandomStringFrom("pleasured moan", "orgasmic cry", "cry of ecstasy")} before being digested.",
            priority: 9, conditional: s => Cursed(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> orgasms in the {PreyLocStrings.ToSyn(i.preyLocation)} of <b>{i.Unit.Name}</b> as digestion finally claims the oddly willing prey.",
            priority: 9, conditional: s => Cursed(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> chuckles to {GPPHimself(i.Unit)} as the willing <b>{i.Target.Name}</b> climax{EsIfSingular(i.Target)} inside {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)} as {GPPHe(i.Target)} melt{SIfSingular(i.Target)} away.",
            priority: 9, conditional: s => Cursed(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> releases a weak moan as {GPPHe(i.Target)} orgasm{SIfSingular(i.Target)} inside the {PreyLocStrings.ToSyn(i.preyLocation)} of <b>{i.Unit.Name}</b>.",
            priority: 9, conditional: s => Cursed(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> has the strongest, as well as last orgasm of {GPPHis(i.Target)} life as {GPPHe(i.Target)} melt{SIfSingular(i.Target)} away in the {PreyLocStrings.ToSyn(i.preyLocation)} of <b>{i.Unit.Name}</b>.",
            priority: 9, conditional: s => Cursed(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> has a massive orgasm inside of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)} and passes out from the pleasure, sinking peacefully into the surrounding fluids.",
            priority: 9, conditional: s => Cursed(s) && Lewd(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body shudders as {GPPHe(i.Target)} climax{EsIfSingular(i.Target)} inside of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)}. So glad that {GPPHe(i.Target)} {WasWere(i.Target)} able to orgasm before being churned up, {GPPHe(i.Target)} peacefully lets {GPPHimself(i.Target)} sink into the fluids.",
            priority: 9, conditional: s => Cursed(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> only feels a wave of pleasure crash into {GPPHim(i.Target)} as {GPPHe(i.Target)} climax{EsIfSingular(i.Target)} inside of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)} mere seconds before melting away.",
            priority: 9, conditional: s => Cursed(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> has no trouble getting off when thinking about becoming {InfoPanel.RaceSingular(i.Unit)} shit, and <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> innards promptly churn down {GPPHis(i.Target)} body to make {GPPHis(i.Target)} wish come true.",
            priority: 9, conditional: s => Cursed(s) && Lewd(s) && InStomach(s) && Scat(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> can't help but orgasm wildly when imagining {GPPHimself(i.Target)} getting crapped out of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> sexy ass. <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> guts, in turn, promptly get to work on that and silence the moaning food.",
            priority: 9, conditional: s => Cursed(s) && Lewd(s) && InStomach(s) && Scat(s)),
            new EventString((i) => $"The realization that {GPPHe(i.Target)} {IsAre(i.Target)} in the process of becoming {GetRaceDescSingl(i.Unit)} fart fuel for some reason gives {GPPHim(i.Target)} the best {(i.Target.HasDick ? "nut" : (i.Target.HasVagina ? "squirt" : "orgasm"))} of {GPPHis(i.Target)} life - so good it makes {GPPHim(i.Target)} pass out forever.",
            priority: 9, conditional: s => Cursed(s) && Lewd(s) && InStomach(s) && Farts(s)),

            //Abakhanskya
            new EventString((i) => $"<b>{i.Unit.Name}</b> rolls a belch as <b>{i.Target.Name}</b> digests away into nothing within her bloated midriff.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> joins the ranks of the countless masses of prey who've disappeared into <b>{i.Unit.Name}</b> before {GPPHim(i.Target)}. Like them, <b>{i.Target.Name}</b> is now gone forever.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"A gentle rock of the stomach is enough to take <b>{i.Target.Name}</b> under the acidic waves, joining the soupy mess within the fat gut of <b>{i.Unit.Name}</b>.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> lets out one last cry before {GPPHe(i.Target)}'s claimed by <b>{i.Unit.Name}'s</b> hungry body.  But no one can hear {GPPHim(i.Target)} scream, not even <b>Aba</b> herself.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"A crass belch slips its way up <b>{i.Unit.Name}'s</b> gullet as <b>{i.Target.Name}</b> bubbles and churns away for good, their form now totally immersed in the merciless cauldron that is the Khatunlao's gut.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"A brief hiccup from <b>{i.Unit.Name}</b> is all that heralds the demise of <b>{i.Target.Name}</b>.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"The sound of a muffled scream can be heard from inside of <b>{i.Unit.Name}</b> as <b>{i.Target.Name}</b> is sizzled down into soup.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> smacks her chops. <b>{i.Target.Name}</b> is no more.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> submits to their fate inside of <b>{i.Unit.Name}</b> and sinks into the sea of slop.  Her intestines eagerly drink up what's left of {GPPHim(i.Target)}.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> pounds desperately on the walls of the stomach, making the belly of <b>{i.Unit.Name}</b> wobble lightly before they succumb with a scream.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"As <b>{i.Target.Name}</b> meets the same end that tens-of-thousands of others have shared, <b>{i.Unit.Name}</b> simply smirks.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}'s</b> bargaining for release is ignored by <b>{i.Unit.Name}</b>, who merely scoffs in amusement.  Soon {GPPHis(i.Target)} pleas are cut short entirely and replaced with the bubbling, gurgling and churning of <b>Aba's</b> ruthless stomach.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> comments on <b>{i.Target.Name}</b>'s texture as {GPPHe(i.Target)} meets {GPPHis(i.Target)} ultimate destiny: nutrients for a healthy dragoness.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> has run out of strength. They now belong to <b>{i.Target.Name}</b>.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"Like so many others, <b>{i.Target.Name}</b> will amount to nothing more than sag on <b>{i.Unit.Name}'s</b> ass.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> ends their run inside of <b>{i.Unit.Name}'s</b> gut, helping it inch just a little closer to the ground with the dead weight.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"The sea of acidic meat-soup devours <b>{i.Target.Name}</b>, who will soon be nothing more than fuel for <b>{i.Unit.Name}'s</b> massive body.  Like so many others before {GPPHim(i.Target)}.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is forced to let loose a belch from her ever-digesting gut as <b>{i.Target.Name}</b> expires with a scream.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> begs <b>{i.Unit.Name}</b> to let them go. That stomach around {GPPHim(i.Unit)} gurgles a reply. The negotiations were short. <b>{i.Target.Name}</b> is no more.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> is stripped down to the bone and joins the masses floating around inside <b>{i.Unit.Name}'s</b> guts, waiting to be turned into fuel.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but laugh as <b>{i.Target.Name}</b> screams for release. {GPPHe(i.Unit)} is silenced by the dragoness letting off a deafening belch.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> accepts {GPPHis(i.Unit)} destiny is to become fuel for {GPPHis(i.Unit)} better, <b>{i.Unit.Name}</b>. {GPPHe(i.Unit)} slips beneath the digestive tide and wonders just where on the predator's body {GPPHe(i.Unit)}'ll end up.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"Nearby warriors can hear the wailing of <b>{i.Target.Name}</b> escape <b>{i.Unit.Name}'s</b> ajar maw before {GPPHe(i.Unit)} suddenly falls silent. The implications are clear: <b>{i.Target.Name}</b> has been digested.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> tries and fails to avoid being disassembled by the guts of the matron. <b>{i.Target.Name}</b> only smiles as she feels her belly grow less lumpy.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"So similar to so many, <b>{i.Target.Name}</b> is now just meat. <b>{i.Unit.Name}</b> chuckles as the strugging within her grinds to a halt.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> chuckles as the last adamant struggles of <b>{i.Target.Name}</b> die out with {GPPHim(i.Unit)}.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> belch carries the scent of the now churning <b>{i.Target.Name}</b>, who is soon to be a noticeable addition to the large lady.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => CanBurp(s)),
            new EventString((i) => $"Slapping the sides of her stomach, <b>{i.Unit.Name}</b> ends the fight that <b>{i.Target.Name}</b> was trying to put up within. ",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach frantically shifts and ripples as one final flurry of struggles is given by <b>{i.Target.Name}</b>, before the squeeze of the walls disassembles them.",
            actorRace: Race.Abakhanskya, priority: 11),
            //Aba flirts
            new EventString((i) => $"The death scream of <b>{i.Target.Name}</b>, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> latest meal, really distracts <b>{AttractedWarrior(i.Unit).Name}</b>. They fidget in place and wonder where the poor {GetRaceDescSingl(i.Unit)} will end up on the dragoness' body.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"A final howl from her {PreyLocStrings.DigestingVerbSyn()} prey is heard as <b>{i.Unit.Name}</b> belches calmly. <b>{AttractedWarrior(i.Unit).Name}</b> really wants to feel the added weight in that titanic {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => CanBurp(s) && ReqOSWStomach(s)),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> is stunned as they watch <b>{i.Unit.Name}</b> in fascination.  The only indication she even noticed that <b>{i.Target.Name}</b> just died inside her is a simple hiccup and a wet smack of her chops.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> finds it hard to resist the urge to get themselves up against <b>{i.Unit.Name}'s</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> life fades within her, becoming fuel for her massive body.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> cries out for one last time while <b>{i.Unit.Name}</b> {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} yawns. <b>{AttractedWarrior(i.Unit).Name}</b> feels weirdly enticed by hearing the pleas of the soon digested warrior, who is swiftly silenced after the wizened lady slaps her gut.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> briefly imagines themselves inside of <b>{i.Unit.Name}</b> as <b>{i.Target.Name}</b> is finally claimed by her {PreyLocStrings.AcidicDeadlySyn()} acids.  They wobble a little in place – sharing <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> fate as fuel for their better was becoming dangerously enticing.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> energy wanes and {GPPHe(i.Target)} finally collapses into the lake of meaty soup, {GPPHis(i.Target)} beginning to get reaped in earnest. The roaring belly makes <b>{AttractedWarrior(i.Unit).Name}</b> shudder with strange delight and utter something about <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> battlefield gluttony.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"The meaty burp that rolls off of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tongue, followed quickly by a heavy breath, has <b>{AttractedWarrior(i.Unit).Name}</b> considerably distracted.  Was that all that was left of <b>{i.Target.Name}</b>...?",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s) && CanBurp(s)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> hits {GPPHis(i.Target)} expiration date inside <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.BellyStuffedAdjSyn()} {PreyLocStrings.ToSyn(PreyLocation.stomach)}, <b>{AttractedWarrior(i.Unit).Name}</b> has their buttons thoroughly pressed at the sight of the mighty khatunlao simply stretching out and making room for more with a long, rolling belch.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s) && CanBurp(s)),
            //Aba Experienced Prey
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> prey-fueled might finds itself for worth naught but nourishment for <b>{i.Unit.Name}</b> as they break up in the ravenous lady. She'll sure enjoy the extra protein, though.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => PreyIsVeteranPred(s)),
            //Aba Digests Leaders
            new EventString((i) => $"<b>{i.Target.Name}</b> collapses into nothing within <b>{i.Unit.Name}</b>. Their empire will likely follow.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> perishes inside <b>{i.Unit.Name}</b> with a scream, sharing the experience that many of their race have already had.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> belches, smirking cruelly as royalty dies within her.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => TargetLeader(s) && TargetHumanoid(s) && CanBurp(s)),
            
            

            //Feit
            new EventString((i) => $"<b>{i.Target.Name}</b> finally gives in to the demands of <b>{i.Unit.Name}'s</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)}, sinking beneath her acids and surrendering their body for her gain!",
            actorRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out a heavy <i>*BhhrrREEELCH!*</i> as her {PreyLocStrings.ToSyn(PreyLocation.stomach)} ultimately {PreyLocStrings.DigestsVerbSyn()} <b>{i.Target.Name}</b>.",
            actorRace: Race.Feit, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Target.Name}</b> was clearly no match for <b>{i.Unit.Name}'s</b> appetite, as the {GetRaceDescSingl(i.Unit)} begins to absorb their mass for her own!",
            actorRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> moans softly, her {PreyLocStrings.ToSyn(PreyLocation.stomach)} getting the better of <b>{i.Target.Name}</b>.",
            actorRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> clicks in delight, grinning as her {PreyLocStrings.ToSyn(PreyLocation.stomach)} softens due to <b>{i.Target.Name}'s</b> death.",
            actorRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> yelps in horror as <b>{i.Unit.Name}'s</b> stomach walls clench, collpasing around them until they crunch and melt into a sizzling mess of chyme and debris...",
            actorRace: Race.Feit, priority: 11, conditional: HardVore),
            new EventString((i) => $"<b>{i.Unit.Name}</b> chuckles cruelly, telling <b>{i.Target.Name}'s</b> disintegrating remains that she'll enjoy {GetRandomStringFrom("expelling them", "evicting them", "squeezing them out", "pushing them out", "crapping them out", "dumping them", "shitting them out", "disposing of them")} soon.",
            actorRace: Race.Feit, priority: 11, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> feels her {PreyLocStrings.ToSyn(PreyLocation.stomach)} get marginally softer as someone else is digested. <b>{i.Target.Name}</b> is gone.",
            actorRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> licks her chops, feeling <b>{i.Target.Name}'s</b> demise as an intense {GetRandomStringFrom("gurgling", "churning", "rumbling", "gworgling", "grumbling", "bubbling", "shifting")} rolling through her {PreyLocStrings.ToSyn(PreyLocation.stomach)}... \"This should help keep up my size...\"",
            actorRace: Race.Feit, priority: 11, conditional: s => SizeDiff(s, 1f)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> presses {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} against the nearest large object, {GetRaceDescSingl(i.Unit)} ruthlessly grinding <b>{i.Target.Name}</b> down into belly chum without a trace of remorse!",
            actorRace: Race.Feit, priority: 11, conditional: HardVore),
            new EventString((i) => $"The latest {GetRandomStringFrom("rumbling", "grumbling", "gurgling", "roaring", "bubbling", "burbling", "glorping", "churning")} from <b>{i.Unit.Name}'s</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} marks the {GetRandomStringFrom("demise", "death", "passing", "digestion", "sealed fate")} of <b>{i.Target.Name}</b>, no one even noticing as the roiling bulge in her gut churns loudly!",
            actorRace: Race.Feit, priority: 11),

            //Feit Vs. Dragons/Wyverns
            new EventString((i) => $"<b>{i.Target.Name}</b> scratches helplessly against <b>{i.Unit.Name}'s</b> stomach {GetRandomStringFrom("walls", "lining")}, the {GetRaceDescSingl(i.Unit)} softly {GetRandomStringFrom("burping", "belching")} her contempt as she {PreyLocStrings.DigestsVerbSyn()} them down for good.",
            actorRace: Race.Feit, targetRace: Race.Dragon, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Target.Name}</b> scratches helplessly against <b>{i.Unit.Name}'s</b> stomach {GetRandomStringFrom("walls", "lining")}, the {GetRaceDescSingl(i.Unit)} softly {GetRandomStringFrom("burping", "belching")} her contempt as she {PreyLocStrings.DigestsVerbSyn()} them down for good.",
            actorRace: Race.Feit, targetRace: Race.EasternDragon, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Target.Name}</b> scratches helplessly against <b>{i.Unit.Name}'s</b> stomach {GetRandomStringFrom("walls", "lining")}, the {GetRaceDescSingl(i.Unit)} softly {GetRandomStringFrom("burping", "belching")} her contempt as she {PreyLocStrings.DigestsVerbSyn()} them down for good.",
            actorRace: Race.Feit, targetRace: Race.Abakhanskya, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Target.Name}</b> scratches helplessly against <b>{i.Unit.Name}'s</b> stomach {GetRandomStringFrom("walls", "lining")}, the {GetRaceDescSingl(i.Unit)} softly {GetRandomStringFrom("burping", "belching")} her contempt as she {PreyLocStrings.DigestsVerbSyn()} them down for good.",
            actorRace: Race.Feit, targetRace: Race.Cierihaka, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Target.Name}</b> once again perishes inside a cute beast, surprising everyone!  Her swell in <b>{i.Unit.Name}'s</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} softening as the raptor steals her bulk for her own!",
            actorRace: Race.Feit, targetRace: Race.Selicia, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> scratches helplessly against <b>{i.Unit.Name}'s</b> stomach {GetRandomStringFrom("walls", "lining")}, the {GetRaceDescSingl(i.Unit)} softly {GetRandomStringFrom("burping", "belching")} her contempt as she {PreyLocStrings.DigestsVerbSyn()} them down for good.",
            actorRace: Race.Feit, targetRace: Race.Wyvern, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Target.Name}</b> scratches helplessly against <b>{i.Unit.Name}'s</b> stomach {GetRandomStringFrom("walls", "lining")}, the {GetRaceDescSingl(i.Unit)} softly {GetRandomStringFrom("burping", "belching")} her contempt as she {PreyLocStrings.DigestsVerbSyn()} them down for good.",
            actorRace: Race.Feit, targetRace: Race.WyvernMatron, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Target.Name}</b> scratches helplessly against <b>{i.Unit.Name}'s</b> stomach {GetRandomStringFrom("walls", "lining")}, the {GetRaceDescSingl(i.Unit)} softly {GetRandomStringFrom("burping", "belching")} her contempt as she {PreyLocStrings.DigestsVerbSyn()} them down for good.",
            actorRace: Race.Feit, targetRace: Race.Scorch, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Target.Name}</b> scratches helplessly against <b>{i.Unit.Name}'s</b> stomach {GetRandomStringFrom("walls", "lining")}, the {GetRaceDescSingl(i.Unit)} softly {GetRandomStringFrom("burping", "belching")} her contempt as she {PreyLocStrings.DigestsVerbSyn()} them down for good.",
            actorRace: Race.Feit, targetRace: Race.Zera, priority: 11, conditional: CanBurp),

            //Feit Prey
            new EventString((i) => $"<b>{i.Target.Name}</b> succumbs to her injuries, now just blue meat to be absorbed by <b>{i.Unit.Name}</b> {GetRandomStringFrom("rapacious", "avaricious", "greedy", "gluttonous", "covetous", "demanding", "eager", "insatiate", "ever-hungry", "hungry", "hungering", "ravenous")} {i.preyLocation.ToSyn()}.",
            targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> succumbs to her injuries, now just blue meat to be melted down into {i.preyLocation.ToFluid()}.",
            targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> struggling stops and she goes still... <b>{i.Unit.Name}</b> has claimed a mighty raptor as {GPPHis(i.Unit)} snack!",
            targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> kicks one last time as she fades from this world, her prey-fueled body lost to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> equally massive appetite!",
            targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}'s</b> efforts doing all that growing only made her a heartier meal for <b>{i.Unit.Name}</b>!",
            targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rumbles as the puny {GetRaceDescSingl(i.Target)} is defeated within {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}, along with <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> delusions of grandeur.",
            targetRace: Race.Feit, actorRace: Race.Dragon, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but let out a heavy <i>*BWUUOOOAARP!*</i> as <b>{i.Target.Name}</b> is finally {PreyLocStrings.DigestedVerbSyn()}... The {GetRaceDescSingl(i.Target)} put in all that work only to become more filling!",
            targetRace: Race.Feit, actorRace: Race.Dragon, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but let out a heavy <i>*BWUUOOOAARP!*</i> as <b>{i.Target.Name}</b> is finally {PreyLocStrings.DigestedVerbSyn()}... The {GetRaceDescSingl(i.Target)} put in all that work only to end up as {i.preyLocation.ToFluid()}!",
            targetRace: Race.Feit, actorRace: Race.Dragon, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rumbles as the puny {GetRaceDescSingl(i.Target)} is defeated within {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}, along with <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> delusions of grandeur.",
            targetRace: Race.Feit, actorRace: Race.EasternDragon, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but let out a heavy <i>*BWUUOOOAARP!*</i> as <b>{i.Target.Name}</b> is finally {PreyLocStrings.DigestedVerbSyn()}... The {GetRaceDescSingl(i.Target)} put in all that work only to become more filling!",
            targetRace: Race.Feit, actorRace: Race.EasternDragon, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but let out a heavy <i>*BWUUOOOAARP!*</i> as <b>{i.Target.Name}</b> is finally {PreyLocStrings.DigestedVerbSyn()}... The {GetRaceDescSingl(i.Target)} put in all that work only to end up as {i.preyLocation.ToFluid()}!",
            targetRace: Race.Feit, actorRace: Race.EasternDragon, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rumbles as the puny {GetRaceDescSingl(i.Target)} is defeated within {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}, along with <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> delusions of grandeur.",
            targetRace: Race.Feit, actorRace: Race.Selicia, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but let out a heavy <i>*BWUUOOOAARP!*</i> as <b>{i.Target.Name}</b> is finally {PreyLocStrings.DigestedVerbSyn()}... The {GetRaceDescSingl(i.Target)} put in all that work only to become more filling!",
            targetRace: Race.Feit, actorRace: Race.Selicia, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but let out a heavy <i>*BWUUOOOAARP!*</i> as <b>{i.Target.Name}</b> is finally {PreyLocStrings.DigestedVerbSyn()}... The {GetRaceDescSingl(i.Target)} put in all that work only to end up as {i.preyLocation.ToFluid()}!",
            targetRace: Race.Feit, actorRace: Race.Selicia, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rumbles as the puny {GetRaceDescSingl(i.Target)} is defeated within {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}, along with <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> delusions of grandeur.",
            targetRace: Race.Feit, actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but let out a heavy <i>*BWUUOOOAARP!*</i> as <b>{i.Target.Name}</b> is finally {PreyLocStrings.DigestedVerbSyn()}... The {GetRaceDescSingl(i.Target)} put in all that work only to become more filling!",
            targetRace: Race.Feit, actorRace: Race.Abakhanskya, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but let out a heavy <i>*BWUUOOOAARP!*</i> as <b>{i.Target.Name}</b> is finally {PreyLocStrings.DigestedVerbSyn()}... The {GetRaceDescSingl(i.Target)} put in all that work only to end up as {i.preyLocation.ToFluid()}!",
            targetRace: Race.Feit, actorRace: Race.Abakhanskya, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rumbles as the puny {GetRaceDescSingl(i.Target)} is defeated within {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}, along with <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> delusions of grandeur.",
            targetRace: Race.Feit, actorRace: Race.Cierihaka, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but let out a heavy <i>*BWUUOOOAARP!*</i> as <b>{i.Target.Name}</b> is finally {PreyLocStrings.DigestedVerbSyn()}... The {GetRaceDescSingl(i.Target)} put in all that work only to become more filling!",
            targetRace: Race.Feit, actorRace: Race.Cierihaka, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but let out a heavy <i>*BWUUOOOAARP!*</i> as <b>{i.Target.Name}</b> is finally {PreyLocStrings.DigestedVerbSyn()}... The {GetRaceDescSingl(i.Target)} put in all that work only to end up as {i.preyLocation.ToFluid()}!",
            targetRace: Race.Feit, actorRace: Race.Cierihaka, priority: 11, conditional: CanBurp),

            //Orcas
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> smooth {PreyLocStrings.ToSyn(PreyLocation.stomach)} growls menacingly as <b>{i.Target.Name}</b> is firmly squelched into their final stomach, ready to be made into blubber and a load of {GetRaceDescSingl(i.Target)} {PreyLocStrings.ScatSyn()}.",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets loose a blubber-shaking belch as <b>{i.Target.Name}</b> is {PreyLocStrings.DigestedVerbSyn()} into belly batter!",
            actorRace: Race.FeralOrcas, priority: 9, conditional: CanBurp),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> blubber looks just a bit more plentiful, {GPPHis(i.Unit)} gut beginning to absorb <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> ruined body.",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> demands another meal from {GPPHis(i.Unit)} comrades with some clicks and whistles, insisting {GPPHis(i.Unit)} large, smooth, jiggling belly is clearly only fat!",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> immense digestive organs crush and sizzle away <b>{i.Target.Name}</b>, just another thin layer of blubber to be as they slide through the bowels.",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomachs have proved to <b>{i.Target.Name}</b> that a whale's appetite won't be denied!",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> giggles as {GPPHe(i.Unit)} feel <b>{i.Target.Name}</b> finally succumb to digestion... yet another shark bested by an orca!",
            actorRace: Race.FeralOrcas, targetRace: Race.FeralSharks, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> giggles as {GPPHe(i.Unit)} feel <b>{i.Target.Name}</b> finally succumb to digestion... yet another shark bested by an orca!",
            actorRace: Race.FeralOrcas, targetRace: Race.Sharks, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> giggles as {GPPHe(i.Unit)} feel <b>{i.Target.Name}</b> finally succumb to digestion... yet another shark bested by an orca!",
            actorRace: Race.FeralOrcas, targetRace: Race.Zoey, priority: 9),
            
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body melts down surprisingly smoothly in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}!",
            targetRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"The {GetRaceDescSingl(i.Target)} meets {GPPHis(i.Target)} match at last, blubber bubbling away in the bottom of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}.  <b>{i.Target.Name}</b> is no more.",
            targetRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> whimpers as {GPPHis(i.Target)} huge body sizzles away, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} taking down the huge {GetRaceDescSingl(i.Target)}!",
            targetRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"Embarrassingly, <b>{i.Target.Name}</b> meets {GPPHis(i.Target)} end in a {GetRaceDescSingl(i.Target)}, much to the pleasure of <b>{i.Unit.Name}</b>!",
            targetRace: Race.FeralOrcas, actorRace: Race.FeralSharks, priority: 9),
            new EventString((i) => $"Embarrassingly, <b>{i.Target.Name}</b> meets {GPPHis(i.Target)} end in a {GetRaceDescSingl(i.Target)}, much to the pleasure of <b>{i.Unit.Name}</b>!",
            targetRace: Race.FeralOrcas, actorRace: Race.Sharks, priority: 9),
            new EventString((i) => $"Embarrassingly, <b>{i.Target.Name}</b> meets {GPPHis(i.Target)} end in a {GetRaceDescSingl(i.Target)}, much to the pleasure of <b>{i.Unit.Name}</b>!",
            targetRace: Race.FeralOrcas, actorRace: Race.Zoey, priority: 9),
            //RwuMercenary Digest
            new EventString((i) => $"As <b>{i.Target.Name}</b> falls prey to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}. <b>{i.Unit.Name}</b> smirks and marks a notch on {GPPHis(i.Unit)} weapon.",
            conditional: s => s.Unit.HasWeapon, actorRace: Race.RwuMercenaries, priority: 9),
            new EventString((i) => $"\"Finally! Now I can actually focus on {GetRandomStringFrom("fighting", "combat", "the battle")} without you thrashing about anymore.\" <b>{i.Unit.Name}</b> says as <b>{i.Target.Name}</b> meets {GPPHis(i.Target)} end in {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}.",
            actorRace: Race.RwuMercenaries, priority: 9),
            new EventString((i) => $"As <b>{i.Target.Name}</b> falls prey to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()} {GPPHis(i.Target)} last thoughts are \"Why isn't our armor digestion resistant!?\"",
            targetRace: Race.RwuMercenaries, priority: 9),
        };

        AbsorptionMessages = new List<EventString>()
        {
            //generic
            new EventString((i) => $"<b>{i.Unit.Name}</b> enjoys the added weight of <b>{i.Target.Name}</b> on {GPPHis(i.Unit)} body.", 
            priority: 8),
            new EventString((i) => $"The last of <b>{i.Target.Name}</b> is absorbed into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {i.preyLocation.ToSyn()}.", 
            priority: 8),
            new EventString((i) => $"<b>{i.Target.Name}</b> is now completely gone, soon to be forgotten as just another meal.", 
            priority: 8),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> nutrients are now all <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b>", 
            priority: 8),
            //Creds to Cartography
            new EventString((i) => $"With <b>{PotentialNextPrey(i.Unit).Name}</b> fully absorbed, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b>- what do you mean that wasn't {GPPHis(i.Target)} name? It's not like it matters, {GPPHeIsAbbr(i.Target)} {GetRaceDescSingl(i.Unit)} fat now.",
            priority: 8, conditional: s=> (PotentialNextPrey(s.Unit).Name != "You, the player")),


            //First-timer absorption
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body absorbs the last of <b>{i.Target.Name}</b> {GPPHe(i.Unit)} breathes a sigh of relief; satisfied from finishing off {GPPHis(i.Unit)} first meal.", 
            priority: 10, conditional: s => FirstTimeAbsorption(s)),
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body absorbs the last of <b>{i.Target.Name}</b> {GPPHe(i.Unit)} feels like a true predator; proud of finishing {GPPHis(i.Unit)} first meal.", 
            priority: 10, conditional: s => FirstTimeAbsorption(s)),
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> belly absorbs the last of <b>{i.Target.Name}</b> the {GetRandomStringFrom("greenhorn", "newbie", "rookie")} pred lets out an enormous {GetRandomStringFrom("belch", "burp")} and blushes profusely; surpised that they could even make such a loud sound.", 
            priority: 10, conditional: s => FirstTimeAbsorption(s) && CanBurp(s) && InStomach(s)),

            //Weight gain generic
            new EventString((i) => $"<b>{i.Unit.Name}</b> smirks, noticing {GPPHis(i.Unit)} assets feel heavier after absorbing <b>{i.Target.Name}</b>.", 
            priority: 8, conditional: WeightGain),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slaps {GPPHis(i.Unit)} ass, enjoying its newfound roundness and wobbliness.", 
            priority: 8, conditional: s => WeightGain(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> checks {GPPHis(i.Unit)} new curves, wondering if <b>{AttractedWarrior(i.Unit)}</b> would find {GPPHim(i.Unit)} more attractive now.", 
            priority: 8, conditional: s=> WeightGain(s) && ReqOSW(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slaps {GPPHis(i.Unit)} newly made flab with a laugh ", 
            actorRace: Race.Hippos, priority: 9, conditional: WeightGain),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lifts {GPPHis(i.Unit)} belly and drops it with a bounce, it being pudgier after absorbing <b>{i.Target.Name}</b>.", 
            priority: 8, conditional: s => WeightGain(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> caresses {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} now that <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> substance has become part of it.", 
            priority: 8, conditional: WeightGain),
            new EventString((i) => $"<b>{i.Unit.Name}</b> enjoys kneading {GPPHis(i.Unit)} {i.preyLocation.ToSyn()} with its added heft from <b>{i.Target.Name}</b>, but wishes <b>{PotentialNextPrey(i.Unit).Name}</b> would add to it even more", 
            priority: 8, conditional: s=> WeightGain(s) && (CanAddressPlayer(s) || PotentialNextPrey(s.Unit).Name != "You, the player" )),

            //stomach-exclusive
            new EventString((i) => $"With <b>{i.Target.Name}</b> all sucked up by <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> intestines, {GPPHe(i.Unit)} immediately misses the sloshy feeling and looks around for {GPPHis(i.Unit)} next meal", 
            priority: 9, conditional: InStomach),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach flattens, having absorbed the last of <b>{i.Target.Name}</b>.", 
            priority: 9, conditional: InStomach),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach flattens, having absorbed the last of - what was {GPPHis(i.Target)} name, again?", 
            priority: 9, conditional: InStomach),
            new EventString((i) => $"Gurgling gives way to silence, as last bits of <b>{i.Target.Name}</b> find themselves a better purpose - to provide <b>{i.Unit.Name}</b> with nutrients.", 
            priority: 9, conditional: InStomach),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> belly finally contracts as if <b>{i.Target.Name}</b> never existed.", 
            priority: 9, conditional: InStomach),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> belly finally contracts as if - what was {GPPHis(i.Target)} name, again? never existed.", 
            priority: 9, conditional: InStomach),

            //Scat disposal
            new EventString((i) => $"<b>{i.Unit.Name}</b> enjoys feeling the weight of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> remains {GetRandomStringFrom("sliding free of", "sliding out of", "squeezing out of", "slipping out of", "falling from", "falling out of", "escaping", "leaving")} {GPPHis(i.Unit)} {GetRandomStringFrom("ass", "anus", "butt", "rectum", "anal sphincter", "booty", "backside", "rear", "rear end")}.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> takes a lewd pleasure in <b>{i.Target.Name}</b> {GetRandomStringFrom("sliding free of", "sliding out of", "squeezing out of", "slipping out of", "falling from", "escaping", "leaving")} {GPPHis(i.Unit)} {GPPHim(i.Unit)} {GetRandomStringFrom("ass", "anus", "butt", "rectum", "anal sphincter")} as several {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} turds.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> smirks, noticing {GPPHis(i.Unit)} ass feels heavier after absorbing and eliminating <b>{i.Target.Name}</b>, who is now just {GetRandomStringFrom("scat", "shit", "crap", "waste", "dung", "excrement", "feces")} on the ground.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> takes a quick {GetRandomStringFrom("dump", "shit", "crap")} to purge <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} remains from {GPPHis(i.Unit)} guts.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("deposits", "expels", "shits out", "craps out", "squeezes out", "dumps out")} a large, steamy batch of {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "fragrant", "steamy", "steaming", "heavy", "slimy", "fresh", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRandomStringFrom("shit", "waste", "turds", "scat", "crap", "brown logs", "manure")}. <b>{i.Target.Name}</b> had been looking for an escape while trapped in <b>{i.Unit.Name}</b>'s dark stomach, but coming out as a {GetRandomStringFrom("huge log", "bunch", "ton", "large pile")} of {GetRaceDescSingl(i.Unit)} {GetRandomStringFrom("scat", "shit", "crap", "waste", "dung", "droppings")} probably wasn't the plan.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> moans in both disgust and pleasure, feeling <b>{i.Target.Name}</b> {GetRandomStringFrom("squeeze", "slide", "slip", "push", "press", "pass")} through {GPPHis(i.Unit)} colon and out of {GPPHis(i.Unit)} plump {PreyLocStrings.ToSyn(PreyLocation.anal)}.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> presses down on {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}, lolling out {GPPHis(i.Unit)} tongue in relief while letting loose one huge, {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} log of shit. There's <b>{i.Target.Name}</b>...", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{i.Target.Name}</b> is completely digested, dumped out as a {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} pile of {GetRandomStringFrom("shit", "waste", "turds", "scat", "crap", "brown logs", "manure")} behind <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> paws.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{i.Target.Name}</b> finishes digesting in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> bowels, and is promptly eliminated from {GPPHis(i.Unit)} body as {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRaceDescSingl(i.Unit)} {GetRandomStringFrom("scat", "shit", "crap", "waste", "dung", "droppings")}.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> squats to {GetRandomStringFrom("deposit", "expel", "shit out", "crap out", "squeeze out", "dump")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> used-up remains in a {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} pile below {GPPHis(i.Unit)} tail.", 
            priority: 9, conditional: s => Scat(s) && ActorTail(s)),
            new EventString((i) => $"After {GetRandomStringFrom("depositing", "expelling", "shitting out", "crapping out", "squeezing out", "dumping out", "disposing of")} <b>{i.Target.Name}</b> as a nice, {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRandomStringFrom("log", "turd", "brown lump")}, <b>{i.Unit.Name}</b> winks at <b>{PotentialNextPrey(i.Unit).Name}</b>, as if to say \"You're next!\".\n...{GPPHis(i.Unit)} sphincter seems to do the same.", 
            priority: 9, conditional: s=> Scat(s) && (CanAddressPlayer(s) || PotentialNextPrey(s.Unit).Name != "You, the player" )),
            new EventString((i) => $"After {GetRandomStringFrom("depositing", "expelling", "shitting out", "crapping out", "squeezing out", "dumping out", "disposing of")} ...What was {GPPHis(i.Target)} name, again? as a nice, {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRandomStringFrom("log", "turd", "brown lump", "pile")}, <b>{i.Unit.Name}</b> winks at <b>{PotentialNextPrey(i.Unit).Name}</b>, as if to say \"You're next!\".\n...{GPPHis(i.Unit)} sphincter seems to do the same.", 
            priority: 9, conditional: s=> Scat(s) && (CanAddressPlayer(s) || PotentialNextPrey(s.Unit).Name != "You, the player" )),
            new EventString((i) => $"<b>{i.Unit.Name}</b> looks back at the vile mass of <b>{i.Target.Name}</b> that just slid out {GetRandomStringFrom("of", "from")} {GPPHis(i.Unit)} {GetRandomStringFrom("ass", "asscheeks", "buns", "butt", "buttcheeks", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty")}, then at <b>{PotentialNextPrey(i.Unit).Name}</b>, then back at {GPPHis(i.Unit)} {GetRandomStringFrom("dump", "shit", "crap", "turds", "scat", "droppings")}, before licking {GPPHis(i.Unit)} lips at <b>{PotentialNextPrey(i.Unit).Name}.</b>", 
            priority: 9, conditional: s=> Scat(s) && (CanAddressPlayer(s) || PotentialNextPrey(s.Unit).Name != "You, the player" )),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is proud of the {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} mound of {GetRandomStringFrom("shit", "waste", "dung", "scat", "crap", "manure", "excrement")} he turned <b>{i.Target.Name}</b> into, and desires to add <b>{PotentialNextPrey(i.Unit).Name}</b> on top while it's still warm.", 
            priority: 9, conditional: s=> Scat(s) && (CanAddressPlayer(s) || PotentialNextPrey(s.Unit).Name != "You, the player" )),
            new EventString((i) => $"<b>{i.Target.Name}</b> is nothing but {GetRandomStringFrom("a gross brown mass", "stinking turds", "fresh, warm shit", "disgusting waste")} that's now leaving <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("ass", "anus", "butt", "rectum", "anal sphincter")}", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> guts are done with <b>{i.Target.Name}</b>, leaving {GPPHim(i.Target)} to be disposed of as nothing but {GetRandomStringFrom("a gross brown pile", "stinking turds", "fresh, warm shit", "disgusting waste", "a creamy dump")}.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"With a squint and a push from <b>{i.Unit.Name}</b>, <b>{i.Target.Name}</b> manages to achieve {GPPHis(i.Target)} final form as {InfoPanel.RaceSingular(i.Unit)} {GetRandomStringFrom("shit", "waste", "dung", "scat", "crap", "manure", "excrement", "droppings")}.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grunts, and the {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} remains of {GPPHis(i.Unit)} now used-up prey splat onto the ground behind {GPPHim(i.Unit)}. <b>{i.Target.Name}</b> is completely unrecognizable.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"All that's left of <b>{i.Target.Name}</b> is a {InfoPanel.RaceSingular(i.Target)}-sized load of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> feces. Good fight.", 
            priority: 9, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b>: <i>~PFRRRRRT~</i>. <b>{i.Target.Name}</b>: <i>~Splat~</i>", 
            priority: 9, conditional: s => Scat(s) && Farts(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b>: \"Hnng...\". <b>{i.Target.Name}</b>: <i>~Splat~</i>", 
            priority: 9, conditional: s => Scat(s)),
            new EventString((i) => $"A cacophonous fart out of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("ass", "asscheeks", "buns", "butt", "buttcheeks", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty")} {GetRandomStringFrom("heralds", "announces", "signals", "preludes", "plays harbinger to", "plays forerunner to")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} return to the battlefield...", 
            priority: 9, conditional: s => Scat(s) && Farts(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> relieves {GPPHimself(i.Unit)}...\nThe obscene release of gas will have to suffice as <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> eulogy.", 
            priority: 9, conditional: s => Scat(s) && Farts(s)),
            new EventString((i) => $"With the amount of {GetRandomStringFrom("shit", "waste", "turds", "scat", "crap", "brown logs", "manure")} piling up under <b>{i.Unit.Name}</b>' ass, one could think <b>{i.Target.Name}</b> was mostly {GetRandomStringFrom("shit", "waste", "turds", "scat", "crap", "manure")} to begin with.", 
            priority: 9, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> exerts {GPPHimself(i.Unit)}, letting loose one juicy burst of gas, before having <b>{i.Target.Name}</b> emerge and drop out of that same hole to form a pile of {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRandomStringFrom("logs", "turds", "brown lumps", "shit", "scat", "waste", "manure")}", 
            priority: 9, conditional: s => Scat(s) && Farts(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> has been reduced to {GetRandomStringFrom("shit", "waste", "a dump", "scat")} by <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("digestive system", "digestive tract", "hungry belly", "hungry guts", "hungry insides", "greedy belly", "greedy guts", "greedy insides")}.", 
            priority: 9, conditional: s => Scat(s)),
            new EventString((i) => $"Just like that, <b>{i.Target.Name}</b> has been {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously","half-heartedly")} {GetRandomStringFrom("deposited", "expelled", "shat", "crapped", "squeezed", "dumped")} onto the ground as mere {InfoPanel.RaceSingular(i.Unit)} {GetRandomStringFrom("shit", "waste", "turds", "scat", "crap", "manure")}, and <b>{i.Unit.Name}</b> certainly won't remember who {GPPHe(i.Unit)} ate.", 
            priority: 9, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> raises {GPPHis(i.Unit)} tail and closes {GPPHis(i.Unit)} eyes as <b>{i.Target.Name}</b> is finally set free - in a form that not even a mother could recognize.", 
            priority: 9, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("deposits", "expels", "shits", "craps", "squeezes out", "dumps")} a load of <b>{i.Target.Name}</b> onto the floor.  And <i>fuck</i> does {GPPHe(i.Unit)} {GetRandomStringFrom("stink", "smell", "reek")} now!", 
            priority: 9, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> thinks <b>{i.Target.Name}</b> looks better as this neat arrangement of {PreyLocStrings.ScatAdjSyn()} {GetRaceDescSingl(i.Unit)} {PreyLocStrings.ScatSyn()}", 
            priority: 9, conditional: s => Scat(s)),
            new EventString((i) => $"After a bit of a messy {GetRandomStringFrom("dump", "crap", "shit")}, <b>{i.Unit.Name}</b> wonders which {GetRandomStringFrom("turd", "log", "mass")} could be that {InfoPanel.RaceSingular(i.Target)} leader, but can't quite tell.  Shrugging, {GPPHe(i.Unit)} walks away from the {PreyLocStrings.ScatAdjSyn()} {GetRandomStringFrom("mound", "mess", "mass", "pile")} of {PreyLocStrings.ScatSyn()} forever.", 
            priority: 9, conditional: s => Scat(s) && TargetLeader(s)),
            new EventString((i) => $"The friction from <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> remains sliding past {GPPHis(i.Unit)} anal sphincter sends arousing tingles through <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body.", 
            priority: 9, conditional: s => Scat(s) && Lewd(s)),
            
            //New Scat disposal by Flame
            new EventString((i) => $"Log after log of {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRandomStringFrom("shit", "waste", "dung", "scat", "crap")} slide out from <b>{i.Unit.Name}</b>'s ass.  As {GPPHe(i.Unit)} stares back at the foul, ever-growing trophy of waste, {GPPHe(i.Unit)} wonders just who it could've been.  <b>{i.Target.Name}</b>, perhaps?  Someone else?",
            priority: 9, conditional: s => Scat(s)),
            new EventString((i) => $"A shiver ran up <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> spine when the remains of <b>{i.Target.Name}</b> suddenly knocked on {GPPHis(i.Unit)} backdoor.  Squatting quickly, <b>{i.Unit.Name}</b> grunts as a bunch of {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRandomStringFrom("shit", "waste", "dung", "scat", "crap", "manure")} squeezes out from {GPPHis(i.Unit)} ass and piles up behind {GPPHim(i.Unit)}. \"Phew! That's better...\"",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"Feeling the call of nature, <b>{i.Unit.Name}</b> {GetRandomStringFrom("turns around", "squats down,", "bends over,", "stands there,", "quickly crouches,", "crouches down,", "")} spreads {GPPHis(i.Unit)} {GetRandomStringFrom("ass", "asscheeks", "buns", "butt", "buttcheeks", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty")} and relaxes.  A moan escapes {GPPHis(i.Unit)} lips as <b>{i.Target.Name}</b>, now reduced to {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRaceDescSingl(i.Unit)} {GetRandomStringFrom("shit", "waste", "dung", "scat", "crap", "manure")}, {GetRandomStringFrom("slides free of", "slides out of", "squeezes out of", "slips out of", "falls from", "escapes", "leaves")} {GPPHim(i.Unit)} {GetRandomStringFrom("ass", "anus", "butt", "rectum", "sphincter")} and splats heavily on the ground.",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"A {GetRandomStringFrom("naughty", "haughty", "sinful", "devilish", "impish", "rascally", "devious", "mischievous", "wolvish", "sinister", "wicked", "roguish", "playful")} {GetRandomStringFrom("smile", "smirk", "grin")} spreads across <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> face as {GPPHe(i.Unit)} {GetRandomStringFrom("turns around", "squats down", "bends over", "stands there", "quickly crouches", "crouches down", "")} and starts {GetRandomStringFrom("depositing", "expelling", "shitting out", "crapping out", "squeezing out", "dumping out", "pooping out", "disposing of")} the {GetRandomStringFrom("remains", "leftovers", "waste")} of <b>{i.Target.Name}</b> as {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} logs of {GetRandomStringFrom("shit", "waste", "dung", "scat", "crap", "manure")}.  <b>{AttractedWarrior(i.Unit)}</b> waves a hand in front of their face in a vain attempt at dispersing the {GetRandomStringFrom("horrid", "stinky", "unpleasant", "foul", "gross", "nasty", "offputting", "rank", "putrid", "rotten", "mild", "intrusive", "offending", "skunky", "", "")} {GetRandomStringFrom("odor", "smell", "stink", "stench", "miasma", "funk")}.",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> stares at <b>{PotentialNextPrey(i.Unit).Name}</b> {GetRandomStringFrom("unblinking", "naughtily", "haughtily", "sinfully", "devilishly", "impishly", "like a rascal", "deviously", "mischievously", "wolvishly", "with intent", "wickedly", "roguishly", "playfully")} while {GPPHe(i.Unit)} {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "leisurely", "languidly", "passively", "unhurriedly", "slowly", "slothfully", "apathetically", "idly", "languorously", "half-heartedly")} {GetRandomStringFrom("deposits", "expels", "shits out", "craps out", "squeezes out", "dumps out")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("horrid", "stinky", "unpleasant", "foul", "gross", "nasty", "offputting", "rank", "putrid", "rotten", "mild", "intrusive", "offending", "skunky", "", "")} {GetRandomStringFrom("remains", "leftovers", "waste")}.  More and more {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRandomStringFrom("shit", "waste", "dung", "scat", "crap", "manure", "lumps", "logs")} {GetRandomStringFrom("slide free of", "slide out of", "squeeze out of", "slip out of", "fall from", "escape", "leave")} the {GetRaceDescSingl(i.Unit)}'s {GetRandomStringFrom("ass", "asscheeks", "buns", "butt", "buttcheeks", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty")} and {GPPHe(i.Unit)} never once breaks eye contact with {GPPHis(i.Unit)} next target.",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s) && (CanAddressPlayer(s) || PotentialNextPrey(s.Unit).Name != "You, the player" )),
            new EventString((i) => $"<b>{i.Unit.Name}</b> idly drums {GPPHis(i.Unit)} fingers against {GPPHis(i.Unit)} chin as {GPPHe(i.Unit)} {GetRandomStringFrom("casually", "slowly", "passively", "uncaringly", "lackadaisically", "unhurriedly")} {GetRandomStringFrom("deposits", "expels", "shits out", "craps out", "squeezes out", "dumps out", "poops out", "pushes out", "disposes of")} the {GetRandomStringFrom("remains", "remnants", "waste", "refuse", "leftovers", "dregs")} of {GPPHis(i.Unit)} former prey <b>{i.Target.Name}</b>, hoping that {GPPHis(i.Unit)} next {GetRandomStringFrom("meal", "meal", "snack", "snack", "morsel", "appetizer")} will be equally as delicious as this one was.",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            //New Scat disposal w/ dialogue by Flame
            new EventString((i) => $"\"Finally ready to come out, huh?  {GetRandomStringFrom("Sure took your time in there", "About bloody time", "Thought you'd never come out", "Feels like you've been in there forever", "Been clogging me up for hours")}{GetRandomStringFrom("...", ".", "!")}\" <b>{i.Unit.Name}</b> said as {GPPHe(i.Unit)} {GetRandomStringFrom("turned around and", "squatted down and", "bent down and", "stood there and", "quickly crouched and", "crouched down and", "")} {GetRandomStringFrom("expelled", "shit out", "defecated", "crapped out", "squeezed out", "pooped out")} the {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} remains of <b>{i.Target.Name}</b>, forming a gross pile of waste on the ground behind {GPPHim(i.Unit)}. \" And now for the rest of your {GetRandomStringFrom("friends", "buddies", "comrades", "pals", "teammates")}{GetRandomStringFrom("...", ".", "!", "~")}\"",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"{GetRandomStringFrom("Fuck", "Mmm", "Mmm fuck", "Ahh", "Mmmffyeah", "Mmm yeah", "Mmmf", "Mmmyeah")}~ Slide on outta me, {InfoPanel.RaceSingular(i.Target)}!\" <b>{i.Unit.Name}</b> said {GetRandomStringFrom("naughtily", "haughtily", "sinfully", "devilishly", "impishly", "like a rascal", "deviously", "mischievously", "wolvishly", "wickedly", "playfully")}, reveling in the feeling of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} remains {GetRandomStringFrom("sliding free of", "sliding out of", "squeezing out of", "slipping out of", "falling from", "escaping", "leaving", "dropping from", "pouring from", "surging from")} {GPPHis(i.Unit)} {GetRandomStringFrom("ass", "anus", "butt", "rectum", "sphincter")}.  \"Nothing but {InfoPanel.RaceSingular(i.Unit)} {GetRandomStringFrom("shit", "waste", "scat", "crap", "manure", "turds")} now~\"" ,
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> and <b>{AttractedWarrior(i.Unit)}</b> were chatting {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "lazily", "passively", "apathetically", "idly")} when all of a sudden the recently digested prey inside of <b>{i.Unit.Name}</b> demanded their freedom.\n\"So I says to {GetRandomStringFrom("him", "her", "them")} I says-- Oh, hang on a sec. Lemme just...\" <b>{i.Unit.Name}</b> interrupts {GPPHimself(i.Unit)}, {GetRandomStringFrom("squats down,", "bends over,", "stands there,", "quickly crouches,", "")} and unceremoniously {GetRandomStringFrom("deposits", "expels", "shits out", "craps out", "squeezes out", "dumps out")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} remains {GetRandomStringFrom("in a neat pile", "all over the ground")} at {GPPHis(i.Unit)} feet.  The warrior's companion is utterly dumbfounded at what just happened.\n\"Whew!  Sorry, had to {GetRandomStringFrom("shit", "poop", "crap", "take a dump", "relieve myself", "squeeze out a loaf")} {GetRandomStringFrom("real", "really")} {GetRandomStringFrom("quick", "quick there", "bad", "bad there")}.  Now where was I?\" <b>{i.Unit.Name}</b> carried on like nothing had even occurred.",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"{GetRandomStringFrom("Fuck", "Mmm", "Mmm fuck", "Ahh", "Mmmffyeah", "Mmm yeah", "Mmmf", "Mmmyeah")}, <b>{i.Target.Name}</b>... You feel so good sliding out of my {GetRandomStringFrom("ass", "butt", "rump", "rear", "rear end", "backside", "behind", "booty")}~\" <b>{i.Unit.Name}</b> moans while they {GetRandomStringFrom("defecate", "deposit", "expel", "shit out", "crap out", "squeeze out", "dump out")} the {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRandomStringFrom("remains", "leftovers", "waste")} of their recently digested {GetRaceDescSingl(i.Target)} prey. \"Kinda wish I could {GetRandomStringFrom("churn", "gurgle", "digest", "dissolve", "liquify", "melt", "eat", "devour", "vore", "gobble", "swallow", "gulp", "wolf")} you all over again... But you're just {GetRandomStringFrom("shit", "waste", "scat", "crap", "manure", "turds", "some smelly logs")} now.\"",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"{GetRandomStringFrom("Hnng- ", "Hrrf- ", "Ugh- ", "C-", "Guh- ")}Come on out now, <b>{i.Target.Name}</b>!\" <b>{i.Unit.Name}</b> grunted as {GPPHe(i.Unit)} struggled to {GetRandomStringFrom("expel", "shit out", "crap out", "squeeze out", "dump out", "force out", "push out")} the poor {GetRaceDescSingl(i.Target)}'s {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRandomStringFrom("remains", "leftovers", "waste")}. \"Gotta make room in there for all your {GetRandomStringFrom("friends", "buddies", "comrades", "pals")}, after all~\"",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"Feeling the call of nature, <b>{i.Unit.Name}</b> {GetRandomStringFrom("turns around", "squats down,", "bends over,", "stands there,", "quickly crouches,", "crouches down,", "")} spreads {GPPHis(i.Unit)} {GetRandomStringFrom("ass", "asscheeks", "buns", "butt", "buttcheeks", "cheeks", "rear", "rear end", "hindquarters", "backside", "behind", "booty")} and relaxes.  A moan escapes {GPPHis(i.Unit)} lips as <b>{i.Target.Name}</b>, now reduced to {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "freshly churned", "messy", "disgusting", "filthy", "stinky", "odorous", "fetid", "rank", "rancid", "vile", "putrid", "skunky")} {GetRaceDescSingl(i.Unit)} {GetRandomStringFrom("shit", "waste", "dung", "scat", "crap", "manure")}, {GetRandomStringFrom("slides free of", "slides out of", "squeezes out of", "slips out of", "falls from", "pours from", "surges out of", "escapes", "leaves")} {GPPHis(i.Unit)} {GetRandomStringFrom("ass", "anus", "butt", "rectum", "sphincter")} and splats heavily on the ground. \"There really is nothing better than {GetRandomStringFrom("dropping off", "expelling", "squeezing out", "pushing out", "pooping out", "crapping out", "dumping", "shitting out", "disposing of")} your enemies after a hard battle~\"",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Huh? <b>{i.Target.Name}</b>? Oh sure, {GPPHe(i.Unit)}'s right over there.\" <b>{i.Unit.Name}</b> turns and points to a nearby {GetRandomStringFrom("pile", "hill", "mound", "mass")} of {PreyLocStrings.ScatAdjSyn()} {PreyLocStrings.ScatSyn()}. \"{GetRandomStringFrom("They stink now, right? Wrecked my ass on the way out too...", "Wish I could gurgle 'em all over again, but alas...", "Sorry! I know you wanted to shit 'em out yourself, but orders are orders!", "Felt <i>soo</i> good on the way out! My butt's still tingling~", "Not even a decent dump, and tasted fucking awful too!", "Look at the size of it! They must've been mostly shit to begin with...", "Been wanting to turn 'em into shit for a while now.")}\"",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"{GetRandomStringFrom("G-Gods be good...!", "H-Holy crap...!", "Sweet mother of...!", "Gah!  Fuck...!", "Ugh... Come <i>on</i>...!")}\" <b>{i.Unit.Name}</b> gasped breathlessly as more and more of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ScatAdjSyn()} remains surged forth from the poor {GetRaceDescSingl(i.Unit)}'s abused {GetRandomStringFrom("butt", "ass", "asshole", "rear", "anus", "tush", "backside", "rear-end")} and piled up behind {GPPHim(i.Unit)}. \"{GetRandomStringFrom("Just how much of you is <i>left</i> up there?!", "Fucking hell, did my guts absorb <i>nothing</i> from you?!", "I suppose I should be grateful you didn't clog me up instead...", "Guess I shouldn't be surprised. Trash like you was <i>bound</i> to mess up my insides.", "This is why I shouldn't eat junk food...", "Should've known you'd be mostly shit. You certainly didn't <i>look</i> much better before I digested you, anyway.", "Woof, you are tearing my ass <i>up!</i> I gotta find more meals like you!", "Haa~ It feels so good to be empty again!")}\"",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"Looking for <b>{i.Target.Name}</b>? {GetRandomStringFrom("Let me show you where they went.", "I have an idea of where they went.", "Goodness, where <i>could</i> they have gone?", "I think they're on their way back, actually.", "Hang around, they'll be back in a sec.")}\" <b>{i.Unit.Name}</b> said with a{GetRandomStringFrom(" sultry", " cocky", " confident", " knowing", "n evil", " rakish", " roguish")} smirk, then turned around and presented {GPPHis(i.Unit)} newly plumped up {GetRandomStringFrom("butt", "ass", "rear", "tush", "backside", "rear-end")}. \"{GetRandomStringFrom("Watch closely now!", "Pay attention now!", "Don't blink or you might miss them!", "They're right here! Just gotta let em out~", "Oh, here they come now!", "Oh! I remember now~")}\" \nWith a {GetRandomStringFrom("light", "tiny", "happy", "content")} {GetRandomStringFrom("grunt", "sigh", "moan", "hum", "huff")} of satisfaction, the {GetRaceDescSingl(i.Unit)} spreads {GPPHis(i.Unit)} {GetRandomStringFrom("butt", "cheeks", "ass", "buttocks", "rear", "anus", "tush", "backside", "rear-end")} wide and slowly {GetRandomStringFrom("dumps", "poops out", "craps out", "shits", "expels", "disposes of", "squeezes out", "pushes out", "forces out")} the {PreyLocStrings.ScatAdjSyn()} {GetRandomStringFrom("unwanted", "useless", "worthless", "used-up")} {GetRandomStringFrom("remains", "remnants", "waste", "refuse", "leftovers", "dregs")} of the recently {GetRandomStringFrom("digested", "gurgled", "churned", "eaten", "preyed upon", "devoured", "vored")} <b>{i.Target.Name}</b>, which splat into a {GetRandomStringFrom("hefty", "heavy", "thick", "wide", "big", "huge", "tall")} pile of {PreyLocStrings.ScatSyn()} behind {GPPHim(i.Unit)}. \n\"{GetRandomStringFrom("They look much better now, right?", "Ahh~ There we go! I knew we'd find 'em.", "Safe and sound! ...Okay, maybe not safe hehe~", "Anyone else you'd like me to find? I just <i>love</i> helping out!", "Phew! Sorry, they didn't use to smell like... <i>that!</i>", "Hang around a little longer and I'll have more people for you to find~", "What do you think? Churned 'em up good, huh?")}\"",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"\"You made for a lovely {GetRandomStringFrom("meal", "meal", "snack", "snack", "treat", "treat", "dessert", "lunch", "dinner", "breakfast", "morsel", "appetizer", "hors d'oeuvre", "entree", "bite to eat", "pick-me-up", "boost of energy")}, <b>{i.Target.Name}</b>.\" <b>{i.Unit.Name}</b> says with a pleasured expression as {GPPHe(i.Unit)} stands and turns around, grinning down at the fresh pile of {PreyLocStrings.ScatSyn()} {GPPHe(i.Unit)} just made. \"...And a lovely {GetRandomStringFrom("dump", "shit", "crap", "poop", "bowel movement")} {GetRandomStringFrom("too~", "as well~", "also~", "hehe~", "heh~")}\"",
            priority: 9, conditional: s => Scat(s) && ActorHumanoid(s)),
            new EventString((i) => $"<i><b>{PreyLocStrings.RandomFartSFX()}</b></i> comes the telltale sound from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("ass","asshole","anus","butt","buttcheeks","booty","rear","rear-end","backside")}, indicating that {GPPHis(i.Unit)} {GetRandomStringFrom("greedy", "hungry", "mighty", "powerful")} {GetRandomStringFrom("guts","insides","innards","intestines","bowels")} have finished {PreyLocStrings.DigestingVerbSyn()} <b>{i.Target.Name}</b>. \n\"{GetRandomStringFrom("Whoops,", "Oops,", "Oh my,", "Goodness,", "Wow,", "Whoa,", "Oof,", "Woof,", "Hehe,", "Heh,", "Hah,", "Heehee,")} {GetRandomStringFrom("excuse me", "pardon me", "sorry", "apologies", "I'm sorry", "my bad")}{GetRandomStringFrom("!", "~", "...")}\" The flatulent {InfoPanel.RaceSingular(i.Unit)} {GetRandomStringFrom("said", "laughed", "giggled", "mused")}, waving a hand in front of {GPPHis(i.Unit)} {GetRandomStringFrom("face", "nose")}. \"Must've been {GetRandomStringFrom("somebody", "someone", "some bitch", "some fool", "that nerd")} I ate~ {GetRandomStringFrom("Guess I'd better let you out now", "Let's go find a hole to dump you in", "Time to shit you out", "Let's see how big of a turd you became", "It's gonna feel so good squeezing you out", "Let's find a quiet spot to crap you out")}{GetRandomStringFrom("~", "!", ".", "...")}\"",
            priority: 9, conditional: s => Scat(s) && Farts(s) && ActorHumanoid(s)),
            //New Fart disposal w/ dialogue by Flame
            new EventString((i) => $"<i><b>{PreyLocStrings.RandomFartSFX()}</b></i> comes the telltale sound from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("ass","asshole","anus","butt","buttcheeks","booty","rear","rear-end","backside")}, indicating that {GPPHis(i.Unit)} {GetRandomStringFrom("greedy", "hungry", "mighty", "powerful")} {GetRandomStringFrom("guts","insides","innards","intestines","bowels")} have finished {PreyLocStrings.DigestingVerbSyn()} <b>{i.Target.Name}</b>. \n\"{GetRandomStringFrom("Whoops,", "Oops,", "Oh my,", "Goodness,", "Wow,", "Whoa,", "Oof,", "Woof,", "Hehe,", "Heh,", "Hah,", "Heehee,")} {GetRandomStringFrom("excuse me", "pardon me", "sorry", "apologies", "I'm sorry", "my bad")}{GetRandomStringFrom("!", "~", "...")}\" The flatulent {InfoPanel.RaceSingular(i.Unit)} {GetRandomStringFrom("said", "laughed", "giggled", "mused")}, waving a hand in front of {GPPHis(i.Unit)} {GetRandomStringFrom("face", "nose")}. \"Must've been {GetRandomStringFrom("somebody", "someone", "some bitch", "some fool", "that nerd")} I ate~\"",
            priority: 9, conditional: s => Farts(s) && ActorHumanoid(s)),
            
            
            // Diaper Disposal
            new EventString((i) => $"<b>{i.Unit.Name}</b> lowers {GPPHis(i.Unit)} body in a squat like position, letting {GPPHis(i.Unit)} diaper droop with the remains of <b>{i.Target.Name}</b>", priority: 9, conditional: Diaper),
            new EventString((i) => $"<b>{i.Unit.Name}</b> begins to blush as they pause in place, a foul smell eminating from {GPPHis(i.Unit)} lower reigon as {GPPHis(i.Unit)} pants fill up with <b>{i.Target.Name}</b>", priority: 9, conditional: Diaper),
            new EventString((i) => $"Raising {GPPHis(i.Unit)} butt, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> diaper begins to balloon out from behind them, the mush of <b>{i.Target.Name}</b> filling out the garment.", priority: 9, conditional: Diaper),
            new EventString((i) => $"With flushed face and puffed cheeks, <b>{i.Unit.Name}</b> begins to push hard, {GPPHis(i.Unit)} diaper put on filling with poop made from <b>{i.Target.Name}</b>", priority: 9, conditional: Diaper),
            new EventString((i) => $"<b>{i.Unit.Name}</b> freezes in place, {GPPHis(i.Unit)} bowels not able to hold any more of <b>{i.Target.Name}</b>, pushing them out with a large FLARMPF!", priority: 9, conditional: Diaper),
            new EventString((i) => $"{GetRandomStringFrom("BLORTCH!", "SPLARTCH!", "FLORMPF!")} Thats the end of <b>{i.Target.Name}</b>...", priority: 9, conditional: Diaper),
            new EventString((i) => $"The only thing that someone could use to tell that <b>{i.Target.Name}</b> was here is a taped up diaper stinking up the area around it...", priority: 9, conditional: Diaper),
            new EventString((i) => $"The pressure building in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach causes {GPPHim(i.Unit)} to take a pause and dump their diaper full of <b>{i.Target.Name}</b>.", priority: 9, conditional: Diaper),
            new EventString((i) => $"<b>{i.Unit.Name}</b> puts {GPPHis(i.Unit)} diaper to good use, storing <b>{i.Target.Name}</b> in the crinkling garment.", priority: 9, conditional: Diaper),
            new EventString((i) => $"After cleaning themselves up, <b>{i.Unit.Name}</b> hoists up the {GetRandomStringFrom("full", "smelly", "stinky")} diaper of <b>{i.Target.Name}</b>, flaunting them off like a trophy.", priority: 9, conditional: Diaper),
            new EventString((i) => $"<b>{i.Unit.Name}</b> feels pressure building in {GPPHis(i.Unit)} lower reigon, so they duck behind a bush and let nature do the rest, gravity pushing <b>{i.Target.Name}</b> into the diaper.", priority: 9, conditional: Diaper),
            new EventString((i) => $"<b>{i.Unit.Name}</b> feels a rush of <b>{i.Target.Name}</b> entering {GPPHis(i.Unit)} bowels. In a panic, {GPPHe(i.Unit)} pull out an emergency diaper and tape it onto {GPPHimself(i.Unit)}, sparing {GPPHis(i.Unit)} pants from a messy disaster.", priority: 9, conditional: Diaper),
            new EventString((i) => $"Pushing <b>{i.Target.Name}</b> out into your diaper is quite relieveing, as <b>{i.Unit.Name}</b> finds out after dumping them.", priority: 9, conditional: Diaper),
            new EventString((i) => $"The benefits of a diaper in the midst of battle are seen, as <b>{i.Unit.Name}</b> pushes out the last bits of <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} diaper while looking for another target.", priority: 9, conditional: Diaper),
            new EventString((i) => $"Wearing a diaper is providing useful, as <b>{i.Unit.Name}</b> is using the extra mass in their padding to fend off <b>{i.Target.Name}</b>'s old friends.", priority: 9, conditional: Diaper),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hopes that they won't get a rash from wearing <b>{i.Target.Name}</b> too long...", priority: 9, conditional: Diaper),
            new EventString((i) => $"<b>{i.Unit.Name}</b> raises a leg and lets {GPPHis(i.Unit)} tounge roll as the diaper droops with the poopy remnants of <b>{i.Target.Name}</b>", priority: 9, conditional: Diaper),
            new EventString((i) => $"Squishing is heard as <b>{i.Unit.Name}</b> waddles around the battlefiend lugging <b>{i.Target.Name}</b> along, looking for a changing station.", priority: 9, conditional: Diaper),
            new EventString((i) => $"<b>{i.Target.Name}</b> is punished for calling a diaper a 'nappy'. It is what they deserved for using such a stupid name, so they will remain in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> 'nappy' for a while.", priority: 9, conditional: Diaper),
            new EventString((i) => $"<b>{i.Unit.Name}</b> is worried they'll be treated like a toddler for carrying around <b>{i.Target.Name}</b> in their diaper.", priority: 9, conditional: Diaper),
            new EventString((i) => $"<b>{i.Unit.Name}</b> places {GPPHis(i.Unit)} hand on the rear of {GPPHis(i.Unit)} diaper. The padding {GetRandomStringFrom("Squelching", "Squishing", "Smushing", "Mushing")} under the pressure.", priority: 9, conditional: Diaper),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> lifts up {GPPHis(i.Unit)} butt, {GPPHe(i.Unit)} can't help but exclaim what {GPPHe(i.Unit)} did to <b>{i.Target.Name}</b> as they push them out.", priority: 9, conditional: Diaper),
            new EventString((i) => $"Its hard to tell if <b>{i.Unit.Name}</b> only just filled {GPPHis(i.Unit)} diaper with the remains of <b>{i.Target.Name}</b>, or have been using it intermittedly.", priority: 9, conditional: Diaper),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hides the fact {GPPHe(i.Unit)} have just been filling their diaper on their own by pushing <b>{i.Target.Name}</b> out with the rest of {GPPHis(i.Unit)} mess as well.", priority: 9, conditional: Diaper),
                //Those who fly and use diapers
            new EventString((i) => $"A diaper bomb is dropped on the field, with <b>{i.Target.Name}</b>'s name on its front. <b>{i.Unit.Name}</b> hopes this is a warning to the enemies.", priority: 9, conditional: s => Diaper(s) && s.Unit.HasTrait(Traits.Flight)),
            new EventString((i) => $"Diapers are useful for when you need to go anywhere, even in the air! <b>{i.Unit.Name}</b> is currently pushing out {GPPHis(i.Unit)} last meal as they travel!", priority: 9, conditional: s => Diaper(s) && s.Unit.HasTrait(Traits.Flight)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> drops to the ground with a large {GetRandomStringFrom("Squish", "Squash", "Squelch")} after filling {GPPHis(i.Unit)} diaper with <b>{i.Target.Name}</b>.", priority: 9, conditional: s => Diaper(s) && s.Unit.HasTrait(Traits.Flight)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sticks out like a sore thumb with a diaper that big. But {GPPHe(i.Unit)} don't care.", priority: 9, conditional: s => Diaper(s) && s.Unit.HasTrait(Traits.Flight)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't get off the ground with <b>{i.Target.Name}</b> weighing them down.", priority: 9, conditional: s => Diaper(s) && s.Unit.HasTrait(Traits.Flight)),
                //Diapers and tails
            new EventString((i) => $"<b>{i.Unit.Name}</b> holds onto {GPPHis(i.Unit)} tail as they {GetRandomStringFrom("push", "strain")} <b>{i.Target.Name}</b> into {GPPHis(i.Unit)} diaper.", priority: 9, conditional: s => Diaper(s) && ActorTail(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail flags, signaling {GPPHe(i.Unit)} are about to poop themselves.", priority: 9, conditional: s => Diaper(s) && ActorTail(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail covers up {GPPHis(i.Unit)} hindsection, trying to prevent embarrassment from how much they went.", priority: 9, conditional: s => Diaper(s) && ActorTail(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail has a mind of its own, pressing itself against the diaper that <b>{i.Target.Name}</b> made.", priority: 9, conditional: s => Diaper(s) && ActorTail(s)),
                //Since the Bee leaders typically have loyal servants, they'd be quite handy at keeping themselves clean, no?
            new EventString((i) => $"<b>{i.Unit.Name}</b> Calls for the servants to bring forth a fresh diaper for them, growing tired of the stench of <b>{i.Target.Name}</b> sticking to {GPPHis(i.Unit)} butt.", actorRace: Race.Bees, priority: 9, conditional: s => Diaper(s) && ActorLeader(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> strains to raise {GPPHis(i.Unit)} abdomen, calling for workers to help {GPPHim(i.Unit)} raise it out the way of {GPPHis(i.Unit)} expanding diaper.", actorRace: Race.Bees, priority: 9, conditional: s => Diaper(s) && ActorLeader(s) && InStomach(s)),
            new EventString((i) => $"\"Ugh! How insolent of you!\" <b>{i.Unit.Name}</b> exclaims, staring down at the dirty diaper hanging between {GPPHis(i.Unit)} legs. \"To ruin my moment on the battlefield, wh-who gave YOU permission to exit?\"", actorRace: Race.Bees, priority: 9, conditional: s => Diaper(s) && ActorLeader(s) && InStomach(s)),
            new EventString((i) => $"\"GUARDS! bring a change for your queen! You do not want her to get a rash now, do you?\" <b>{i.Unit.Name}</b> called out to thier followers. poor <b>{i.Target.Name}</b> was to be disposed of like the numerous other diapers in the leader's repitoire.", actorRace: Race.Bees, priority: 9, conditional: s => Diaper(s) && ActorLeader(s) && InStomach(s)),
                //Same goes for ants too
            new EventString((i) => $"<b>{i.Unit.Name}</b> Calls for the servants to bring forth a fresh diaper for them, growing tired of the stench of <b>{i.Target.Name}</b> sticking to {GPPHis(i.Unit)} butt.", actorRace: Race.Ants, priority: 9, conditional: s => Diaper(s) && ActorLeader(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> strains to raise {GPPHis(i.Unit)} abdomen, calling for workers to help {GPPHim(i.Unit)} raise it out the way of {GPPHis(i.Unit)} expanding diaper.", actorRace: Race.Ants, priority: 9, conditional: s => Diaper(s) && ActorLeader(s) && InStomach(s)),
            new EventString((i) => $"\"Ugh! How insolent of you!\" <b>{i.Unit.Name}</b> exclaims, staring down at the dirty diaper hanging between {GPPHis(i.Unit)} legs. \"To ruin my moment on the battlefield, wh-who gave YOU permission to exit?\"", actorRace: Race.Ants, priority: 9, conditional: s => Diaper(s) && ActorLeader(s) && InStomach(s)),
            new EventString((i) => $"\"GUARDS! bring a change for your queen! You do not want her to get a rash now, do you?\" <b>{i.Unit.Name}</b> called out to thier followers. poor <b>{i.Target.Name}</b> was to be disposed of like the numerous other diapers in the leader's repitoire.", actorRace: Race.Ants, priority: 9, conditional: s => Diaper(s) && ActorLeader(s) && InStomach(s)),
            
            //Fart disposal
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("ass", "anus", "butt", "rump", "rear", "rear end", "hindquarters", "backside", "behind", "booty")} blows <b>{i.Target.Name}</b> a {GetRandomStringFrom("gassy", "smelly", "stinky", "foul-aired", "odorous", "skunky")} requiem. Looks like {GPPHis(i.Unit)} innards are done with their prey: <b>{i.Target.Name}</b>.", priority: 9, conditional: s => Farts(s) && InStomach(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("ass", "anus", "butt", "rump", "rear", "rear end", "hindquarters", "backside", "behind", "booty")} is eager to announce that <b>{i.Target.Name}</b> is completely used up, and has a loud, satisfying fart to show for it.", priority: 9, conditional: s => Farts(s) && InStomach(s)),
            new EventString((i) => $"R.I.P <b>{i.Target.Name}</b>, Turn {Math.Max(State.World.Turn - (int)(Math.Pow(i.Target.Level,1.5)/2), 1)} - Turn {State.World.Turn}. Once Intrepid member of the {InfoPanel.RaceSingular(State.World?.GetEmpireOfSide(i.Target.Side))} Empire military forces, now an assfull of {InfoPanel.RaceSingular(i.Unit)} {GetRandomStringFrom("farts", "gas", "toots", "stink", "braps")}" + (Scat(i) ? $" and {GetRandomStringFrom("nasty", "creamy", "warm", "greasy", "foul", "gross", "thick and brown", "fragrant", "steamy", "steaming", "heavy", "slimy", "messy", "disgusting", "filthy")} {GetRandomStringFrom("shit", "waste", "scat", "crap", "manure", "turds", "logs")}" : $""), // Arbitrary formula arbitrarily seeking to correlate level with time alive in an arbitrary manner
            priority: 9, conditional: s => InStomach(s) && Farts(s) && TargetHumanoid(s) && !State.GameManager.PureTactical),
            new EventString((i) => $"<b>{i.Unit.Name}</b> passes gas – <b>{i.Target.Name}</b> passes on to the next life.", priority: 9, conditional: s => Farts(s) && !Scat(s) && InStomach(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("ass", "asscheeks", "buns", "butt", "buttcheeks", "cheeks", "rump", "rear", "rear end", "hindquarters", "backside", "behind", "booty")} vibrates loudly as it releases <b>{i.Target.Name}</b> as a gust of stink.", priority: 9, conditional: s => Farts(s) && !Scat(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> has become nothing but an obscene melody under <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail", priority: 9, conditional: s => Farts(s) && !Scat(s) && ActorTail(s) && InStomach(s)),
            
            //CV disposal
            new EventString((i) => $"<b>{i.Unit.Name}</b> sways {GPPHis(i.Unit)} hips side to side as what is left of <b>{i.Target.Name}</b> {GetRandomStringFrom("gushes out", "splurts out", "sprays out")} from {GPPHis(i.Unit)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()} all over the ground.", priority: 9, conditional: s => ActorHumanoid(s) && InBalls(s) && !Condoms(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> whistles a merry tune as what is left of <b>{i.Target.Name}</b> {GetRandomStringFrom("gushes", "splurts", "spurts", "sprays", "shoots", "splatters")} from {GPPHis(i.Unit)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()} in long ropes onto the ground.", priority: 9, conditional: s => ActorHumanoid(s) && InBalls(s) && !Condoms(s)),
            new EventString((i) => $"Not being able to hold back anymore, <b>{i.Unit.Name}</b> {GetRandomStringFrom("orgasms", "climaxes", "cums", "nuts")} hard, {GPPHis(i.Unit)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()} expelling in spurts what once was <b>{i.Target.Name}</b>.", priority: 9, conditional: s => InBalls(s) && !Condoms(s)),
            new EventString((i) => $"With nothing to absorb anymore, <b>{i.Unit.Name}</b> cums out the puddle of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> remains.", priority: 9, conditional: s => InBalls(s) && !Condoms(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> demonstrates {GPPHis(i.Unit)} virility to <b>{AttractedWarrior(i.Unit)}</b> by splattering <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> remains across the ground in an impressive puddle.", priority: 9, conditional: s=> InBalls(s) && ReqOSWLewd(s) && !Condoms(s)),
            new EventString((i) => $"With a monstrous roar, <b>{i.Unit.Name}</b> {GetRandomStringFrom("ejaculates", "orgasms", "climaxes", "cums", "nuts")} everywhere, {GPPHis(i.Unit)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()} spurting out the remains of <b>{i.Target.Name}</b> in thick, {GetRandomStringFrom("creamy", "silky", "cummy", "jizzy", "tasty", "lewd", "naughty", "spoogey", "gooey")} globs.",
            actorRace: Race.Dragon, priority: 9, conditional: s => InBalls(s) && !Condoms(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> dick {GetRandomStringFrom("gushes", "splurts", "pumps", "pulses", "spurts", "splatters", "sprays", "shoots")} out the {GetRandomStringFrom("creamy", "silky", "cummy", "jizzy", "tasty", "lewd", "naughty", "spoogey", "gooey", "thick")} remains of <b>{i.Target.Name}</b>. Then {GPPHe(i.Unit)} proudly gazes at the {GetRandomStringFrom("creamy", "silky", "cummy", "jizzy", "tasty", "lewd", "naughty", "spoogey", "gooey")} puddle {GPPHis(i.Unit)} former servant made.",
            actorRace: Race.Dragon, targetRace: Race.Kobolds, priority: 9, conditional: s => InBalls(s) && Friendly(s) && !Condoms(s)),
            new EventString((i) => $"\"Attention {GetRaceDescSingl(i.Target)}!  Look well, for this is what has become of your 'mighty' leader,\" <b>{i.Unit.Name}</b> taunts as {GPPHe(i.Unit)} jerk{SIfSingular(i.Unit)} {GPPHimself(i.Unit)} to orgasm, splattering the {GetRandomStringFrom("creamy", "silky", "cummy", "jizzy", "tasty", "lewd", "naughty", "spoogey", "gooey")} remains of <b>{i.Target.Name}</b> all over the ground in an impressive puddle.",
            priority: 9, conditional: s => ActorLeader(s) && InBalls(s) && TargetLeader(s) && !Condoms(s)),

            //Condom Disposal
            new EventString((i) => $"As what little is left of <b>{i.Target.Name}</b> is {GetRandomStringFrom("gushed","pumped","pulsed","sprayed","splattered","spurted","shot")} out of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}, {GPPHis(i.Target)} {PreyLocStrings.SpoogeAdjSyn()} remains are captured within the semi-translucent rubber of a condom.",
            priority: 9, conditional: s => ActorHumanoid(s) && Condoms(s)),
            new EventString((i) => $"Feeling that <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("digestion","cummification","creamy transformtaion","churning","liquefaction","change into ball batter")} is finally complete, <b>{i.Unit.Name}</b> quickly slips a condom over {GPPHis(i.Unit)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()}-- into which {GPPHe(i.Unit)} promptly {GetRandomStringFrom("cums out","gushes","pumps","sprays","splatters","spurts","shoots")} the ex-{InfoPanel.RaceSingular(i.Target)}'s {PreyLocStrings.SpoogeAdjSyn()} remains.",
            priority: 9, conditional: s => ActorHumanoid(s) && Condoms(s)),
            new EventString((i) => $"After emptying {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} into a condom, <b>{i.Unit.Name}</b> looks down {GetRandomStringFrom("and observes","at", "and grins at")} {GPPHis(i.Unit)} handywork. \"Hmm... Between a {InfoPanel.RaceSingular(i.Target)} and a {GetRandomStringFrom("condom","condom","rubber","rubber","latex","johnny")} filled with {InfoPanel.RaceSingular(i.Unit)} {PreyLocStrings.ToFluid(PreyLocation.balls)}, I gotta say... This is the better look for you, <b>{i.Target.Name}</b>{GetRandomStringFrom(".","~","!")}\"",
            priority: 9, conditional: s => ActorHumanoid(s) && Condoms(s)),
            new EventString((i) => $"After emptying {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} into a condom, <b>{i.Unit.Name}</b> looks down {GetRandomStringFrom("and observes","at", "and grins at")} {GPPHis(i.Unit)} handywork. \"And with <i>that</i>, <b>{i.Target.Name}</b>... Your {GetRandomStringFrom("makeover","transformation","promotion","demotion")} into my {PreyLocStrings.ToFluid(PreyLocation.balls)} is complete{GetRandomStringFrom(".","~","!")}",
            priority: 9, conditional: s => ActorHumanoid(s) && Condoms(s)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> feels {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.balls)} {GetRandomStringFrom("contract","clench","rumble","squeeze")}, {GPPHe(i.Unit)} barely has time to get a condom over {GPPHis(i.Unit)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()} before <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.SpoogeAdjSyn()} remains {GetRandomStringFrom("gush","pump","pulse","spray","splatter","spurt","splurt","shoot","explode")} out into the contraceptive, bloating it near to bursting with {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)}.",
            priority: 9, conditional: s => ActorHumanoid(s) && Condoms(s)),
            new EventString((i) => $"With no fanfare, <b>{i.Unit.Name}</b> fills a condom with what little remains of <b>{i.Target.Name}</b>, who is now a {PreyLocStrings.SpoogeAdjSyn()} load of {InfoPanel.RaceSingular(i.Unit)} {PreyLocStrings.ToFluid(PreyLocation.balls)}.",
            priority: 9, conditional: s => ActorHumanoid(s) && Condoms(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("sighs","howls","breathes","huffs","moans","groans","exhales","cries out")} in {GetRandomStringFrom("bliss","ecstacy","exultation","elation","pleasure","revelry","glee")} as {GPPHe(i.Unit)} fills a condom with what little remains of <b>{i.Target.Name}</b>, who is now a {PreyLocStrings.SpoogeAdjSyn()} load of {InfoPanel.RaceSingular(i.Unit)} {PreyLocStrings.ToFluid(PreyLocation.balls)}.",
            priority: 9, conditional: s => ActorHumanoid(s) && Condoms(s)),
            new EventString((i) => $"\"{GetRandomStringFrom("Mmm","Nnn","Oooh","Ohh","Ahh")} {GetRandomStringFrom("fuck","fuck, that's good","hell yeah","that's it","that's good")}~\" <b>{i.Unit.Name}</b> {GetRandomStringFrom("sighs","howls","breathes","huffs","moans","groans","exhales","cries out")} in {GetRandomStringFrom("bliss","ecstacy","exultation","elation","pleasure","revelry","glee")} as {GPPHe(i.Unit)} fills a condom with what little remains of <b>{i.Target.Name}</b>, who is now a {PreyLocStrings.SpoogeAdjSyn()} load of {InfoPanel.RaceSingular(i.Unit)} {PreyLocStrings.ToFluid(PreyLocation.balls)}. \"Nothing better than {GetRandomStringFrom("cumming","spraying","splurting","spurting","pumping","creaming","spooging")} out your enemies after a long battle{GetRandomStringFrom(".","...","~","!")}",
            priority: 9, conditional: s => ActorHumanoid(s) && Condoms(s)),
            new EventString((i) => $"\"{GetRandomStringFrom("Fuck","Fuuuck","Mmm","Mmm fuck","Ahh","Mmmffyeah","Mmm yeah","Mmmf","Mmmyeah","Nnf","Hnn","Ooh","Ohh")}, {GetRandomStringFrom("just","right","exactly")} where you belong {GetRandomStringFrom("dear","honey","sweetie","love")}{GetRandomStringFrom("~","...","!")}\" <b>{i.Unit.Name}</b> {GetRandomStringFrom("sighs","howls","breathes","huffs","moans","groans","exhales","cries out")} in {GetRandomStringFrom("bliss","ecstacy","exultation","elation","pleasure","revelry","glee")} as {GPPHe(i.Unit)} watches the condom {GetRandomStringFrom("fill up","bloat out","inflate","swell up")} with what little remains of <b>{i.Target.Name}</b>, who is now a {PreyLocStrings.SpoogeAdjSyn()} load of {InfoPanel.RaceSingular(i.Unit)} {PreyLocStrings.ToFluid(PreyLocation.balls)}. \"{GetRandomStringFrom("digested","churned up","gurgled up","melted down","mulched","dissolved","liquified")} and {GetRandomStringFrom("cummed","sprayed","splurted","spurted","pumped","creamed","spooged","dumped")} out into a {GetRandomStringFrom("condom","condom","rubber","rubber","latex","johnny")}{GetRandomStringFrom(".","...","~","!")}",
            priority: 9, conditional: s => ActorHumanoid(s) && Condoms(s)),
            //More Condom Disposal credits to Cartography!
            new EventString((i) => $"As what little is left of <b>{i.Target.Name}</b> is pumped out <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("penis", "dick", "cock", "wang")}, the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Target))} remains are captured within the semi-translucent rubber of a condom.",
            priority: 11, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV),
            new EventString((i) => $"Feeling that <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> digestion is complete, <b>{i.Unit.Name}</b> slips a condom over {GPPHis(i.Unit)} {GetRandomStringFrom("penis", "dick", "cock", "wang")}, which the {GetRaceDescSingl(i.Unit)} promptly pumps <b>{i.Target.Name}</b> into.",
            priority: 11, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV),
            new EventString((i) => $"After emptying {GPPHis(i.Unit)} {GetRandomStringFrom("testies", "balls", "nuts")} into a condom, <b>{i.Unit.Name}</b> observes {GPPHis(i.Unit)} handywork. \"Between a {GetRaceDescSingl(i.Target)} and a condom filled with {GetRaceDescSingl(i.Unit)} {GetRandomStringFrom("cum", "jizz")}, I gotta say, you look better in your new form.\"",
            priority: 11, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV),
            new EventString((i) => $"After emptying {GPPHis(i.Unit)} {GetRandomStringFrom("testies", "balls", "nuts")} into a condom, <b>{i.Unit.Name}</b> observes {GPPHis(i.Unit)} handywork. \"And with that, your makover into my {GetRandomStringFrom("cum", "jizz")} is complete!\"",
            priority: 11, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> feels {GPPHis(i.Unit)} balls contract, {GPPHe(i.Unit)} barely {HasHave(i.Unit)} time to get the condom over {GPPHis(i.Unit)} {GetRandomStringFrom("penis", "dick", "cock", "wang")} before <b>{i.Target.Name}</b> explodes out into the contraceptive.",
            priority: 11, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV),
            new EventString((i) => $"With no fanfare, <b>{i.Unit.Name}</b> fills a condom with what little remains of <b>{i.Target.Name}</b>.",
            priority: 11, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV),
            new EventString((i) => $"With no fanfare, <b>{i.Unit.Name}</b> fills a condom with what little remains of <b>{i.Target.Name}</b>. As {GPPHe(i.Unit)} tie{SIfSingular(i.Unit)} off the condom, {GPPHe(i.Unit)} silently whisper{SIfSingular(i.Unit)} \"You'll make a good trophy.\"",
            priority: 11, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV),
            new EventString((i) => $"With no fanfare, <b>{i.Unit.Name}</b> fills a condom with what little remains of <b>{i.Target.Name}</b>. As {GPPHe(i.Unit)} tie{SIfSingular(i.Unit)} off the condom, {GPPHe(i.Unit)} silently whisper{SIfSingular(i.Unit)} \"Please don't pop on me. I do not need the mess from that.\"",
            priority: 11, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV),
            new EventString((i) => $"With no fanfare, <b>{i.Unit.Name}</b> fills a condom with what little remains of <b>{i.Target.Name}</b>. As {GPPHe(i.Unit)} tie{SIfSingular(i.Unit)} off the condom, {GPPHe(i.Unit)} silently whisper{SIfSingular(i.Unit)} \"Please don't pop on me. I want you as a trophy.\"",
            priority: 11, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV),
            //Slime prey Condom Disposal
            new EventString((i) => $"With no fanfare, <b>{i.Unit.Name}</b> fills a condom with what little remains of <b>{i.Target.Name}</b>. As {GPPHe(i.Unit)} tie{SIfSingular(i.Unit)} off the condom, {GPPHe(i.Unit)} silently whisper{SIfSingular(i.Unit)} \"You don't look to have changed one bit, you {GetRandomStringFrom("silly", "foolish", "stupid")} Slime.\"",
            priority: 12, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV && s.Unit.Race != Race.Slimes, targetRace: Race.Slimes),
            new EventString((i) => $"After emptying {GPPHis(i.Unit)} {GetRandomStringFrom("testies", "balls", "nuts")} into a condom, <b>{i.Unit.Name}</b> observes {GPPHis(i.Unit)} handywork. \"Between a Slime and a condom filled with {GetRaceDescSingl(i.Unit)} {GetRandomStringFrom("cum", "jizz")}, I gotta say, I can't really tell a difference.\"",
            priority: 12, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV && s.Unit.Race != Race.Slimes, targetRace: Race.Slimes),
            new EventString((i) => $"After emptying {GPPHis(i.Unit)} {GetRandomStringFrom("testies", "balls", "nuts")} into a condom, <b>{i.Unit.Name}</b> observes {GPPHis(i.Unit)} handywork. \"Would you look at that. You're still a Slime after all!\"",
            priority: 12, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV && s.Unit.Race != Race.Slimes, targetRace: Race.Slimes),
            new EventString((i) => $"After emptying a former Slime from {GPPHis(i.Unit)} {GetRandomStringFrom("testies", "balls", "nuts")} into a condom, <b>{i.Unit.Name}</b> observes {GPPHis(i.Unit)} handywork. \"Huh... If I didn't know better, I'd almost wonder if you actually got digested at all.\"",
            priority: 12, conditional: s => ActorHumanoid(s) && InBalls(s) && Config.CondomsForCV && s.Unit.Race != Race.Slimes, targetRace: Race.Slimes),

            //BV disposal
            new EventString((i) => $"<b>{i.Unit.Name}</b> leans forward and moans, letting what's left of <b>{i.Target.Name}</b> pour out of {GPPHis(i.Unit)} nipples onto the ground.", priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> breasts finally settle, the streams of milk pouring from them being only remnant of what happened to <b>{i.Target.Name}</b>.", priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> basks in the triumph of {GPPHis(i.Unit)} mighty breasts as <b>{i.Target.Name}</b> is totally absorbed into them without a trace.", priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> cleavage is absorbed into the <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> victorious {i.preyLocation.ToSyn()}. \"Mine are bigger and badder.\", <b>{i.Unit.Name}</b> scorns.", priority: 9, conditional: s => InBreasts(s) && TargetBoobs(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> pants as {GPPHis(i.Unit)} {PreyLocStrings.ToBreastSynPlural()} squirt out the milky remains of <b>{i.Target.Name}</b>, making them wobble pleasurably in the process.", priority: 9, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> thrusts {GPPHis(i.Unit)} {PreyLocStrings.ToBreastSynPlural()} at <b>{AttractedWarrior(i.Unit)}</b>, then gives them a good squeeze to coat {GPPHis(i.Unit)} lover with fresh milk made from <b>{i.Target.Name}</b>.", priority: 9, conditional: s=>InBreasts(s) && ReqOSWLewd(s)),
            new EventString((i) => $"<b>With a loud and tense grunt, <b>{i.Unit.Name}</b> squeezes out the undigested bones of <b>{i.Target.Name}</b> out of {GPPHis(i.Unit)} {i.preyLocation.ToSyn()}, the process well lubricated by gushing breast milk.", priority: 9, conditional: s=>InBreasts(s) && BonesDisposal(s)),

            //Cleaveage Vore disposal
            new EventString((i) => $"One last squirt of fresh milk from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")} signals the total deletion of <b>{i.Target.Name}</b>.",
            priority: 9, conditional: s => CleaveageVore(s)),
            new EventString((i) => $"One last squirt of fresh milk from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")} signals <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> total amnesia of ever having been anything besides <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts", "tit fat", "boob fat", "breast fat")}.",
            priority: 9, conditional: s => CleaveageVore(s)),
            new EventString((i) => $"One last squirt of fresh milk from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")} signals the total assimilation of <b>{i.Target.Name}</b> into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")}.",
            priority: 9, conditional: s => CleaveageVore(s)),
            new EventString((i) => $"One last squirt of fresh milk from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")} signals a point of no return. Oddly, <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> full consiousness and memories rush back to {GPPHim(i.Target)}, not that it particularally matters by this point.",
            priority: 9, conditional: s => CleaveageVore(s)),
            new EventString((i) => $"As a final squirt of fresh milk leaves <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")}, leaving alongside the white liquid is <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> soul, free from an eternity on <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> bust.",
            priority: 9, conditional: s => CleaveageVore(s) && (s.Target.HasTrait(Traits.Eternal) || s.Target.HasTrait(Traits.Reformer) || s.Target.HasTrait(Traits.Reincarnation) || s.Target.HasTrait(Traits.Transmigration) || s.Target.HasTrait(Traits.InfiniteReincarnation) || s.Target.HasTrait(Traits.InfiniteTransmigration) || TargetLeader(s))),
            new EventString((i) => $"As a final squirt of fresh milk leaves <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("tits", "boobs", "breasts")}, leaving alongside the white liquid is a piece of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> soul, free from an eternity on <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> bust, while the rest remains trapped within.",
            priority: 9, conditional: s => CleaveageVore(s) && (s.Target.HasTrait(Traits.Eternal) || s.Target.HasTrait(Traits.Reformer) || s.Target.HasTrait(Traits.Reincarnation) || s.Target.HasTrait(Traits.Transmigration) || s.Target.HasTrait(Traits.InfiniteReincarnation) || s.Target.HasTrait(Traits.InfiniteTransmigration) || TargetLeader(s))),

            //Bone Disposal
            new EventString((i) => $"<b>{i.Unit.Name}</b> takes a lewd pleasure in <b>{i.Target.Name}</b> sliding out of {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.anal)} as clean bleached bones.", priority: 9, conditional: s=> InStomach(s) && BonesDisposal(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> moans in pleasure, feeling <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> bones squeeze out of {GPPHis(i.Unit)} plump {PreyLocStrings.ToSyn(PreyLocation.anal)}.", priority: 9, conditional: s=> InStomach(s) && BonesDisposal(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> finishes digesting in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> bowels, and {GPPHis(i.Target)}'s skeletal remains are promptly eliminated from predator's body.", priority: 9, conditional: s=> InStomach(s) && BonesDisposal(s)),

            //Slimes exclusive
            new EventString((i) => $"The dark lump in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> translucent form disappears completely.", actorRace: Race.Slimes, priority: 10),
            //Aabayx exclusive creds to Cartography!
            new EventString((i) => $"With a {GetRandomStringFrom("lewd", "gross", "odd")} squelching noise, the non-cellular remains of <b>{i.Target.Name}</b> fall from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("anus", "ass", "asshole", "behind")} in a spongy pile.", actorRace: Race.Aabayx, priority: 9),
            new EventString((i) => $"The last viruses from <b>{i.Target.Name}</b> have been intigrated into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> viral matrix. A small *glorp* as the last bit is sucked up into <b>{i.Unit.Name}</b> is <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> legacy.", targetRace: Race.Aabayx, actorRace: Race.Aabayx, priority: 10),
            //Kangaroo pred (pouch vore)
            new EventString((i) => $"As <b>{i.Unit.Name}</b>'s {GetRandomStringFrom("lower torso", "pouch", "marsupium")} shrinks back to its original shape, <b>{i.Unit.Name}</b>'s pouchs entrance unseals, revealing nothing inside, as though <b>{i.Target.Name}</b> never existed.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"As <b>{i.Unit.Name}</b>'s {GetRandomStringFrom("lower torso", "pouch", "marsupium")} shrinks back to its original shape, <b>{i.Unit.Name}</b>'s pouchs entrance unseals, revealing it to be empty save for a pile of crumpled, but otherwise unharmed, clothes. There is no trace of <b>{i.Target.Name}</b>.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slowly pulls open {GPPHis(i.Unit)} pouch, finding nothing inside at all.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            // Todo: Figure this one out
            //new EventString((i) => $"<b>{i.Unit.Name}</b> slowly pulls open {GPPHis(i.Unit)} pouch, finding nothing inside at all. <b>{i.Unit.Name}</b> then refoccuses {GPPHis(i.Unit)} attention on the {battlefield/battle<only used if non-surrendered enemies still remain on the field>}, rapidly forgetting that <b>{i.Target.Name}</b> had ever exsisted.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slowly pulls open {GPPHis(i.Unit)} pouch, finding nothing inside at all. Wait, was that a handprint, pushing outward from the inside lining of the pouch? It's frankly too dark to tell, and even more frankly, <b>{i.Unit.Name}</b> doesn't care.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slowly pulls open {GPPHis(i.Unit)} pouch, finding nothing inside at all, save a pile of crumpled clothes. <b>{i.Unit.Name}</b> pulls them out, and examines them for a moment, before saying \"wrong size,\" and {GetRandomStringFrom("casually", "nonchalantly", "lackadaisically", "unceremoniously", "lazily", "languidly", "passively", "apathetically", "idly", "half-heartedly")} tosses them over {GPPHis(i.Unit)} shoulder.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s pouch unseals, ready to hold more{GetRandomStringFrom(" occupants", " (temporary) occupants", " \"occupants\"")}.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b>'s pouch has shrunk back down to normal size and shape, with no evidence that a {GetRaceDescSingl(i.Target)} had ever been inside.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),
            new EventString((i) => $"With <b>{i.Target.Name}</b> fully absorbed, <b>{i.Unit.Name}</b>'s pouch unseals, revealing not one hint as to what happened to its previous {GetRandomStringFrom("occupant", "tenant")}.", actorRace: Race.Kangaroos, priority: 10, conditional: s=> s.preyLocation == PreyLocation.breasts),

            //Abakhanskya
            new EventString((i) => $"<b>{i.Unit.Name}'s</b> body oozes with a layer of fresh meat. <b>{i.Target.Name}</b> no longer exists.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> is the cause of <b>{i.Unit.Name}'s</b> ass getting just that bit closer to the ground.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> no longer makes <b>{i.Target.Name}'s</b> gut bloat, having been entirely absorbed by her hungry guts.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}'s</b> tits grow taut as <b>{i.Target.Name}</b> is harvested for everything {GPPHe(i.Unit)} had.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}'s</b> intestines have reaped <b>{i.Target.Name}</b> for all {GPPHe(i.Unit)} were worth.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> has been harvested by <b>{i.Unit.Name}'s</b> hungry body.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> has something in common with so many others. What is that thing? They all became food for <b>{i.Unit.Name}</b>.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sighs with a little relief. The bloat <b>{i.Target.Name}</b> caused in her immense belly has finally been alleviated.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> is now just another layer of flesh on <b>{i.Unit.Name}</b>, mixed in with thousands of others.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> has become the fuel for <b>{i.Unit.Name}'s</b> next pheromone belch.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: CanBurp),
            new EventString((i) => $"Who..? Oh, <b>{i.Target.Name}</b>? They no longer exist. Their form now powers <b>{i.Unit.Name}</b>, a commonality they share with thousands before them.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}'s</b> scent is on the air as <b>{i.Unit.Name}</b> rancidly burps.  Any evidence they were ever alive is now floating away on the wind...",
            actorRace: Race.Abakhanskya, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Target.Name}'s</b> new form idly jostles somewhere on <b>{i.Unit.Name}'s</b> titanic form.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> joins entire generations before them in the tradition of enlarging <b>{i.Unit.Name}'s</b> colossal heft.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}'s</b> gut has shrank back to relative normality. All the bloat caused by <b>{i.Target.Name}'s</b> presence in there is gone.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"A mere hiccup from <b>{i.Unit.Name}</b> is all that heralds the last bit of <b>{i.Target.Name}</b> being turned into meat packed behind ebony scales.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> was no different than the rest. {GPPHe(i.Unit)} <i>also</i> went straight to <b>{i.Unit.Name}'s</b> hips.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> thought {GPPHe(i.Unit)} was the exception to the rule. {GPPHis(i.Unit)} fateful final trip through in <b>Aba's</b> growling intestines has told {GPPHim(i.Unit)} otherwise.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}'s</b> destiny has finally been realized.  That destiny was making <b>{i.Unit.Name}'s</b> tits, the ones resting proudly atop the summit of her gut, somehow even more taut.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> gives a toothy grin as her body feels reinvigorated after fully absorbing <b>{i.Target.Name}'s</b> essence.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> is no longer with us. <b>{i.Unit.Name}'s</b> ravenous appetite has claimed yet another lost soul.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"The final page of <b>{i.Target.Name}'s</b> story come to a close. What were the final fords? 'They have become as a texture akin to lard attached to <b>{i.Unit.Name}'s</b> backside'",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"Ebony scales gently shift as the meat gained from harvesting <b>{i.Unit.Name}</b> is packed in behind them. <b>{i.Unit.Name}</b> gives a wolfish grin.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}'s</b> stolen nutrients will help make <b>{i.Unit.Name}'s</b> hide even more pristine.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> briefly hefts her gut. The lack of pressure lets her know that <b>{i.Target.Name}</b> has been fully absorbed.",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"A wet belch stains the air. <b>{i.Target.Name}</b> no longer bloats <b>{i.Unit.Name}'s</b> titanic {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: CanBurp),
            new EventString((i) => $"<b>{i.Unit.Name}</b> smirks as one heralding belch carries the remnant of the now long gone <b>{i.Target.Name}</b>.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => CanBurp(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grins and rumbles with content as her tits drizzle their rich new product. <b>{i.Target.Name}</b>'s harvesting was the catalyst for this creamy bounty.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Lewd(s)),
            new EventString((i) => $"The heavy middle <b>{i.Unit.Name}</b> carries grows soft as <b>{i.Target.Name}</b> has become a lovely amount of fuel for the lady",
            actorRace: Race.Abakhanskya, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> feels her breast for a moment as it swells with the freshly reaped additions from <b>{i.Target.Name}</b> .",
            actorRace: Race.Abakhanskya, priority: 11),
            //Aba flirts
            new EventString((i) => $"<b>{i.Unit.Name}</b> looses a huff as her body thickens up. <b>{AttractedWarrior(i.Unit).Name}</b> watches as that belly oozes its flesh outward with what used to be <b>{i.Target.Name}</b>.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"Turning in place to survey the battlefield, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> extra curvature jostles. <b>{AttractedWarrior(i.Unit).Name}</b> finds it hard not to imagine being pinned beneath all that tonnage.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"Turning in place to survey the battlefield, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> extra curvature jostles. <b>{AttractedWarrior(i.Unit).Name}</b> finds it hard not to imagine being pinned beneath all that tonnage, preferably with their face between her mighty thighs.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWLewd(s)),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> tries to compliment <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> ever-growing frame. The Matron simply laughs and shakes her head. Kids these days!",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"Feeling a swell of courage, <b>{AttractedWarrior(i.Unit).Name}</b> makes an advance to try and romance Abakhanskya, brought on by her burgeoning weight from the recently reaped <b>{i.Target.Name}</b>. They are silently brushed off by Aba however, who eyes them with that dangerous devil's smirk of hers.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slaps the flanks of her swelling curves and chuckles in delight as they wobble. <b>{AttractedWarrior(i.Unit).Name}</b> knows that the indulgent dragoness is enjoying herself considerably out here.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"The wandering eyes of <b>{AttractedWarrior(i.Unit).Name}</b> are drawn to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> figure growing fatter off of the prey she processes. How can one being possibly be this beautiful?",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"When <b>{i.Unit.Name}</b> makes a remark on <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> fate as they're being put to use as little more than nutrition, <b>{AttractedWarrior(i.Unit).Name}</b> feels oddly weak in the legs and hot in the nethers.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWLewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> plays with the fresh softness on her body and laughs about <b>{i.Target.Name}</b> being far more useful here than anywhere else. <b>{AttractedWarrior(i.Unit).Name}</b> can't help but parrot the khatunlao's words as their breathing goes heavy with desire.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWLewd(s)),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> comments on how <b>{i.Target.Name}</b> is far better suited being part of <b>{i.Unit.Name}</b> than being themselves. <b>{i.Unit.Name}</b>, seemingly jokingly, says her meal and her approacher are more alike than they may realise.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWStomach(s)),
            new EventString((i) => $"<b>{AttractedWarrior(i.Unit).Name}</b> bows their head with a hot red blush as <b>{i.Unit.Name}</b> chuckles and squeezes some milk from her over-filled tits to alleviate pressure.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => ReqOSWLewd(s)),
            //Aba Experienced Prey
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> ass sags just a bit lower with the once accomplished <b>{i.Unit.Name}</b> being added to it entirely.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => PreyIsVeteranPred(s)),
            new EventString((i) => $"The chubby frame of <b>{i.Target.Name}</b> has been transformed into just that on <b>{i.Unit.Name}</b>. Chub.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => PreyIsVeteranPred(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> own previous gluttony makes itself known as it adds a considerable new layer of fat and muscle to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> tail.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => PreyIsVeteranPred(s)),
            //Aba Absorbs Leaders
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't help but wear a light blush for a moment, as the well-treated flesh of <b>{i.Target.Name}</b> now liberally pads her tits.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> will have to find a way to rule {GPPHis(i.Target)} empire as extra weight on <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body.  The Matron grins at the thought.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"Once a beacon of hope and guidance loved throughout {GPPHis(i.Target)} empire, <b>{i.Target.Name}</b> is now simply fat clinging to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> waistline.  The dragoness chuckles.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b>, the commander of so many, has now suffered the same fate of so many. Abakhanskya laughs darkly, she was only reuniting {GPPHim(i.Target)} with {GPPHis(i.Target)} people!",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => TargetLeader(s) && TargetHumanoid(s)),
            //Aba Disposal
            new EventString((i) => $"What used to resemble <b>{i.Target.Name}</b> is now a {PreyLocStrings.ScatAdjSyn()} log of {PreyLocStrings.ScatSyn()} that drops out of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> enormous backside.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> backside ripples as the {PreyLocStrings.ScatAdjSyn()} waste product that was <b>{i.Target.Name}</b> is squeezed out and unceremoniously left in the field.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"The unrecognisable pile of {PreyLocStrings.ScatSyn()} that is <b>{i.Target.Name}</b> stains the battlefield after exiting <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> ever-growing ass.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"As she {GetRandomStringFrom("drops", "expels", "evicts", "squeezes out", "pushes out", "craps out", "dumps", "shits out", "disposes of")} the {PreyLocStrings.ScatAdjSyn()} {PreyLocStrings.ScatSyn()} of yet another meal, <b>{i.Target.Name}</b> gives a light chuckle.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"The {PreyLocStrings.ScatAdjSyn()}, person-sized turd that she left on the field makes <b>{i.Unit.Name}</b> loose a small laugh.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> moves on, <b>{i.Target.Name}</b> is left behind and forgotten about, exitting her enormous arse as a mound {PreyLocStrings.ScatAdjSyn()} {PreyLocStrings.ScatSyn()}.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"The elements of <b>{i.Target.Name}</b> that <b>{i.Unit.Name}</b> found no use for are discarded out of her building-sized backside, piling up on the ground in a {PreyLocStrings.ScatAdjSyn()} mass of {PreyLocStrings.ScatSyn()}.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> is {GetRandomStringFrom("excreted", "expelled", "evicted", "squeezed out", "pushed out", "crapped out", "dumped", "shit out", "disposed of")} through <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> backside in a completely unrecognisable state.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"Nobody can find <b>{i.Target.Name}</b>! But that's to be expected, seeing as <b>{i.Unit.Name}</b> turned {GPPHim(i.Target)} into a {PreyLocStrings.ScatAdjSyn()} pile of {PreyLocStrings.ScatSyn()} in the field.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"What once was a proud <b>{i.Target.Name}</b> is now an inert log of {PreyLocStrings.ScatSyn()}.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"While the rest of <b>{i.Target.Name}</b> adds to {GPPHis(i.Target)} better, the worst of {GPPHim(i.Target)} is left as a staining mark on the battlefield.  Nothing but khatunlao {PreyLocStrings.ScatSyn()} now...",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"A gentle sigh of relief comes from <b>{i.Unit.Name}</b> as the last of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> remains are released from her arsehole.",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slides the {PreyLocStrings.ScatSyn()} that <b>{i.Target.Name}</b> has become out of her ass without ceremony. ",
            actorRace: Race.Abakhanskya, priority: 11, conditional: s => Scat(s)),

            //Feit
            new EventString((i) => $"<b>{i.Unit.Name}</b> wags her feathered tail a bit in delight, feeling <b>{i.Target.Name}</b> finally become fully added to her body!",
            actorRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> finishes {GPPHis(i.Unit)} squelching journey through <b>{i.Unit.Name}'s</b> {GetRandomStringFrom("intestines", "intestinal tract", "bowels", "abdomen", "lower body")}, leaving the {GetRaceDescSingl(i.Unit)} all the mightier for it!",
            actorRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("huffs", "hums", "trills", "sighs")} {GetRandomStringFrom("in delight", "happily", "with glee")}, glad to get a boost as she fully assimilates <b>{i.Target.Name}</b>.",
            actorRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> feels yet another little one {PreyLocStrings.DigestVerbSyn()} away completely.  <b>{i.Target.Name}'s</b> story is over, everything they once were now belongs to the {GetRaceDescSingl(i.Unit)} forever.",
            actorRace: Race.Feit, priority: 11, conditional: (s) => SizeDiff(s, 1.5f)), //Feit larger
            new EventString((i) => $"<b>{i.Unit.Name}</b> roars triumphantly as {GPPHe(i.Unit)} feels <b>{i.Target.Name}</b> fully absorb to the tune of a rumbling in {GPPHis(i.Unit)} {GetRandomStringFrom("intestines", "intestinal tract", "bowels", "abdomen", "lower body")}.",
            actorRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> bounces on {GPPHis(i.Unit)} paws excitedly as <b>{i.Target.Name}</b> is fully absorbed by her {GetRandomStringFrom("greedy", "hungry", "ravenous", "thirsty", "winding")} {GetRandomStringFrom("intestines", "intestinal tract", "bowels", "abdomen", "lower body")}, ready to put this new bulk to use catching fresh {GetRandomStringFrom("meat", "prey", "victims", "meals")}!",
            actorRace: Race.Feit, priority: 11, conditional: (s) => SizeDiff(s, 0.75f)), //Feit smaller
            new EventString((i) => $"<b>{i.Unit.Name}</b> eagerly soaks up eveything <b>{i.Target.Name}</b> has to offer, needing every drop of meat she coud digest to grow big and strong!",
            actorRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Unit.Name}</b> hikes her feathered tail, {GetRandomStringFrom("dropping", "expelling", "evicting", "squeezing out", "pushing out", "crapping out", "dumping", "shitting out", "disposing of")} the {PreyLocStrings.ScatSyn()} formerly known as <b>{i.Target.Name}</b> from the height her huge haunches now occupied at this size to splatter on the earth behind her in a {PreyLocStrings.ScatAdjSyn()} {GetRandomStringFrom("pile", "hill", "mound")}.",
            actorRace: Race.Feit, priority: 11, conditional: s => SizeDiff(s, 1.5f) && Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grunts, {GetRandomStringFrom("dropping", "expelling", "evicting", "squeezing out", "pushing out", "crapping out", "dumping", "shitting out", "disposing of")} <b>{i.Target.Name}'s</b> {PreyLocStrings.DigestedVerbSyn()} {GetRandomStringFrom("remains", "remnants", "leftovers")} into one more {PreyLocStrings.ScatAdjSyn()} pile of {PreyLocStrings.ScatSyn()} decorating the many battlefields of this world.",
            actorRace: Race.Feit, priority: 11, conditional: Scat),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grunts, {GetRandomStringFrom("dropping", "expelling", "evicting", "squeezing out", "pushing out", "crapping out", "dumping", "shitting out", "disposing of")} <b>{i.Target.Name}'s</b> {PreyLocStrings.DigestedVerbSyn()} {GetRandomStringFrom("remains", "remnants", "leftovers")} into one more {GetRandomStringFrom("bleached", "acid-washed", "scoured", "slimy", "grim", "bright", "white", "clean")} pile of bones decorating the many battlefields of this world.",
            actorRace: Race.Feit, priority: 11, conditional: s => BonesDisposal(s) && !Scat(s)), //Bones but no scat
            new EventString((i) => $"<b>{i.Unit.Name}</b> exhales deeply, pushing out a long series of {PreyLocStrings.ScatAdjSyn()} turds from her ass end as she piles up <b>{i.Target.Name}</b> remnants as {PreyLocStrings.ScatSyn()}.",
            actorRace: Race.Feit, priority: 11, conditional: s => Scat(s)),
            //Feit Vs. Dragons/Wyverns
            new EventString((i) => $"<b>{i.Unit.Name}</b> laughs wickedly as {GPPHis(i.Unit)} ass blasts out the once-mighty <b>{i.Target.Name}</b>, a rolling <i>*Frrrt!*</i> officially marking the dragon's slaying and complete transformation into {GetRaceDescSingl(i.Unit)} {PreyLocStrings.ScatSyn()}.",
            actorRace: Race.Feit, targetRace: Race.Dragon, priority: 11, conditional: s => Farts(s) && Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> laughs wickedly as {GPPHis(i.Unit)} ass blasts out the once-mighty <b>{i.Target.Name}</b>, a rolling <i>*Frrrt!*</i> officially marking the eastern dragon's slaying and complete transformation into {GetRaceDescSingl(i.Unit)} {PreyLocStrings.ScatSyn()}.",
            actorRace: Race.Feit, targetRace: Race.EasternDragon, priority: 11, conditional: s => Farts(s) && Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> laughs wickedly as {GPPHis(i.Unit)} ass blasts out the once-mighty <b>{i.Target.Name}</b>, a rolling <i>*Frrrt!*</i> officially marking the khatunlao's slaying and complete transformation into {GetRaceDescSingl(i.Unit)} {PreyLocStrings.ScatSyn()}.",
            actorRace: Race.Feit, targetRace: Race.Abakhanskya, priority: 11, conditional: s => Farts(s) && Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> laughs wickedly as {GPPHis(i.Unit)} ass blasts out the once-mighty <b>{i.Target.Name}</b>, a rolling <i>*Frrrt!*</i> officially marking the steppe dragon's slaying and complete transformation into {GetRaceDescSingl(i.Unit)} {PreyLocStrings.ScatSyn()}.",
            actorRace: Race.Feit, targetRace: Race.Cierihaka, priority: 11, conditional: s => Farts(s) && Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> laughs wickedly as {GPPHis(i.Unit)} ass blasts out the once-mighty <b>{i.Target.Name}</b>, a rolling <i>*Frrrt!*</i> officially marking the dragon's slaying and complete transformation into blue {GetRaceDescSingl(i.Unit)} {PreyLocStrings.ScatSyn()}.",
            actorRace: Race.Feit, targetRace: Race.Selicia, priority: 11, conditional: s => Farts(s) && Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> laughs wickedly as {GPPHis(i.Unit)} ass {GetRandomStringFrom("drops", "expels", "evicts", "squeezes out", "pushes out", "craps out", "dumps", "shits out", "disposes of")} the once-mighty <b>{i.Target.Name}</b> as a {PreyLocStrings.ScatAdjSyn()} pile, officially marking the dragon's slaying and complete transformation into {GetRaceDescSingl(i.Unit)} {PreyLocStrings.ScatSyn()}.",
            actorRace: Race.Feit, targetRace: Race.Dragon, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> laughs wickedly as {GPPHis(i.Unit)} ass {GetRandomStringFrom("drops", "expels", "evicts", "squeezes out", "pushes out", "craps out", "dumps", "shits out", "disposes of")} the once-mighty <b>{i.Target.Name}</b> as a pile of {GetRandomStringFrom("bleached", "acid-washed", "scoured", "slimy", "grim", "bright", "white", "clean")} bones, officially marking the dragon's slaying and complete transformation into {GetRaceDescSingl(i.Unit)} height.",
            actorRace: Race.Feit, targetRace: Race.Dragon, priority: 11, conditional: s => BonesDisposal(s) && !Scat(s)),
            //Feit Prey
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> form is fully obliterated, now just nourishment for the superior <b>{i.Unit.Name}</b>.",
            targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> becomes one with <b>{i.Unit.Name}</b>, the once powerful {GetRaceDescSingl(i.Target)} now just dino fuel for her foe.",
            targetRace: Race.Feit, priority: 11),
            new EventString((i) => $"<b>{i.Target.Name}</b> squeezes on out of <b>{i.Unit.Name}</b>, finally released as just a {GetRandomStringFrom("mess", "mound", "pile", "mass", "splattering", "bunch")} of {PreyLocStrings.ScatAdjSyn()} {GetRaceDescSingl(i.Unit)} {PreyLocStrings.ScatSyn()}.",
            targetRace: Race.Feit, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> tumbles out of <b>{i.Unit.Name}</b> for a long while, her {PreyLocStrings.ScatAdjSyn()} remains stacking high as she is {GetRandomStringFrom("excreted", "expelled", "evicted", "squeezed out", "pushed out", "crapped out", "dumped", "shit out", "disposed of")}!",
            targetRace: Race.Feit, priority: 11, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> strove to grow ever larger by stealing the size of her prey.  But in the end, it only made her an even bigger bowel movement to come out of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> fattened ass!",
            targetRace: Race.Feit, priority: 11, conditional: s => Scat(s)),

            //Orcas
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> bowels glorp and squelch, {GPPHis(i.Unit)} immense body absorbing another morsel fully.  This time it was <b>{i.Target.Name}</b>!",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> is now utterly and completely absorbed into the blubber clinging tightly to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> frame.",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> has discovered they could not replicate the feats of the mythical Jonah, as {GPPHe(i.Target)} is now nutrients pumping through the bloodstream of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body!",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> cheerily chirps as {GPPHis(i.Unit)} feels <b>{i.Target.Name}</b> fully bubble and gurgle away in {GPPHis(i.Unit)} {GetRandomStringFrom("intestines", "intestinal tract", "bowels", "lower bowels", "lower body")}!",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> huffs in relief as {GPPHe(i.Unit)} finally blasts <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.DigestedVerbSyn()} remains from {GPPHis(i.Unit)} rear end, the bothersome prey no more.",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> powerful guts have finished off <b>{i.Target.Name}</b>, now easily leaving as a {PreyLocStrings.ScatAdjSyn()} mess of {PreyLocStrings.ScatSyn()} while the blubber {GPPHe(i.Target)} became jiggles on <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> belly!",
            actorRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> has finished being absorbed by <b>{i.Unit.Name}</b>, joining the ranks of the many sharks who've fattened up orcas throughout history!",
            actorRace: Race.FeralOrcas, targetRace: Race.FeralSharks, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> squelches out the back end of <b>{i.Unit.Name}</b> as a bunch of {PreyLocStrings.ScatAdjSyn()} {GetRaceDescSingl(i.Target)} {PreyLocStrings.ScatSyn()}... The killer whale had no doubts this would be the outcome.",
            actorRace: Race.FeralOrcas, targetRace: Race.FeralSharks, priority: 9),

            new EventString((i) => $"<b>{i.Unit.Name}</b> would press on {GPPHis(i.Unit)} belly. The last of what used to be an immense {GetRaceDescSingl(i.Target)} shaped bulge fades with <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> absorption.",
            targetRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Target.Name}</b> is fully soaked up by <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> depths, the huge load of whale chyme lost in the apparently powerful predator!",
            targetRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> groans a bit in relief... {GPPHe(i.Target)} had been a larger morsel than usual, but <b>{i.Target.Name}</b> was finally completely assimilated.",
            targetRace: Race.FeralOrcas, priority: 9),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> bowels rumble in relief as they settle... <b>{i.Target.Name}</b> had been a glorious, massive prize to consume, now just part of the smaller pred.",
            targetRace: Race.FeralOrcas, priority: 9, conditional: s => SizeDiff(s, 0.75f)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> calmly {GetRandomStringFrom("expels", "excretes", "evicts", "squeezes out", "pushes out", "craps out", "craps", "dumps out", "dumps", "shits out", "shits", "disposes of")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> remains as a larger than normal pile of {PreyLocStrings.ScatSyn()}.",
            targetRace: Race.FeralOrcas, priority: 9, conditional: s => SizeDiff(s, 1.5f) && Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> needs to excuse themselves from the battle for a moment, taking a while to {GetRandomStringFrom("expel", "excrete", "evict", "squeeze out", "push out", "crap out", "crap", "dump out", "dump", "shit out", "shit", "dispose of")} the huge load of {PreyLocStrings.ScatAdjSyn()} {PreyLocStrings.ScatSyn()} that <b>{i.Target.Name}</b> had been mangled into by <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            targetRace: Race.FeralOrcas, priority: 9, conditional: s => SizeDiff(s, 0.75f) && Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> takes immense pleasure in knowing <b>{i.Target.Name}</b> now pads out their sharky body!",
            targetRace: Race.FeralOrcas, actorRace: Race.FeralSharks, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> contently {GetRandomStringFrom("expels", "excretes", "evicts", "squeezes out", "pushes out", "craps out", "craps", "dumps out", "dumps", "shits out", "shits", "disposes of")} [orca]'s remains into a {PreyLocStrings.ScatAdjSyn()} pile of {PreyLocStrings.ScatSyn()}, a shark-toothed grin on {GPPHis(i.Unit)} face... maybe next time the whales wouldn't mess with sharks!",
            targetRace: Race.FeralOrcas, actorRace: Race.FeralSharks, priority: 9, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> takes immense pleasure in knowing <b>{i.Target.Name}</b> now pads out their sharky body!",
            targetRace: Race.FeralOrcas, actorRace: Race.Sharks, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> contently {GetRandomStringFrom("expels", "excretes", "evicts", "squeezes out", "pushes out", "craps out", "craps", "dumps out", "dumps", "shits out", "shits", "disposes of")} [orca]'s remains into a {PreyLocStrings.ScatAdjSyn()} pile of {PreyLocStrings.ScatSyn()}, a shark-toothed grin on {GPPHis(i.Unit)} face... maybe next time the whales wouldn't mess with sharks!",
            targetRace: Race.FeralOrcas, actorRace: Race.Sharks, priority: 9, conditional: s => Scat(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> takes immense pleasure in knowing <b>{i.Target.Name}</b> now pads out their sharky body!",
            targetRace: Race.FeralOrcas, actorRace: Race.Zoey, priority: 9),
            new EventString((i) => $"<b>{i.Unit.Name}</b> contently {GetRandomStringFrom("expels", "excretes", "evicts", "squeezes out", "pushes out", "craps out", "craps", "dumps out", "dumps", "shits out", "shits", "disposes of")} [orca]'s remains into a {PreyLocStrings.ScatAdjSyn()} pile of {PreyLocStrings.ScatSyn()}, a shark-toothed grin on {GPPHis(i.Unit)} face... maybe next time the whales wouldn't mess with sharks!",
            targetRace: Race.FeralOrcas, actorRace: Race.Zoey, priority: 9, conditional: s => Scat(s)),
            
        };
        TransferMessages = new List<EventString>()
        {
            //Plain/Non-lewd messages
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pumps", "ejaculates")} the cum left of {GPPHis(i.Unit)} prey into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> mouth; {i.Target.Name} is happy with these {GetRandomStringFrom("creamy", "silky", "cummy", "jizzy", "tasty", "delicious", "lewd", "naughty", "sexy", "spoogey", "gooey", "thick")} results.",
            priority: 10, conditional: s => InStomach(s) && s.Prey.IsDead ),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pumps", "ejaculates")} the cum left of {GPPHis(i.Unit)} prey into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> mouth; {i.Target.Name} eagerly gulps down the {GetRandomStringFrom("creamy", "silky", "cummy", "jizzy", "tasty", "delicious", "lewd", "naughty", "sexy", "spoogey", "gooey", "thick")} treat.",
            priority: 10, conditional: s => InStomach(s) && s.Prey.IsDead ),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pumps", "ejaculates")} <b>{i.Prey.Name}</b> into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {i.preyLocation.ToSyn()}; {i.Target.Name} is quick to swallow {GPPHim(i.Prey)} down.",
            priority: 10, conditional: s => InStomach(s) && !s.Prey.IsDead ),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pumps", "ejaculates")} <b>{i.Prey.Name}</b> into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 10, conditional: s => !InStomach(s) && !s.Prey.IsDead ),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pumps", "ejaculates")} the cum made from <b>{i.Prey.Name}</b> into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 10, conditional: s => !InStomach(s) && s.Prey.IsDead ),

            //Self transfer messages
            new EventString((i) =>$"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pumps", "ejaculates", "shoots")} <b>{i.Prey.Name}</b> into <b>{GPPHis(i.Target)}</b> own mouth quickly swallowing {GPPHim(i.Prey)} down.",
            priority: 13, conditional: s => InStomach(s) && !s.Prey.IsDead && s.Unit == s.Target),
            new EventString((i) =>$"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pumps", "ejaculates")} what's left of <b>{i.Prey.Name}</b> into <b>{GPPHis(i.Target)}</b> own mouth quickly swallowing the {GetRandomStringFrom("creamy", "silky", "cummy", "jizzy", "tasty", "delicious", "lewd", "naughty", "sexy", "spoogey", "gooey", "thick")} fluid down.",
            priority: 13, conditional: s => InStomach(s) && s.Prey.IsDead && s.Unit == s.Target),
            new EventString((i) =>$"After a lot of work <b>{i.Unit.Name}</b> manages to get <b>{i.Prey.Name}</b> into <b>{GPPHis(i.Target)}</b> womb, although {GetRandomStringFrom("slightly tired", "winded", "exhausted")} <b>{i.Unit.Name}</b> is pleased with the results.",
            priority: 13, conditional: s => !InStomach(s) && !s.Prey.IsDead && s.Unit == s.Target),
            new EventString((i) =>$"After a lot of work and careful positioning <b>{i.Unit.Name}</b> somehow managed to get most of the cum made from <b>{i.Prey.Name}</b> into <b>{GPPHis(i.Target)}</b> own {i.preyLocation.ToSyn()}.",
            priority: 13, conditional: s => !InStomach(s) && s.Prey.IsDead && s.Unit == s.Target),

            //Lewd Messages
            //General Cock vore transfer into stomach
            new EventString((i) => $"<b>{i.Target.Name}</b> wraps {GPPHis(i.Target)} mouth around <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("shaft", "rod", "cock", "member", "dick")} and begins {GetRandomStringFrom("servicing", "working", "sucking", "fellating")} it. <b>{i.Unit.Name}</b> can't hold on any longer and blows {GPPHis(i.Unit)} load into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> mouth. <b>{i.Target.Name}</b> swallows most of it and {GPPHis(i.Target)} belly bloats out.",
            priority: 11, conditional: s => InStomach(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> begins {GetRandomStringFrom("jerking", "rubbing", "playing with", "licking")} <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("shaft", "rod", "cock", "member", "dick")}. As <b>{i.Unit.Name}</b> is about to cum, <b>{i.Target.Name}</b> quickly catches {GPPHis(i.Unit)} load in {GPPHis(i.Target)} mouth; bloating out {GPPHis(i.Target)} belly.",
            priority: 11, conditional: s => InStomach(s) && Lewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> wraps {GPPHis(i.Unit)} mouth around <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()} and begins servicing it. <b>{i.Unit.Name}</b> can't hold on any longer and blows {GPPHis(i.Unit)} load into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> mouth. <b>{i.Target.Name}</b> swallows most of it and {GPPHis(i.Target)} belly bloats out.",
            priority: 11, conditional: s => InStomach(s) && Lewd(s)),
            //Cock vore transfer into stomach with dead prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pulls", "waves", "calls", "beckons")} <b>{i.Target.Name}</b> over and tells {GPPHim(i.Target)} to start sucking. <b>{i.Target.Name}</b> is just too good with {GPPHis(i.Target)} mouth and <b>{i.Unit.Name}</b> {GetRandomStringFrom("climaxes", "orgasms", "goes over the edge", "cums", "ejaculates", "nuts")} soon after, bloating out the {GetRaceDescSingl(i.Target)}'s belly as {GPPHis(i.Unit)} balls shrink down.",
            priority: 11, conditional: s => InStomach(s) && Lewd(s) && s.Prey.IsDead ),
            new EventString((i) => $"<b>{i.Unit.Name}</b> gives <b>{i.Target.Name}</b> 'The Look' immediately swooning {GPPHim(i.Target)}. <b>{i.Target.Name}</b> lovingly starts {GetRandomStringFrom("servicing", "working", "sucking", "fellating")} <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("shaft", "rod", "cock", "member", "dick")}, soon <b>{i.Unit.Name}</b> {GetRandomStringFrom("climaxes", "orgasms", "goes over the edge", "cums", "ejaculates", "nuts")}, rewarding the {GetRaceDescSingl(i.Target)} with a {GetRandomStringFrom("creamy", "silky", "cummy", "jizzy", "tasty", "delicious", "lewd", "naughty", "sexy", "spoogey", "gooey", "thick")} treat.",
            priority: 11, conditional: s => InStomach(s) && ReqTargetCompatibleLewd(s) && s.Prey.IsDead ),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't hold in the need for release and asks <b>{i.Target.Name}</b> to help {GPPHim(i.Unit)} out. <b>{i.Target.Name}</b> sighs and says \"Fine, but you owe me.\" and begins {GetRandomStringFrom("servicing", "sucking", "fellating")} <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("shaft", "rod", "cock", "member", "dick")}, eventually <b>{i.Unit.Name}</b> {GetRandomStringFrom("climaxes", "orgasms", "goes over the edge", "ejaculates", "nuts")}; <b>{i.Target.Name}</b> swallows the resulting {GetRandomStringFrom("cum", "jizz", "spooge", "goo", "thick fluid")} quickly.",
            priority: 11, conditional: s => InStomach(s) && !ReqTargetCompatible(s) && Lewd(s) && s.Prey.IsDead && ActorHumanoid(s) && TargetHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pulls", "waves", "calls", "beckons")} <b>{i.Target.Name}</b> over and tells {GPPHim(i.Target)} to start sucking. <b>{i.Target.Name}</b> gladly {GetRandomStringFrom("services", "works", "sucks", "fellates")} <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("shaft", "rod", "cock", "member", "dick")} with {GPPHis(i.Target)} mouth and soon <b>{i.Unit.Name}</b> {GetRandomStringFrom("climaxes", "orgasms", "goes over the edge", "cums", "ejaculates", "nuts")}, filling the {GetRaceDescSingl(i.Target)}'s belly with cum freshly made from <b>{i.Prey.Name}</b>.",
            priority: 11, conditional: s => InStomach(s) && ReqTargetCompatibleLewd(s) && s.Prey.IsDead ),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pulls", "waves", "calls", "beckons")} <b>{i.Target.Name}</b> over and tells {GPPHim(i.Target)} to start sucking. <b>{i.Target.Name}</b> begrudgingly {GetRandomStringFrom("services", "works", "sucks", "fellates")} <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("shaft", "rod", "cock", "member", "dick")} with {GPPHis(i.Target)} mouth, soon <b>{i.Unit.Name}</b> {GetRandomStringFrom("climaxes", "orgasms", "goes over the edge", "cums", "ejaculates", "nuts")}, filling the {GetRaceDescSingl(i.Target)}'s belly with cum freshly made from <b>{i.Prey.Name}</b>.",
            priority: 11, conditional: s => InStomach(s) && !ReqTargetCompatible(s) && Lewd(s) && s.Prey.IsDead ),
            //Cock vore transfer into stomach with alive prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pulls", "waves", "calls", "beckons")} <b>{i.Target.Name}</b> over and tells {GPPHim(i.Target)} to start sucking. <b>{i.Target.Name}</b> is just too good with {GPPHis(i.Target)} mouth and <b>{i.Unit.Name}</b> {GetRandomStringFrom("climaxes", "orgasms", "goes over the edge", "cums", "ejaculates", "nuts")} soon after, bloating out <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> belly when <b>{i.Prey.Name}</b> shoots from {GPPHis(i.Prey)} testicular prison and straight down the {GetRaceDescSingl(i.Target)}'s throat.",
            priority: 11, conditional: s => InStomach(s) && Lewd(s) && !s.Prey.IsDead ),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't hold in the need for release and grabs <b>{i.Target.Name}</b> forcing {GPPHis(i.Unit)} {GetRandomStringFrom("shaft", "rod", "cock", "member", "dick")} into {GPPHis(i.Target)} mouth! Within mere moments <b>{i.Unit.Name}</b> {GetRandomStringFrom("climaxes", "orgasms", "goes over the edge", "cums", "ejaculates", "nuts")} feeling pure bliss and bloating out <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> belly with <b>{i.Prey.Name}</b> in the process.",
            priority: 11, conditional: s => InStomach(s) && Lewd(s) && !s.Prey.IsDead ),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> head and thrusts {GPPHis(i.Unit)} {GetRandomStringFrom("shaft", "rod", "cock", "member", "dick")} into {GPPHis(i.Target)} mouth! After a few moments <b>{i.Unit.Name}</b> can't hold back and {GetRandomStringFrom("climaxes", "orgasms", "goes over the edge", "cums", "ejaculates", "nuts")} fillng <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> belly with <b>{i.Prey.Name}</b>, the {GetRaceDescSingl(i.Target)} smiles with satisfaction.",
            priority: 11, conditional: s => InStomach(s) && ReqTargetCompatibleLewd(s) && !s.Prey.IsDead ),
            //Cock vore transfer into womb with alive prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pulls", "waves", "calls", "beckons")} <b>{i.Target.Name}</b> over and before long, <b>{i.Target.Name}</b> has pushed {GPPHim(i.Unit)} down and is riding {GPPHim(i.Unit)}. Soon thereafter, <b>{i.Unit.Name}</b> {GetRandomStringFrom("pumps", "ejaculates", "sends", "shoots")} <b>{i.Prey.Name}</b> into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 11, conditional: s => !InStomach(s) && Lewd(s) && !s.Prey.IsDead ),
            new EventString((i) => $"<b>{i.Unit.Name}</b> thrusts {GPPHis(i.Unit)} twitching {GetRandomStringFrom("shaft", "rod", "cock", "member", "dick")} at <b>{i.Target.Name}</b> beckoning {GPPHim(i.Target)} over, Not a moment later <b>{i.Target.Name}</b> is riding <b>{i.Unit.Name}</b>. Unable to hold back, {GPPHis(i.Unit)} {GetRandomStringFrom("pumps", "ejaculates", "shoots")} <b>{i.Prey.Name}</b> into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 11, conditional: s => !InStomach(s) && Lewd(s) && !s.Prey.IsDead ),
            //Cock vore transfer into womb with dead prey
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pulls", "waves", "calls", "beckons")} <b>{i.Target.Name}</b> over and before long, <b>{i.Target.Name}</b> has pushed {GPPHim(i.Unit)} down and is riding {GPPHim(i.Unit)}. Soon thereafter, <b>{i.Unit.Name}</b> {GetRandomStringFrom("pumps", "ejaculates", "shoots")} {GPPHis(i.Unit)} load - freshly made from <b>{i.Prey.Name}</b> - into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 11, conditional: s => !InStomach(s) && Lewd(s) && s.Prey.IsDead ),
            new EventString((i) => $"<b>{i.Unit.Name}</b> thrusts {GPPHis(i.Unit)} twitching {GetRandomStringFrom("shaft", "rod", "cock", "member", "dick")} at <b>{i.Target.Name}</b> beckoning {GPPHim(i.Target)} over, Not a moment later <b>{i.Target.Name}</b> is riding <b>{i.Unit.Name}</b>. Unable to hold back, <b>{i.Unit.Name}</b> shoots a {GetRandomStringFrom("creamy", "silky", "cummy", "jizzy", "plentiful", "lewd", "naughty", "sexy", "spoogey", "gooey", "thick")} load made from <b>{i.Prey.Name}</b> into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {i.preyLocation.ToSyn()}.",
            priority: 11, conditional: s => !InStomach(s) && Lewd(s) && s.Prey.IsDead ),
            //Cock vore transfer into womb with dead prey & CondomsForCV
            new EventString((i) => $"As <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.balls)} shrinks, <b>{ApostrophizeWithOrWithoutS(i.Prey.Name)}</b> liquified form fills the thin rubber barrier between <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToCockSyn()} and <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.womb)} until, with a *pop* sound, is heard bursting through. <b>{i.Unit.Name}</b> looks sheepishly at <b>{i.Target.Name}</b>. \"{GetRandomStringFrom("Oops?", "Oops.", "Sorry?", "Sorry.")}\"",
            priority: 11, conditional: s => Config.CondomsForCV && !InStomach(s) && Lewd(s) && s.Prey.IsDead && ActorHumanoid(s)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> goes to have sex with <b>{i.Target.Name}</b>, {GPPHe(i.Unit)} pulls out a condom, before being told to put it away. Without that barrier of protection, the {GetRandomStringFrom("cum", "jizz", "spooge", "goo", "thick fluid")} that was once <b>{i.Prey.Name}</b> spills into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.womb)} unimpeded.",
            priority: 11, conditional: s => Config.CondomsForCV && !InStomach(s) && Lewd(s) && s.Prey.IsDead && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slips on a condom and goes to have sex with <b>{i.Target.Name}</b>. After they're done, <b>{i.Unit.Name}</b> observes that former <b>{i.Prey.Name}</b> is leaking from 7 small holes in the condom. Knowing what happened, <b>{i.Unit.Name}</b> shouts \"<b>{RandomAlliedWarrior(i.Unit).Name}</b>! Not funny!\"",
            priority: 11, conditional: s => Config.CondomsForCV && !InStomach(s) && Lewd(s) && s.Prey.IsDead && ReqRAW(s) && ActorHumanoid(s)),
            new EventString((i) => $"Before having sex, <b>{i.Unit.Name}</b> looks for {GPPHis(i.Unit)} condom, but can't find it. \"I think I left it with <b>{RandomAlliedWarrior(i.Unit).Name}</b>. Want me to go get it?\" <b>{i.Target.Name}</b> responds \"Nah, I saw your face when that {GetRaceDescSingl(i.Prey)} went in your balls, I want to feel that myself.\" With that, the two {GetRandomStringFrom("have sex", "fuck")}, right there in the middle of the battlefield.",
            priority: 11, conditional: s => Config.CondomsForCV && !InStomach(s) && Lewd(s) && s.Prey.IsDead && ReqRAW(s) && TargetHumanoid(s) && ActorHumanoid(s)),

        };

        KissTransferMessages = new List<EventString>()
        {
            //The main idea behind most of the dialouge was, how in several Kirby games Kirby share health pickups with his allies via kissing them and they would still somehow get the full effect of the heal, just seemed too good to pass up. Also the alternative is mother bird-like stuff going on and I ain't writing that -Wolfwar

            new EventString((i) => $"<b>{i.Unit.Name}</b> kisses <b>{i.Target.Name}</b>, causing <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> belly to {GetRandomStringFrom("suddenly", "instantly", "inexplicably")} be filled with <b>{i.Prey.Name}</b>. <b>{i.Target.Name}</b>, although {GetRandomStringFrom("satisfied", "full", "content")} is utterly baffled as to how it occurred.",
            priority: 10, conditional: s => InStomach(s) && !s.Prey.IsDead ),
            new EventString((i) => $"<b>{i.Unit.Name}</b> kisses <b>{i.Target.Name}</b>, instantly giving <b>{i.Prey.Name}</b> in the process, {GetRandomStringFrom("satisfied", "pleased", "content")} with the outcome <b>{i.Target.Name}</b> happily pats {GPPHis(i.Unit)} belly.",
            priority: 10, conditional: s => InStomach(s) && !s.Prey.IsDead ),
            new EventString((i) => $"<b>{i.Unit.Name}</b> kisses <b>{i.Target.Name}</b>, and {GetRandomStringFrom("in less than a second", "instantly", "without warning")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> belly is filled with <b>{i.Prey.Name}</b>. <b>{i.Unit.Name}</b> simply says \"You're welcome!\" as <b>{i.Target.Name}</b> just stands, puzzled as to what just happened.",
            priority: 10, conditional: s => InStomach(s) && !s.Prey.IsDead && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> kisses <b>{i.Target.Name}</b>, instantly sharing <b>{i.Prey.Name}</b> with {GPPHim(i.Target)} in the process. After pulling away from the first kiss, <b>{i.Unit.Name}</b> kisses <b>{i.Target.Name}</b> a second time {GetRandomStringFrom("in the heat of the moment", "just for fun", "just for good measure", "as a gift")}, <b>{i.Target.Name}</b> blushes profusely.",
            priority: 10, conditional: s => InStomach(s) && !s.Prey.IsDead && ReqTargetCompatible(s)),
            //Now with new logs by Cartography!
            new EventString((i) => {
                if (State.Rand.Next(2) == 1)
                    return $"<b>{i.Unit.Name}</b> walks over to <b>{i.Target.Name}</b> and hugs the slightly startled {GetRaceDescSingl(i.Target)} before placing {GPPHis(i.Unit)} lips firmly on <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> mouth. After some initial resistance, <b>{i.Target.Name}</b> gives in and leans into the kiss, getting so lost in {GPPHis(i.Target)} impromptu make out session that {GPPHe(i.Target)} do{EsIfSingular(i.Unit)}n't even notice as <b>{i.Prey.Name}</b> slides out of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> mouth and into {GPPHis(i.Target)}!";
                return $"<b>{i.Unit.Name}</b> walks over to <b>{i.Target.Name}</b> and hugs {GPPHim(i.Target)} before placing {GPPHis(i.Unit)} lips firmly on <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> mouth. After some initial resistance, <b>{i.Target.Name}</b> gives in and leans into the kiss, getting so lost in {GPPHis(i.Target)} impromptu make out session that {GPPHe(i.Target)} do{EsIfSingular(i.Unit)}n't even notice as <b>{i.Prey.Name}</b> slides out of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> mouth and into {GPPHis(i.Target)}!";
            },
            priority: 10, conditional: s => InStomach(s) && !s.Prey.IsDead && ReqTargetCompatible(s)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> pulls <b>{i.Target.Name}</b> in for a kiss, {GPPHe(i.Unit)} force{SIfSingular(i.Unit)} <b>{i.Prey.Name}</b> up {GPPHis(i.Unit)} throat and into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> mouth, where the {GetRaceDescSingl(i.Prey)} is promptly swallowed down.",
            priority: 10, conditional: s => InStomach(s) && !s.Prey.IsDead ),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> and <b>{i.Target.Name}</b> kiss one another, the bulge <b>{i.Prey.Name}</b> makes in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach shrinks, traveling up {GPPHis(i.Unit)} throat, over and into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> throat, and all the way down into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> stomach.",
            priority: 10, conditional: s => InStomach(s) && !s.Prey.IsDead && !ActorHumanoid(s)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> and <b>{i.Target.Name}</b> kiss one another, the bulge <b>{i.Prey.Name}</b> makes in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach shrinks, traveling up {GPPHis(i.Unit)} throat, over and into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> throat, and all the way down into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> stomach. Noticing how much lighter {GPPHe(i.Unit)} suddenly {IsAre(i.Unit)}, <b>{i.Unit.Name}</b> pats <b>{i.Target.Name}</b> on the shoulder and says \"{GetRandomStringFrom("Take care of my prey now, ok?", "You will get me a better one, right?")}\"",
            priority: 10, conditional: s => InStomach(s) && !s.Prey.IsDead && ActorHumanoid(s)),

        };

        VoreStealMessages = new List<EventString>()
        {
            //Additional logs as well as the Youko and Aabayx exclusives by Cartography
            //Oral to Oral vore steal
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("tackles", "headbutts", "charges into", "bashes")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("filled", "bulbus", "exposed")} belly forcing {GPPHim(i.Target)} to {GetRandomStringFrom("regurgitate", "free", "release")} <b>{i.Prey.Name}</b> into the air who <b>{i.Unit.Name}</b> deftly catches in {GPPHis(i.Unit)} mouth.",
            priority: 10, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rushes over and places {GPPHis(i.Unit)} lips firmly against <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("lips", "mouth")}, the {GetRaceDescSingl(i.Target)} rather surprised at the sudden kiss. As the {GetRaceDescSingl(i.Target)} leans into the kiss, <b>{i.Prey.Name}</b> is forced out of <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> stomach and into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach.",
            priority: 10, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach),
            new EventString((i) => $"Remembering {GPPHis(i.Unit)} training, <b>{i.Unit.Name}</b> breaks open a small {GetRandomStringFrom("package", "vial", "box")} of {GetRandomStringFrom("foul", "wretched", "disgusting")} smelling {GetRandomStringFrom("herbs", "spices", "compounds", "chemicals")} and wafts the cloud of odor at <b>{i.Target.Name}</b>. In short order, the {GetRaceDescSingl(i.Target)} {GetRandomStringFrom("coughs up", "throws up", "pukes up")} <b>{i.Prey.Name}</b>, who is promptly eaten by <b>{i.Unit.Name}</b>.",
            priority: 10, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> wraps {GPPHis(i.Unit)} arms around <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body, pressing against {GPPHim(i.Target)} and crushing against {GPPHis(i.Target)} prey filled {PreyLocStrings.ToSyn(PreyLocation.stomach)}. Before long, <b>{i.Prey.Name}</b> is forced up and into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> open {GetRandomStringFrom("mouth", "maw")}.",
            priority: 10, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> suddenly feels a wet squishy something fill {GPPHis(i.Target)} throat. After a moment, the sensation reverses, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> long sticky tongue retracting, drawing <b>{i.Prey.Name}</b> into the frog's {GetRandomStringFrom("stomach", "belly", "gut")}.",
            priority: 10, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Frogs),
            // Friendly Oral to Oral vore steal
            new EventString((i) => $"<b>{i.Unit.Name}</b> goes to kiss <b>{i.Target.Name}</b> and is quickly surprised to find <b>{i.Prey.Name}</b> {GetRandomStringFrom("suddenly", "instantly", "inexplicably")} inside of {GPPHis(i.Unit)} stomach, <b>{i.Unit.Name}</b> and <b>{i.Target.Name}</b> are both equally confused as to how this happened but neither {GetRandomStringFrom("mind", "complain about", "object")} the outcome.",
            priority: 12, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach && Friendly(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> kisses <b>{i.Target.Name}</b>, after pulling back {GPPHe(i.Unit)} is pleasantly surprised to find <b>{i.Prey.Name}</b> now residing inside of {GPPHis(i.Unit)} belly, meanwhile <b>{i.Target.Name}</b> can't help but miss the full feeling {GPPHe(i.Target)} had.",
            priority: 12, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach && Friendly(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> kisses <b>{i.Target.Name}</b>, after pulling back {GPPHe(i.Unit)} is pleasantly surprised to find <b>{i.Prey.Name}</b> now residing inside of {GPPHis(i.Unit)} belly, meanwhile <b>{i.Target.Name}</b> can't help but feel slightly cheated.",
            priority: 12, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach && Friendly(s)),
            new EventString((i) => $"As <b>{i.Unit.Name}</b> pulls back from {GPPHis(i.Unit)} kiss with <b>{i.Target.Name}</b>, is confused as to how <b>{i.Prey.Name}</b> is now {GPPHis(i.Unit)} in belly, however {GPPHe(i.Unit)} immediately stops caring as <b>{i.Target.Name}</b> {GetRandomStringFrom("pats", "rubs", "massages")} {GPPHis(i.Unit)} belly.",
            priority: 12, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach && Friendly(s)),

            // If you can make this not lewd, please advise, otherwise I may need to lock the whole mechanic behind lewd texts
            // Thou hast been advised
            //Breast vore steal
            new EventString((i) => $"<b>{i.Target.Name}</b> can't bring {GPPHimself(i.Target)} to fight off <b>{i.Unit.Name}</b> when {GPPHe(i.Unit)} start{SIfSingular(i.Unit)} sucking on {GPPHis(i.Target)} {PreyLocStrings.ToBreastSynPlural()}; {i.Unit.Name} doesn't relent until <b>{i.Prey.Name}</b> is released from {GPPHis(i.Target)} {PreyLocStrings.ToBreastSynPlural()}.",
            priority: 10, conditional: s => (s.oldLocation == PreyLocation.breasts||s.oldLocation == PreyLocation.leftBreast||s.oldLocation == PreyLocation.rightBreast) && s.preyLocation == PreyLocation.stomach && Lewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> overwhelms <b>{i.Target.Name}</b> and sucks <b>{i.Prey.Name}</b> right out of {GPPHis(i.Target)} breasts!",
            priority: 10, conditional: s => (s.oldLocation == PreyLocation.breasts||s.oldLocation == PreyLocation.leftBreast||s.oldLocation == PreyLocation.rightBreast) && s.preyLocation == PreyLocation.stomach),
            //Cock vore steal
            new EventString((i) => $"<b>{i.Unit.Name}</b> knocks down <b>{i.Target.Name}</b> and relieves {GPPHis(i.Target)} rod of <b>{i.Prey.Name}</b>!",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.balls && s.preyLocation == PreyLocation.stomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> knocks down <b>{i.Target.Name}</b> and begins sucking {GPPHis(i.Target)} rod. Astonished, {i.Target.Name} doesn't even realize it when {GPPHe(i.Target)} feed{SIfSingular(i.Target)} <b>{i.Prey.Name}</b> to <b>{i.Unit.Name}</b>.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.balls && s.preyLocation == PreyLocation.stomach && Lewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tackles <b>{i.Target.Name}</b> to the ground! A moment later <b>{i.Prey.Name}</b> is in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> womb.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.balls && s.preyLocation == PreyLocation.womb),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tackles <b>{i.Target.Name}</b> and rides {GPPHim(i.Target)} until {GPPHe(i.Target)} release{SIfSingular(i.Target)} <b>{i.Prey.Name}</b> into {GPPHis(i.Unit)} womb.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.balls && s.preyLocation == PreyLocation.womb && Lewd(s)),
            //Unbirth vore steal
            new EventString((i) => $"As <b>{i.Unit.Name}</b> pleasures <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.womb)}, in a moment of ecstasy {GPPHe(i.Target)} relaxes allowing <b>{i.Prey.Name}</b> to break free. However this freedom is short-lived as <b>{i.Prey.Name}</b> is {GetRandomStringFrom("immediately", "instantly", "swiftly")} {GetRandomStringFrom("eaten up", "devoured", "swallowed up", "slurped up", "wolfed down")} by <b>{i.Unit.Name}</b>.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.womb && s.preyLocation == PreyLocation.stomach && Lewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> pries apart <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> vagina {GetRandomStringFrom("freeing", "liberating", "springing")} <b>{i.Prey.Name}</b>, only to {GetRandomStringFrom("immediately", "instantly", "swiftly")} send the freed {GetRaceDescSingl(i.Prey)} into {GPPHis(i.Unit)} own {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.womb && s.preyLocation == PreyLocation.stomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> reaches {GPPHis(i.Unit)} hand up into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.womb)}, grabbing <b>{i.Prey.Name}</b> and yanking {GPPHim(i.Prey)} out, quickly swallowing {GPPHim(i.Prey)} down into {GPPHis(i.Unit)} own {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.womb && s.preyLocation == PreyLocation.stomach && ActorHumanoid(s)),
            new EventString((i) => $"Crouching down below <b>{i.Target.Name}</b>, <b>{i.Unit.Name}</b> ruthlessly licks all over {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.womb)} until, with one last quaking motion, <b>{i.Prey.Name}</b> is ejected straight into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("maw", "mouth")}!",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.womb && s.preyLocation == PreyLocation.stomach && Lewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> rams {GPPHis(i.Unit)} head up <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.womb)}, and quickly swallows the {GetRaceDescSingl(i.Prey)} in {GPPHis(i.Target)} womb before pulling {GPPHis(i.Unit)} head back out.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.womb && s.preyLocation == PreyLocation.stomach),
            //Tail vore steal
            new EventString((i) => $"<b>{i.Unit.Name}</b> begins rimming <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> tail maw, causing <b>{i.Target.Name}</b> to go into in a daze of confused arousal where {GPPHis(i.Target)} tail forcefully shoots <b>{i.Prey.Name}</b> into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.tail && s.preyLocation == PreyLocation.stomach && Lewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("squeezes", "presses")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> tail forcing <b>{i.Prey.Name}</b> out, only to {GetRandomStringFrom("eat up", "devour", "swallow up", "slurp up", "wolf down")} the freed {GetRaceDescSingl(i.Prey)} for {GPPHimself(i.Unit)}.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.tail && s.preyLocation == PreyLocation.stomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grabs <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> tail and squeezes it like a tube of toothpaste, forcing <b>{i.Prey.Name}</b> out of {GPPHis(i.Target)} tailmaw, and straight into the {ApostrophizeWithOrWithoutS((GetRaceDescSingl(i.Unit)))} waiting {GetRandomStringFrom("maw", "mouth")}.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.tail && s.preyLocation == PreyLocation.stomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> slowly wraps {GPPHis(i.Unit)} mouth around <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("engorged", "swollen", "prey-filled")} tail, partially swallowing the {GetRaceDescSingl(i.Target)} before pulling back, only now <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> tail is back to normal, and <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)} {GetRandomStringFrom("bulges", "is filled")} with <b>{i.Prey.Name}</b>.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.tail && s.preyLocation == PreyLocation.stomach),
            new EventString((i) => $"<b>{i.Unit.Name}</b> forces open <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> tailmaw, sticking {GPPHis(i.Unit)} head in, finding <b>{i.Prey.Name}</b>, and swallowing {GPPHim(i.Prey)} before pulling back out of the stunned {ApostrophizeWithOrWithoutS((GetRaceDescSingl(i.Target)))} tail.",
            priority: 10, conditional: s => s.oldLocation == PreyLocation.tail && s.preyLocation == PreyLocation.stomach),
            //Youko Exclusive
            new EventString((i) => $"<b>{i.Unit.Name}</b> sticks {GPPHis(i.Unit)} arm between the many fluffy tails of <b>{i.Target.Name}</b>, finding <b>{i.Prey.Name}</b> within and pulling {GPPHim(i.Prey)} out. Before <b>{i.Prey.Name}</b> can thank {GPPHis(i.Prey)} savior, the {GetRaceDescSingl(i.Prey)} finds {GPPHimself(i.Prey)} being swallowed down into <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 25, conditional: s => s.oldLocation == PreyLocation.tail && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Youko && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sticks {GPPHis(i.Unit)} face between the many fluffy tails of <b>{i.Target.Name}</b>, finding <b>{i.Prey.Name}</b> within and swallowing {GPPHim(i.Prey)} down with no problem. By the time that <b>{i.Target.Name}</b> realizes <b>{i.Prey.Name}</b> is gone, <b>{i.Unit.Name}</b> is already strutting off with a full {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 25, conditional: s => s.oldLocation == PreyLocation.tail && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Youko),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("punches", "kicks")} <b>{i.Target.Name}</b> hard, right where {GPPHis(i.Target)} tails all attach, causing them all to splay outwards, dropping <b>{i.Prey.Name}</b>, who in {GPPHis(i.Prey)} dazed state is easy prey for <b>{i.Unit.Name}</b>.",
            priority: 25, conditional: s => s.oldLocation == PreyLocation.tail && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Youko && ActorHumanoid(s)),
            //Aabayx Exclusive
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("tackles", "headbutts", "charges into", "bashes")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRandomStringFrom("filled", "bulbus", "exposed")} belly forcing {GPPHis(i.Target)} triangular face to open up, ejecting <b>{i.Prey.Name}</b> into the air who <b>{i.Unit.Name}</b> deftly catches in {GPPHis(i.Target)} mouth.",
            priority: 25, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Aabayx),
            new EventString((i) => $"<b>{i.Unit.Name}</b> carefully pries <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> triangular face open, before pressing on {GPPHis(i.Target)} {PreyLocStrings.ToSyn(PreyLocation.stomach)} to force <b>{i.Prey.Name}</b> up and into {GPPHis(i.Unit)} open {GetRandomStringFrom("maw", "mouth")}.",
            priority: 25, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Aabayx),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {(ActorHumanoid(i) ? "punches" : "hits")} <b>{i.Target.Name}</b> in {GPPHis(i.Target)} singular eye, forcing the Aabayx's face plates inwards. With a {(ActorHumanoid(i) ? "kick" : "tackle")}, <b>{i.Unit.Name}</b> then forces <b>{i.Prey.Name}</b> up and out of the Aabayx's stomach, before swiftly devouring the water soaked {GetRaceDescSingl(i.Prey)} for {GPPHimself(i.Target)}.",
            priority: 25, conditional: s => (s.oldLocation == PreyLocation.stomach || s.oldLocation == PreyLocation.stomach2) && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Aabayx),
            //Pouch Vore Exclusive
            new EventString((i) => $"<b>{i.Unit.Name}</b> pulls open <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> pouch to get at <b>{i.Prey.Name}</b> who then leaps out into freedom... of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> mouth.",
            priority: 25, conditional: s => s.oldLocation == PreyLocation.breasts && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Kangaroos),
            new EventString((i) => $"Running up to the {GetRaceDescSingl(i.Target)}, <b>{i.Unit.Name}</b> sticks {GPPHis(i.Unit)} face into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> pouch, swiftly swallowing the {GetRaceDescSingl(i.Prey)} within, before rushing off with {GPPHis(i.Unit)} \"prize\" in {GPPHis(i.Unit)} belly.",
            priority: 25, conditional: s => s.oldLocation == PreyLocation.breasts && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Kangaroos),
            new EventString((i) => $"<b>{i.Unit.Name}</b> forces {GPPHis(i.Unit)} way into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> already filled pouch. {GetRandomStringFrom($"<b>{i.Target.Name}</b>", $"the {GetRaceDescSingl(i.Target)}")} can feel some squirming and shuffling inside, but before {GPPHe(i.Target)} can investigate, {GetRandomStringFrom($"<b>{i.Unit.Name}</b>", $"the {GetRaceDescSingl(i.Unit)}")} hops back out, now with a belly full of {GetRandomStringFrom($"<b>{i.Prey.Name}</b>", $"{GetRaceDescSingl(i.Prey)}")}{GetRandomStringFrom(".", "!")}",
            priority: 25, conditional: s => s.oldLocation == PreyLocation.breasts && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Kangaroos),
            //Crop Vore Exclusive
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("headbutts", "bashes")} <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> crop forcing <b>{i.Prey.Name}</b> out. As soon as <b>{i.Prey.Name}</b> gets up <b>{i.Unit.Name}</b> swallows {GPPHim(i.Prey)} into {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.stomach)}.",
            priority: 25, conditional: s => s.oldLocation == PreyLocation.tail && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Terrorbird),
            new EventString((i) => $"<b>{i.Unit.Name}</b> baits <b>{i.Target.Name}</b> into trying to {GetRandomStringFrom("swallow", "eat")} {GPPHim(i.Unit)}, and takes the opportunity to reach up into {GetRandomStringFrom($"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b>", $"the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Target))}")}  beak and pull out <b>{i.Prey.Name}</b>, only to devour {GPPHim(i.Prey)} {GPPHimself(i.Unit)}{GetRandomStringFrom(".", "!")}",
            priority: 25, conditional: s => s.oldLocation == PreyLocation.tail && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Terrorbird),
            new EventString((i) => $"Wrapping {GPPHis(i.Unit)} arms around <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> {GetRaceDescSingl(i.Prey)} filled neck, <b>{i.Unit.Name}</b> preforms some bizarre reinterpretation of the heimlich maneuver, pushing against the bulge <b>{i.Prey.Name}</b> makes in the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Target))} crop until {GPPHe(i.Prey)} come{SIfSingular(i.Prey)} back out, and directly into <b>{i.Unit.Name}</b>'s waiting mouth{GetRandomStringFrom(".", "!", ", like how a bird might feed her babies.")}",
            priority: 25, conditional: s => s.oldLocation == PreyLocation.tail && s.preyLocation == PreyLocation.stomach && s.Target.Race == Race.Terrorbird && ActorHumanoid(s)),
        };
        BreastFeedMessages = new List<EventString>()
        {
            new EventString((i) => $"<b>{i.Unit.Name}</b> sees <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> injuries and begins to nurse {GPPHim(i.Target)} from {GPPHis(i.Unit)} {GetRandomStringFrom("plump", "full", "filled")} {PreyLocStrings.ToBreastSynPlural()}, healing them with it's {PreyLocStrings.ToFluid(PreyLocation.breasts)}.",priority:9, conditional: s => s.Target.HealthPct <= 0.3f && s.Unit != s.Target),
            new EventString((i) => $"<b>{i.Target.Name}</b> grabs and sucks on {(i.Unit == i.Target ? GPPHis(i.Target) + " own" : ApostrophizeWithOrWithoutS(i.Unit.Name))} {GetRandomStringFrom("plump", "full", "filled")} {PreyLocStrings.ToBreastSynPlural()}, gulping down a mouthful of {PreyLocStrings.ToFluid(PreyLocation.breasts)} with each squeeze.",priority:8, conditional: s => Lewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> {GetRandomStringFrom("pulls", "waves", "calls", "beckons")} <b>{i.Target.Name}</b> over shoving {GPPHis(i.Unit)} {GetRandomStringFrom("plump", "full", "filled")} {PreyLocStrings.ToBreastSynPlural()} into {GPPHis(i.Target)} mounth, <b>{i.Target.Name}</b> {GetRandomStringFrom("happily", "eagerly", "cheerily")} swallows the {PreyLocStrings.ToFluid(PreyLocation.breasts)}.",priority:8, conditional: s => Lewd(s) && s.Unit != s.Target),
            new EventString((i) => $"<b>{i.Target.Name}</b> suckles on {(i.Unit == i.Target ? GPPHis(i.Target) + " own" : ApostrophizeWithOrWithoutS(i.Unit.Name))} {GetRandomStringFrom("plump", "full", "filled")} {PreyLocStrings.ToBreastSynPlural()}, {GetRandomStringFrom("happily", "eagerly", "cheerily")} gulping down a mouthful of {PreyLocStrings.ToFluid(PreyLocation.breasts)}.",priority:8),
        };
        CumFeedMessages = new List<EventString>()
        {
            new EventString((i) => $"<b>{i.Target.Name}</b> lovingly fellates <b>{i.Unit.Name}</b>, and is rewarded with a mouthful of {GPPHis(i.Target)} lover's {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)}.",priority: 10, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> tells <b>{i.Target.Name}</b> to open wide as {GPPHe(i.Unit)} thrust{SIfSingular(i.Unit)} {GPPHis(i.Unit)} {PreyLocStrings.CockAdjSyn()} {PreyLocStrings.ToCockSyn()} into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> mouth and unloads {GPPHis(i.Unit)} {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)}.",priority: 10, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> deliriously beckons <b>{i.Unit.Name}</b> and begins playing with {GPPHis(i.Unit)} penis before feasting on {GPPHis(i.Unit)} {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)}.",priority: 10, conditional: s => ReqTargetCompatibleLewd(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> unloads {GPPHis(i.Unit)} {PreyLocStrings.SpoogeAdjSyn()} {PreyLocStrings.ToFluid(PreyLocation.balls)} into <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> mouth.",priority: 8),
        };
        RebirthMessages = new List<EventString>()
        {
            //RebirthType Key: 1 = NromalRebirth|2 = NormalConvert|3 = DigestRebirth|4 = DigestConvert
            //Huge credit to Cartography for all of the new logs!
            //Generic Rebirth and Conversion
            new EventString((i) => $"<b>{i.Target.Name}</b> is expelled from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)}, with a changed outlook on life.",priority: 10, conditional: s => (s.RebirthType == 2 || s.RebirthType == 4)),
            new EventString((i) => $"<b>{i.Target.Name}</b> is expelled from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)}, changed in mind and body.",priority: 10, conditional: s => (s.RebirthType == 1 || s.RebirthType == 3)),
            new EventString((i) => $"Finished, <b>{i.Target.Name}</b> is released from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)}, now ready to fight alongside <b>{i.Unit.Name}</b> rather than against {GPPHim(i.Unit)}.",priority: 10, conditional: s => (s.RebirthType == 2 || s.RebirthType == 4)),
            new EventString((i) => $"Finished, <b>{i.Target.Name}</b> is released from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)}, a changed person. Quite literally.",priority: 10, conditional: s => (s.RebirthType == 1 || s.RebirthType == 3)),
            new EventString((i) => $"Within <b>{i.Unit.Name}</b>, <b>{i.Target.Name}</b> has been transformed into {GetAorAN(GetRaceDescSingl(i.Target))}. With the process complete, <b>{i.Target.Name}</b> is freed into the world once more.",priority: 10, conditional: s => (s.RebirthType == 1 || s.RebirthType == 3)),
            //Womb Rebirth and Conversion
            new EventString((i) => $"With a loud grunt, <b>{i.Unit.Name}</b> pushes <b>{i.Target.Name}</b> from {GPPHis(i.Unit)} womb, and breathes a sigh of relief.",priority: 10, conditional: s => InWomb(s) && (s.RebirthType == 2 || s.RebirthType == 1)),
            new EventString((i) => $"With a loud grunt, <b>{i.Unit.Name}</b> pushes <b>{i.Target.Name}</b> from {GPPHis(i.Unit)} womb, and breathes a sigh of relief. Then mewls cutely because they can.",priority: 10, actorRace: Race.Cats, conditional: s => InWomb(s) && (s.RebirthType == 2 || s.RebirthType == 1)),
            new EventString((i) => $"As <b>{i.Target.Name}</b> is pushed from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("womb", "vagina")}, {GPPHis(i.Target)} former life is {GetRandomStringFrom("forgotten", "left behind")}, as <b>{i.Target.Name}</b> begins a new life as a {GetRaceDescSingl(i.Target)}.",priority: 10, conditional: s => InWomb(s) && s.RebirthType == 1),
            new EventString((i) => $"As <b>{i.Target.Name}</b> is pushed from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {GetRandomStringFrom("womb", "vagina")}, {GPPHe(i.Target)} find{SIfSingular(i.Target)} {GPPHis(i.Target)} mind altered and changed, ready to fight for {GPPHis(i.Target)} new mother.",priority: 10, conditional: s => InWomb(s) && s.RebirthType == 2),
            new EventString((i) => $"As <b>{i.Target.Name}</b> slides out of <b>{i.Unit.Name}</b>, {GPPHe(i.Target)} mutter{SIfSingular(i.Target)} \"I kinda hoped I'd get to go in an egg...\"",priority: 10, conditional: s => ((s.Unit.Race == Race.Alligators) || (s.Unit.Race == Race.Ants) || (s.Unit.Race == Race.Avians) || (s.Unit.Race == Race.Bees) || (s.Unit.Race == Race.Cockatrice) || (s.Unit.Race == Race.Dragon) || (s.Unit.Race == Race.Driders) || (s.Unit.Race == Race.EasternDragon) || (s.Unit.Race == Race.Frogs) || (s.Unit.Race == Race.Goodra) || (s.Unit.Race == Race.Gryphons) || (s.Unit.Race == Race.Harpies) || (s.Unit.Race == Race.Kobolds) || (s.Unit.Race == Race.Komodos) || (s.Unit.Race == Race.Lamia) || (s.Unit.Race == Race.Lizards) || (s.Unit.Race == Race.Monitors) || (s.Unit.Race == Race.Vipers) || (s.Unit.Race == Race.Wyvern) || (s.Unit.Race == Race.WyvernMatron)) && TargetHumanoid(s) && InWomb(s) && (s.RebirthType == 2 || s.RebirthType == 1)),
            new EventString((i) => $"Feeling that <b>{i.Target.Name}</b> has completed {GPPHis(i.Target)} stay in {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.womb)}, <b>{i.Unit.Name}</b> gives birth to <b>{i.Target.Name}</b>, who looks to {GPPHis(i.Target)} new mother for directions.",priority: 10, conditional: s => InWomb(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> gets down and gives birth to <b>{i.Target.Name}</b>, who tries to go back in after being nearly blinded by the light.",priority: 10, conditional: s => InWomb(s) && !State.World.IsNight),
            new EventString((i) => $"As <b>{i.Target.Name}</b> wakes up within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.womb)}, {GPPHe(i.Target)} start to struggle{SIfSingular(i.Target)}. Taking this as a sign, <b>{i.Unit.Name}</b> gets down and rebirths <b>{i.Target.Name}</b> into this world.",priority: 10, conditional: s => InWomb(s) && (s.RebirthType == 1 || s.RebirthType == 3)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> womb, having completed the task of taking <b>{i.Target.Name}</b> apart and putting {GPPHim(i.Target)} back together as something new, signals <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> brain that it's time to see what <b>{i.Target.Name}</b> has become. With only a few skilled pushes, <b>{i.Target.Name}</b> is reborn, now as {GetAorAN(GetRaceDescSingl(i.Target))}.",priority: 10, conditional: s => InWomb(s) && (s.RebirthType == 1 || s.RebirthType == 3)),
            new EventString((i) => $"It is done. <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> womb has done its work, and <b>{i.Target.Name}</b> is now {GetAorAN(GetRaceDescSingl(i.Target))}. Getting down, <b>{i.Unit.Name}</b> birthes <b>{i.Target.Name}</b> back into this world.",priority: 10, conditional: s => InWomb(s) && (s.RebirthType == 1 || s.RebirthType == 3)),
            //Stomach Rebirth and Conversion
            new EventString((i) => $"\"Ok, I think you're done\" <b>{i.Unit.Name}</b> says before coughing up <b>{i.Target.Name}</b>.",priority: 10, conditional: s => InStomach(s) && s.RebirthType == 4 && ActorHumanoid(s)),
            new EventString((i) => $"\"Ok, I think you're done\" <b>{i.Unit.Name}</b> says before coughing up <b>{i.Target.Name}</b>, who appears to have become {GetAorAN(GetRaceDescSingl(i.Target))}.",priority: 10, conditional: s => InStomach(s) && s.RebirthType == 3 && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> barfs up <b>{i.Target.Name}</b>, who seems fully intact, if a little tired.",priority: 10, conditional: s => InStomach(s) && s.RebirthType == 4),
            new EventString((i) => $"<b>{i.Unit.Name}</b> barfs up <b>{i.Target.Name}</b>, who emerges as a brand new {GetRaceDescSingl(i.Target)}.",priority: 10, conditional: s => InStomach(s) && s.RebirthType == 3),
            new EventString((i) => $"With a grumble from {GPPHis(i.Unit)} guts, <b>{i.Unit.Name}</b> squats and pushes out a living <b>{i.Target.Name}</b>. <b>{i.Unit.Name}</b> looks behind {GPPHimself(i.Unit)} and exclaims \"Woah, you're alive?\"",priority: 10, conditional: s => InStomach(s) && s.RebirthType == 4 && ActorHumanoid(s)),
            new EventString((i) => $"With a grumble from {GPPHis(i.Unit)} guts, <b>{i.Unit.Name}</b> squats and pushes out a living {GetRaceDescSingl(i.Target)}. <b>{i.Unit.Name}</b> looks to <b>{i.Target.Name}</b> and tells {GPPHim(i.Target)} \"Be glad my guts turned you into {GetAorAN(GetRaceDescSingl(i.Target))}, and not into {GetRaceDescSingl(i.Unit)} {PreyLocStrings.ScatSyn()}.",priority: 10, conditional: s => InStomach(s) && s.RebirthType == 3 && ActorHumanoid(s) && Scat(s)),
            new EventString((i) => $"After pushing <b>{i.Target.Name}</b> out {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.anal)}, <b>{i.Unit.Name}</b> turns and tells <b>{i.Target.Name}</b> \"You smell bad. You... should probably fix that.\"",priority: 10, conditional: s => InStomach(s) && s.RebirthType == 4 && ActorHumanoid(s) && (Scat(s) || Farts(s) || Diaper(s))),
            new EventString((i) => $"After pushing <b>{i.Target.Name}</b> out {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(PreyLocation.anal)}, <b>{i.Unit.Name}</b> turns and tells <b>{i.Target.Name}</b> \"Congrats on becoming {GetAorAN(GetRaceDescSingl(i.Target))}! Sorry your first moments as one had to smell this bad, though...\"",priority: 10, conditional: s => InStomach(s) && s.RebirthType == 3 && ActorHumanoid(s) && (Scat(s) || Farts(s) || Diaper(s))),
            //Breast Rebirth and Conversion
                //Both
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> essense is ubruptly shot from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToBreastSynPlural()} as pure milk, before coagulating and reforming into {GetAorAN(GetRaceDescSingl(i.Target))}.",priority: 10, conditional: s => s.Unit.Race != Race.Kangaroos && s.preyLocation == PreyLocation.breasts && s.RebirthType == 3),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> essense is ubruptly shot from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToBreastSynPlural()} as pure milk, before coagulating and reforming back into <b>{i.Target.Name}</b>.",priority: 10, conditional: s => s.Unit.Race != Race.Kangaroos && s.preyLocation == PreyLocation.breasts && s.RebirthType == 4),
            new EventString((i) => $"Feeling like showing mercy, <b>{i.Unit.Name}</b> decides to release <b>{i.Target.Name}</b> from {GPPHis(i.Unit)} {GetRandomStringFrom( "breast", "mammary", "boob", "tit", "jug", "knocker" )} fat. However, it would seem that <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> stay in the <b>{ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))}</b> {PreyLocStrings.ToBreastSynPlural()} altered {GPPHis(i.Target)} very essence, turning {GPPHim(i.Target)} into {GetAorAN(GetRaceDescSingl(i.Target))}.",priority: 10, conditional: s => s.Unit.Race != Race.Kangaroos && s.preyLocation == PreyLocation.breasts && s.RebirthType == 3),
            new EventString((i) => $"Feeling like showing mercy, <b>{i.Unit.Name}</b> decides to release <b>{i.Target.Name}</b> from {GPPHis(i.Unit)} {GetRandomStringFrom( "breast", "mammary", "boob", "tit", "jug", "knocker" )} fat.",priority: 10, conditional: s => s.Unit.Race != Race.Kangaroos && s.preyLocation == PreyLocation.breasts && s.RebirthType == 4),
            new EventString((i) => $"It is done. <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> boobs have done their work, and <b>{i.Target.Name}</b> is now {GetAorAN(GetRaceDescSingl(i.Target))}. For a moment, the flesh between <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToBreastSynPlural()} appears to stretch and contort, until, all at once, <b>{i.Target.Name}</b> and {GPPHis(i.Target)} new form slip out into the world once more.",priority: 10, conditional: s => s.Unit.Race != Race.Kangaroos && s.preyLocation == PreyLocation.breasts && s.RebirthType == 3),
                //Left or Right
            new EventString((i) => $"<b>{i.Unit.Name}</b> grips {GPPHis(i.Unit)} {(i.preyLocation == PreyLocation.leftBreast ? "left" : "right")} {GetRandomStringFrom( "breast", "mammary", "boob", "tit", "jug", "knocker" )} and squeezes, forcing out a milk soaked <b>{i.Target.Name}</b>.",priority: 10, conditional: s => (s.preyLocation == PreyLocation.leftBreast || s.preyLocation == PreyLocation.rightBreast) && s.RebirthType == 4),
            new EventString((i) => $"<b>{i.Unit.Name}</b> grips {GPPHis(i.Unit)} {(i.preyLocation == PreyLocation.leftBreast ? "left" : "right")} {GetRandomStringFrom( "breast", "mammary", "boob", "tit", "jug", "knocker" )} and squeezes, forcing out a milk soaked {GetRaceDescSingl(i.Target)}.",priority: 10, conditional: s => (s.preyLocation == PreyLocation.leftBreast || s.preyLocation == PreyLocation.rightBreast) && s.RebirthType == 3),
            new EventString((i) => $"Sensing that {GPPHis(i.Unit)} {GetRandomStringFrom( "breast", "mammary", "boob", "tit", "jug", "knocker" )} has done its job, <b>{i.Unit.Name}</b> forces a milk soaked {GetRaceDescSingl(i.Target)} from {GPPHis(i.Unit)} {(i.preyLocation == PreyLocation.leftBreast ? "left" : "right")} nipple, the new form of <b>{i.Target.Name}</b>.",priority: 10, conditional: s => (s.preyLocation == PreyLocation.leftBreast || s.preyLocation == PreyLocation.rightBreast) && s.RebirthType == 3),
            new EventString((i) => $"It is done. <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {(i.preyLocation == PreyLocation.leftBreast ? "left" : "right")} breast has done its work, and <b>{i.Target.Name}</b> is now {GetAorAN(GetRaceDescSingl(i.Target))}. <b>{i.Unit.Name}</b> sucks {GPPHis(i.Unit)} {GetRandomStringFrom( "breast", "mammary", "boob", "tit", "jug", "knocker" )} until enough of <b>{i.Target.Name}</b> has popped out for <b>{i.Unit.Name}</b> to grab {GPPHim(i.Target)} and pull the {GetRaceDescSingl(i.Target)} out.",priority: 10, conditional: s => (s.preyLocation == PreyLocation.leftBreast || s.preyLocation == PreyLocation.rightBreast) && s.RebirthType == 3),
            //CV Rebirth and Conversion
            new EventString((i) => $"With one last grunt, <b>{i.Target.Name}</b> erupts, alive, from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToCockSyn()}.",priority: 10, conditional: s => s.preyLocation == PreyLocation.balls && s.RebirthType == 4),
            new EventString((i) => $"With one last grunt, <b>{i.Target.Name}</b> erupts, alive, from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToCockSyn()}. <b>{i.Target.Name}</b> hasn't noticed yet, but {GPPHis(i.Target)} stay in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.balls)} appears to have overwrote {GPPHis(i.Target)} {GetRandomStringFrom("DNA", "genetic code")}, making {GPPHim(i.Target)} into {GetAorAN(GetRaceDescSingl(i.Target))}.",priority: 10, conditional: s => s.preyLocation == PreyLocation.balls && s.RebirthType == 3),
            new EventString((i) => $"During the time spent in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(PreyLocation.balls)}, the {ApostrophizeWithOrWithoutS(GetRaceDescSingl(i.Unit))} {GetRandomStringFrom("cum", "jizz", "spooge", "goo", "thick fluid", "semen", "sperm")} had been attacking <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> very {GetRandomStringFrom("DNA", "genes")}, rewriting them into a brand new {GetRaceDescSingl(i.Target)}.",priority: 10, conditional: s => s.preyLocation == PreyLocation.balls && s.RebirthType == 3),
            new EventString((i) => $"It is done. <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> sperm has done its work, and <b>{i.Target.Name}</b> is now {GetAorAN(GetRaceDescSingl(i.Target))}. With a tight grip on {GPPHis(i.Unit)} {PreyLocStrings.ToCockSyn()}, <b>{i.Unit.Name}</b> {GetRandomStringFrom("faps", "masterbates")}, going faster and faster until <b>{i.Target.Name}</b> is launched back into the world, alongside a healthy dose of {GetRandomStringFrom("cum", "jizz", "spooge", "goo", "thick fluid", "semen")}.",priority: 10, conditional: s => Lewd(s) && s.preyLocation == PreyLocation.balls && s.RebirthType == 3),
            //Generic Digestion Rebirth only
            new EventString((i) => $"<b>{i.Target.Name}</b> converted from one side to another and changed race thanks to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> converting digestion rebirth trait.",priority: 10, conditional: s => s.RebirthType == 3),
            new EventString((i) => $"<b>{i.Target.Name}</b> is released from inside <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body, though now as {GetAorAN(GetRaceDescSingl(i.Target))}.",priority: 10, conditional: s => s.RebirthType == 3),
            new EventString((i) => $"{Capitalize(GetAorAN(GetRaceDescSingl(i.Target)))} is expelled from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body, the brand new form of <b>{i.Target.Name}</b>.",priority: 10, conditional: s => s.RebirthType == 3),
            new EventString((i) => $"With <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body partially dissolved, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body takes this opportunity to rewrite <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> worldview and genetics, before allowing the brand new {GetRaceDescSingl(i.Target)} back out.",priority: 10, conditional: s => s.RebirthType == 3),
            new EventString((i) => $"As <b>{i.Target.Name}</b> is released from <b>{i.Unit.Name}</b>, {GPPHe(i.Target)} look{SIfSingular(i.Target)} at {GPPHimself(i.Target)}, and note{SIfSingular(i.Target)} that {GPPHe(i.Target)} {IsAre(i.Target)} now {GetAorAN(GetRaceDescSingl(i.Target))}.",priority: 10, conditional: s => s.RebirthType == 3),
            new EventString((i) => $"<b>{i.Target.Name}</b> emerges from <b>{i.Unit.Name}</b> changed into {GetAorAN(GetRaceDescSingl(i.Target))}.",priority: 10, conditional: s => s.RebirthType == 3),
            //Generic Digestion Conversion only
            new EventString((i) => $"<b>{i.Target.Name}</b> converted from one side to another thanks to <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> digestion conversion trait.",priority: 10, conditional: s => s.RebirthType == 4),
            new EventString((i) => $"With <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> body partially dissolved, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> body takes this opportunity to rewrite <b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> worldview before putting {GPPHim(i.Target)} back together and letting {GPPHim(i.Target)} out, now ready to fight for <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> side.",priority: 10, conditional: s => s.RebirthType == 4),
            new EventString((i) => $"Right before death within <b>{i.Unit.Name}</b>, <b>{i.Target.Name}</b> is released on the condition of joining <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> side of the battle.",priority: 10, conditional: s => s.RebirthType == 4),
            new EventString((i) => $"<b>{i.Target.Name}</b> was converted to the side of the {InfoPanel.RaceSingular(State.World?.GetEmpireOfSide(i.Unit.Side))}, thanks to a large amount of \"persuasion\" by <b>{i.Unit.Name}</b>.",priority: 10, conditional: s => s.RebirthType == 4 && !State.GameManager.PureTactical),
            new EventString((i) => $"Within <b>{i.Unit.Name}</b>, <b>{i.Target.Name}</b> has been brainwashed, and now fully believes in the {InfoPanel.RaceSingular(State.World?.GetEmpireOfSide(i.Unit.Side))} cause.",priority: 10, conditional: s => s.RebirthType == 4 && !State.GameManager.PureTactical),
            new EventString((i) => $"<b>{i.Target.Name}</b> emerges from <b>{i.Unit.Name}</b> a changed {i.Target.Race}, ready to fight for the {InfoPanel.RaceSingular(State.World?.GetEmpireOfSide(i.Unit.Side))}!",priority: 10, conditional: s => s.RebirthType == 4 && !State.GameManager.PureTactical),
            //Slime exclusive
            new EventString((i) => $"With a squelch, <b>{i.Unit.Name}</b> performs mitosis, releasing <b>{i.Target.Name}</b>.",priority: 10, actorRace: Race.Slimes, conditional: s => (s.RebirthType == 2 || s.RebirthType == 4)),
            new EventString((i) => $"With a squelch, <b>{i.Unit.Name}</b> performs mitosis, <b>{i.Target.Name}</b> becoming a seperate slime.",priority: 10, actorRace: Race.Slimes, conditional: s => s.Target.Race != Race.Slimes && (s.RebirthType == 1 || s.RebirthType == 3)),
        };
        GreatEscapeKeepMessages = new List<EventString>()
        {
            new EventString((i) => $"<b>{i.Unit.Name}</b> jiggles their {PreyLocStrings.ToSyn(i.preyLocation)} with <b>{i.Target.Name}</b> stashed inside. \"What are you waiting for in there?\" - {GPPHe(i.Unit)} asks, annoyed.",priority:25, conditional: s => HasGreatEscape(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)} is quiet. Too quiet. \"Did you digest in there?\" - <b>{i.Unit.Name}</b> asks prodding {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)}. Nope, <b>{i.Target.Name}</b> is still there.",priority:25, conditional: s => HasGreatEscape(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> stretches, feeling the pleasant heaviness of <b>{i.Target.Name}</b> in {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)}.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Target.Name}</b> kicks the {PreyLocStrings.ToSyn(i.preyLocation)} holding {GPPHim(i.Target)} from the inside. <b>{i.Unit.Name}</b> considers getting rid of {GPPHis(i.Unit)} rude occupant right now.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Target.Name}</b> curls up within claustrophobic confines of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)}.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Unit.Name}</b> has a hard time keeping <b>{i.Target.Name}</b> in {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)}.",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Unit.Name}</b> moans, rubbing {GPPHis(i.Unit)} {PreyLocStrings.ToSyn(i.preyLocation)}. <b>{i.Target.Name}</b> proves to be a hardy catch",priority:25, conditional: HasGreatEscape),
            new EventString((i) => $"<b>{i.Unit.Name}</b> listens to the gurgling of {GPPHis(i.Unit)} <b>{i.Target.Name}</b>-filled stomach. To {GPPHis(i.Unit)} dismay, there's little actual gurgling.",priority:25, conditional: s => HasGreatEscape(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> shows off {GPPHis(i.Unit)} belly to the others. <b>{i.Target.Name}</b> within said belly is waiting, having already devised plan to embarass {GPPHis(i.Target)} captor.",priority:25, conditional: s => HasGreatEscape(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> listens to the gurgling of {GPPHis(i.Unit)} <b>{i.Target.Name}</b>-filled stomach. To {GPPHis(i.Unit)} dismay, there's little actual gurgling.",priority:25, conditional: s => HasGreatEscape(s) && InStomach(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> gropes {GPPHis(i.Unit)} <b>{i.Target.Name}</b>-stuffed midsection. To {GPPHis(i.Unit)} annoyance, <b>{i.Target.Name}</b> still refuses to melt.",priority:25, conditional: s => HasGreatEscape(s) && InWomb(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> lets out a quiet gasp with each movement of surprisingly resilient <b>{i.Target.Name}</b> within {GPPHis(i.Unit)} womb.",priority:25, conditional: s => HasGreatEscape(s) && InWomb(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> sighs in resignation as <b>{i.Target.Name}</b> continues squirming within {GPPHis(i.Unit)} vagina. Looks like this annoyance isn't gonna melt away for a while.",priority:25, conditional: s => HasGreatEscape(s) && InWomb(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> full breasts jiggle as <b>{i.Target.Name}</b> struggles inside.",priority:25, conditional: s => HasGreatEscape(s) && InBreasts(s)),
            new EventString((i) => $"\"Enjoying your time there?\" - <b>{i.Unit.Name}</b> asks the prisoner of {GPPHis(i.Unit)} bosom.",priority:25, conditional: s => HasGreatEscape(s) && InBreasts(s) && ActorHumanoid(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> is tucked comfortably within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> engorged breasts, the ideal environment to be plotting escape.",priority:25, conditional: s => HasGreatEscape(s) && InBreasts(s)),
            new EventString((i) => $"<b>{i.Target.Name}</b> turns around within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> breasts, getting {GPPHimself(i.Target)} a nice gulp of milk.",priority:25, conditional: s => HasGreatEscape(s) && InBreasts(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> moans in pleasure as <b>{i.Target.Name}</b> massages {GPPHis(i.Unit)} nutsack from the inside, trying to make {GPPHis(i.Target)} adversary cum {GPPHim(i.Target)} out.",priority:25, conditional: s => HasGreatEscape(s) && InBalls(s)),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> balls slosh and quiver, <b>{i.Target.Name}</b> assuming more comfortable position within.",priority:25, conditional: s => HasGreatEscape(s) && InBalls(s)),
            new EventString((i) => $"<b>{i.Unit.Name}</b> can't wait to humiliate {GPPHis(i.Unit)} prey by splattering its remains across the ground. <b>{i.Target.Name}</b> can't wait to humiliate {GPPHis(i.Target)} pred by coming out intact.",priority:25, conditional: s => HasGreatEscape(s) && InBalls(s)),
            new EventString((i) => $"<b>Erin</b> lets out a horrified shriek as <b>{i.Unit.Name}</b> begins to rub at <b>Erin</b>'s nethers through their belly.",
          targetRace: Race.Erin, priority: 26, conditional: s => Lewd(s) && HasGreatEscape(s) && InStomach(s)),
          new EventString((i) => $"<b>{i.Unit.Name}</b> starts groping at the bulge that is <b>Erin</b>, squeezing and rubbing her most sensitive parts, trying to coerce an orgasm out of the terrified Nyangel.",
          targetRace: Race.Erin, priority: 26, conditional: s => Lewd(s) && HasGreatEscape(s)),
          new EventString((i) => $"Even though she should be terrified, the curse controlling <b>Erin</b>'s mind removes any doubt as the indigestible Nyangel begins fingering herself within <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> lewd {PreyLocStrings.ToSyn(i.preyLocation)}.",
          targetRace: Race.Erin, priority: 26, conditional: s => Cursed(s) && Lewd(s)),
          new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach isn't doing much to <b>Erin</b>, unlike the mind-altering spell bringing her closer and closer to another orgasm.",
          targetRace: Race.Erin, priority: 26, conditional: s => Cursed(s) && Lewd(s) && InStomach(s)),
          new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stinging acids burn away at <b>Erin</b>, causing her to scream in agony even though they fail to break her body down.",
          targetRace: Race.Erin, priority: 26, conditional: s => HardVore(s) && HasGreatEscape(s) && InStomach(s)),
          new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> stomach tries to melt <b>Erin</b> down, but the Nyangel's body is staying intact.",
          targetRace: Race.Erin, priority: 26, conditional: s => HasGreatEscape(s) && InStomach(s)),
          new EventString((i) => $" \"Let me out! Please!\" <b>Erin</b> screams, to no avail, as <b>{i.Unit.Name}</b> seems content to keep the poor Nyangel in there.",
          targetRace: Race.Erin, priority: 26, conditional: HasGreatEscape),
          new EventString((i) => $"<b>Erin</b>'s body doesn't melt away, but her claustrophobia makes sure that her mind isn't staying intact.",
          targetRace: Race.Erin, priority: 26, conditional: HasGreatEscape),
          new EventString((i) => $"<b>Erin</b> squirms in <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> belly, hoping to escape the terrifyingly small space.",
          targetRace: Race.Erin, priority: 26, conditional: s => HasGreatEscape(s) && InStomach(s)),
          new EventString((i) => $"<b>Erin</b> doesn't make any move to resist as <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> acids try - and fail - to eat away at her flesh.",
          targetRace: Race.Erin, priority: 26, conditional: s => Cursed(s) && HasGreatEscape(s) && InStomach(s)),
        };

        GreatEscapeFleeMessages = new List<EventString>()
        {
            new EventString((i) => $"<b>{i.Unit.Name}</b> stretches and goes to pat {GPPHis(i.Unit)} full {PreyLocStrings.ToSyn(i.preyLocation)}, only to notice with horror the emptiness where <b>{i.Target.Name}</b> was supposed to be.",priority:25),
            new EventString((i) => $"\"Curse you, <b>{i.Target.Name}</b>, you won't get away next time!\" - yells <b>{i.Unit.Name}</b>, shaking {GPPHis(i.Unit)} fist at the heavens.",priority:25, conditional: ActorHumanoid),
            new EventString((i) => $"Tired of not being to digest <b>{i.Target.Name}</b>, <b>{i.Unit.Name}</b> decides to let {GPPHim(i.Target)} out.",priority:25),
            new EventString((i) => $"<b>{i.Target.Name}</b> slips out of <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> {PreyLocStrings.ToSyn(i.preyLocation)}.",priority:25),
            new EventString((i) => $"Somehow, <b>{i.Target.Name}</b> managed to escape without anyone noticing, the only thing reminding <b>{i.Unit.Name}</b> of {GPPHim(i.Target)} being {GetRaceDescSingl(i.Unit)}'s aching butt.",priority:25, conditional: InStomach),
            new EventString((i) => $"<b>{i.Target.Name}</b> pulls out a smoke bomb and lights it up. Amid the coughing fit, <b>{i.Unit.Name}</b> is too distracted to notice {GPPHis(i.Unit)} prey sneaking out and away.",priority:25, conditional: InStomach),
            new EventString((i) => $"After the battle, <b>{i.Unit.Name}</b> decides to take a quick nap to digest <b>{i.Target.Name}</b>. Waking up, {GPPHe(i.Unit)} notice{SIfSingular(i.Unit)} in horror that {GPPHis(i.Unit)} belly is now completely empty, with no signs of <b>{i.Target.Name}</b> ever being there.",priority:25, conditional: InStomach),
            new EventString((i) => $"Somehow, <b>{i.Target.Name}</b> managed to escape without anyone noticing, the only thing reminding <b>{i.Unit.Name}</b> of {GPPHim(i.Target)} being {GetRaceDescSingl(i.Unit)}'s aching pussy.",priority:25, conditional: InWomb),
            new EventString((i) => $"<b>{ApostrophizeWithOrWithoutS(i.Target.Name)}</b> squirming around has driven <b>{i.Unit.Name}</b> to orgasm. The {GetRaceDescSingl(i.Target)} triumphantly slides out as {GPPHis(i.Target)} captor quivers on the ground.",priority:25, conditional: InWomb),
            new EventString((i) => $"<b>{i.Unit.Name}</b>, tired of <b>{i.Target.Name}</b> hogging the valuable space within {GPPHis(i.Unit)} womb, decides to evict the freeloader.",priority:25, conditional: InWomb),
            new EventString((i) => $"Somehow, <b>{i.Target.Name}</b> managed to escape without anyone noticing, the only thing reminding <b>{i.Unit.Name}</b> of {GPPHim(i.Target)} being {GetRaceDescSingl(i.Unit)}'s aching nipples.",priority:25, conditional: InBreasts),
            new EventString((i) => $"<b>{i.Unit.Name}</b> shakes {GPPHis(i.Unit)} breasts trying to see if <b>{i.Target.Name}</b> has been digested already. Apparently not, as the sly prey frees {GPPHimself(i.Target)} from <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> bosom and runs away.'",priority:25, conditional: InBreasts),
            new EventString((i) => $"Frustrated with <b>{i.Target.Name}</b> not digesting, <b>{i.Unit.Name}</b> squeezes {GPPHis(i.Unit)} breasts, evicting the freeloader into a nearby thorny bush.",priority:25, conditional: InBreasts),
            new EventString((i) => $"Somehow, <b>{i.Target.Name}</b> managed to escape without anyone noticing, the only thing reminding <b>{i.Unit.Name}</b> of {GPPHim(i.Target)} being {GetRaceDescSingl(i.Unit)}'s aching cockhole.",priority:25, conditional: InBalls),
            new EventString((i) => $"<b>{i.Target.Name}</b> pokes, prods and massages <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> ballsack from the inside, nearly bringing {GPPHim(i.Unit)} to orgasm several times. Frustrated, <b>{i.Unit.Name}</b> decides to take matters in {GPPHis(i.Unit)} own hands, soon unleashing a massive load of all the pent-up semen... in which {GPPHis(i.Unit)} prey escapes.",priority:25, conditional: InBalls),
            new EventString((i) => $"Suddenly, <b>{ApostrophizeWithOrWithoutS(i.Unit.Name)}</b> cock expands to immense size and releases <b>{i.Target.Name}</b> back into the world. Before <b>{i.Unit.Name}</b> could react, his prey, slippery from cum covering it, escapes.",priority:25, conditional: InBalls),
        };

    }

}
